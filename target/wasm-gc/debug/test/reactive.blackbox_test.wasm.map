{"version":3,"sources":["/home/blem/projects/reactive/__generated_driver_for_blackbox_test.mbt","/home/blem/projects/reactive/reactive__moonbit_internal_doc_test.mbt","/home/blem/projects/reactive/reactive.mbt","/home/blem/.moon/lib/core/builtin/tuple_show.mbt","/home/blem/.moon/lib/core/builtin/array.mbt","/home/blem/.moon/lib/core/builtin/autoloc.mbt","/home/blem/.moon/lib/core/builtin/to_string.mbt","/home/blem/.moon/lib/core/builtin/linked_hash_map.mbt","/home/blem/.moon/lib/core/builtin/option.mbt","/home/blem/.moon/lib/core/builtin/stringbuilder_buffer.mbt","/home/blem/.moon/lib/core/builtin/console.mbt","/home/blem/.moon/lib/core/builtin/tuple_eq.mbt","/home/blem/.moon/lib/core/builtin/bytes.mbt","/home/blem/.moon/lib/core/builtin/string.mbt","/home/blem/.moon/lib/core/builtin/intrinsics.mbt","/home/blem/.moon/lib/core/builtin/show.mbt","/home/blem/.moon/lib/core/builtin/assert.mbt","/home/blem/.moon/lib/core/builtin/failure.mbt","/home/blem/.moon/lib/core/builtin/hasher.mbt","/home/blem/.moon/lib/core/builtin/output.mbt","/home/blem/.moon/lib/core/builtin/op.mbt","/home/blem/.moon/lib/core/builtin/arraycore_nonjs.mbt","/home/blem/.moon/lib/core/builtin/uninitialized_array.mbt","/home/blem/.moon/lib/core/builtin/traits.mbt","/home/blem/.moon/lib/core/builtin/byte.mbt","/home/blem/.moon/lib/core/option/option.mbt","/home/blem/.moon/lib/core/hashmap/hashmap.mbt","/home/blem/.moon/lib/core/hashmap/utils.mbt","/home/blem/.moon/lib/core/abort/abort.mbt"],"sourcesContent":[null,null,"///| Subscriber ID\npriv type SubId Int derive(Eq, Hash)\n\n///| A reactive signal that can be subscribed to and updated.\nstruct Signal[T] {\n  id : String // unique ID for this signal\n  sub_id : () -> Int // for generating unique subscriber IDs\n  mut value : T // any changes to this value will trigger subscribers\n  subscribers : @hashmap.T[SubId, Subscriber[T]] // subscribers to this signal\n}\n\n///|\nstruct Subscriber[T] {\n  id : SubId // unique ID for this subscriber, used to subscribe/unsubscribe\n  effect : (T) -> Unit // function to call when the signal changes\n}\n\n///|\nfn[T] Subscriber::effect(self : Subscriber[T], value : T) -> Unit {\n  (self.effect)(value)\n}\n\n///|\nfn id_generator() -> () -> Int {\n  let mut id : Int = -1\n  fn() -> Int {\n    id += 1\n    id\n  }\n}\n\n///| Creates a new unique ID for signals\nlet signal_id : () -> Int = id_generator()\n\n///| Creates a new signal with the given initial value.\npub fn[T : Eq] new(value : T, label~ : String = \"signal\") -> Signal[T] {\n  let sub_id = id_generator()\n  let id = \"\\{label}#\\{signal_id()}\"\n  Signal::{ id, value, sub_id, subscribers: @hashmap.new() }\n}\n\n///| Returns the unique ID of the signal\n///\n/// Parameters:\n/// - `self`: The signal to get the ID from.\n///\n/// Returns:\n/// - The unique ID of the signal.\n///\n/// Example:\n/// ```moonbit\n/// test \"signal_id\" {\n///   let s = new(0)\n///   assert_eq!(s.id(), \"signal#0\")  \n///   let s2 = new(1, label=\"my_signal\")\n///   assert_eq!(s2.id(), \"my_signal#1\")\n/// }\n/// ```\npub fn[T] Signal::id(self : Signal[T]) -> String {\n  self.id\n}\n\n///| Returns the current value of the signal `s`\n/// \n/// Parameters:\n/// - `s`: The signal to get the value from.\n/// \n/// Returns:\n/// - The current value of the signal.\n/// \n/// Example:\n/// ```moonbit\n/// test \"signal_val\" {\n///   let s = new(0)\n///   assert_eq!(s.val(), 0)\n///   s.update(5)\n///   assert_eq!(s.val(), 5)\n/// }\n/// ```\npub fn[T] Signal::val(s : Signal[T]) -> T {\n  s.value\n}\n\n///| Sets the value of the signal `s` to `value` without notifying subscribers\n/// This is useful for cases where you want to set the value without triggering any side effects.\n///\n/// Parameters:\n/// - `s`: The signal to set.\n/// - `value`: The new value to set.\n///\n/// Example:\n/// ```moonbit\n/// test \"signal_set\" {\n///   let values = []\n///   let s = new(0)\n///   s.subscribe_permanent(fn(v) { values.push(v) })\n///   assert_eq!(s.val(), 0)\n///   s.set(5) // This will set the signal to 5 without notifying subscribers.\n///   assert_eq!(s.val(), 5)\n///   s.update(10) // This will notify subscribers with the new value.\n///   assert_eq!(s.val(), 10)\n///   assert_eq!(values, [0, 10])\n/// }\n/// ```\npub fn[T] Signal::set(s : Signal[T], value : T) -> Unit {\n  s.value = value\n}\n\n///| Returns the unique subscriber ID for this signal\nfn[T] Signal::sub_id(self : Signal[T]) -> SubId {\n  (self.sub_id)()\n}\n\n///| Subscribes to a signal and immediately calls the effect function with the current value\npub fn[T] Signal::subscribe(\n  self : Signal[T],\n  effect : (T) -> Unit\n) -> Subscriber[T] {\n  let subscriber = Subscriber::{ id: self.sub_id(), effect }\n  self.subscribers[subscriber.id] = subscriber\n  subscriber.effect(self.value)\n  subscriber\n}\n\n///| Subscribes to a signal without immediately calling the effect function\n/// This is useful for cases where you want to set up a subscription but don't want to\n/// trigger the effect function until the signal changes.\npub fn[T] Signal::subscribe_only(\n  self : Signal[T],\n  effect : (T) -> Unit\n) -> Subscriber[T] {\n  let subscriber = Subscriber::{ id: self.sub_id(), effect }\n  self.subscribers[subscriber.id] = subscriber\n  subscriber\n}\n\n///| Subscribes to a signal permanently and immediately calls the effect function with the current value.\n/// This is useful for cases where you want to set up a subscription that will not be removed\npub fn[T] Signal::subscribe_permanent(\n  self : Signal[T],\n  effect : (T) -> Unit\n) -> Unit {\n  self.subscribe(effect) |> ignore\n}\n\n///| Subscribes to a signal permanently without immediately calling the effect function.\npub fn[T] Signal::subscribe_permanent_only(\n  self : Signal[T],\n  effect : (T) -> Unit\n) -> Unit {\n  self.subscribe_only(effect) |> ignore\n}\n\n///| Updates the value of the signal and notifies all subscribers\n/// \n/// Parameters:\n/// - `self`: The signal to update.\n/// - `new_value`: The new value to set.\n///\n/// Example:\n/// ```moonbit\n/// test \"signal_update\" {\n///   let values = []\n///   let s = new(0)\n///   s.subscribe_permanent(fn(v) { values.push(v) })\n///   assert_eq!(s.val(), 0)\n///   s.update(5) // This will notify subscribers with the new value.\n///   assert_eq!(s.val(), 5)\n///   assert_eq!(values, [0, 5])\n///   s.update(10) // This will notify subscribers with the new value.\n///   assert_eq!(s.val(), 10)\n///   assert_eq!(values, [0, 5, 10])\n/// }\n/// ```\npub fn[T : Eq] Signal::update(self : Signal[T], new_value : T) -> Unit {\n  if self.value != new_value {\n    self.value = new_value\n    for _, subscriber in self.subscribers {\n      subscriber.effect(self.value)\n    }\n  }\n}\n\n///| Unsubscribes a subscriber from a signal.\n/// \n/// Parameters:\n/// - `self`: The signal to unsubscribe from.\n/// - `subscription`: The subscriber to unsubscribe.\n///\n/// Example:\n/// ```moonbit\n/// test \"signal_unsubscribe\" {\n///   let values = []\n///   let s = new(0)\n///   let sub = s.subscribe(fn(v) { values.push(v) })\n///   assert_eq!(s.val(), 0)\n///   s.update(5) // This will notify subscribers with the new value.\n///   assert_eq!(s.val(), 5)\n///   assert_eq!(values, [0, 5])\n///   s.unsubscribe(sub) // This will unsubscribe the subscriber.\n///   assert_eq!(s.val(), 5)\n///   s.update(10) // This will not notify the unsubscribed subscriber.\n///   assert_eq!(s.val(), 10)\n///   assert_eq!(values, [0, 5])\n/// }\n/// ```\npub fn[T] Signal::unsubscribe(\n  self : Signal[T],\n  subscription : Subscriber[T]\n) -> Unit {\n  self.subscribers.remove(subscription.id)\n}\n\n///| Creates a new signal that maps the value of `self` using the function `f`.\n/// \n/// Parameters:\n/// - `self`: The original signal.\n/// - `f`: The mapping function that takes the value of `self` and returns a new value.\n/// \n/// Returns:\n/// - A new signal that emits the result of applying `f` to the value of `self`.\n///\n/// Example:\n/// ```moonbit\n/// test \"signal_map\" {\n///   let values = []\n///   let s = new(0)\n///   let s2 = s.map(fn(v) { v + 1 })\n///   s2.subscribe_permanent(fn(v) { values.push(v) })\n///   s.update(5) // This will trigger the subscriber with value 6.\n///   s.update(10) // This will trigger the subscriber with value 11.\n///   s.update(20) // This will trigger the subscriber with value 21.\n///   inspect!(values, content=\"[1, 6, 11, 21]\")\n/// }\n/// ```\npub fn[T : Eq, U : Eq] Signal::map(self : Signal[T], f : (T) -> U) -> Signal[U] {\n  let s = new(f(self.value))\n  self.subscribe_permanent(fn(v) { s.update(f(v)) })\n  s\n}\n\n///| Creates a new signal that maps the values of two signals using the function `f`.\n/// \n/// Parameters:\n/// - `s1`: The first signal.\n/// - `s2`: The second signal.\n/// - `f`: The mapping function that takes the values of both signals and returns a new value.\n/// \n/// Returns:\n/// - A new signal that emits the result of applying `f` to the values of `s1` and `s2`.\n/// \n/// Example:\n/// ```moonbit\n/// test \"signal_map2\" {\n///   let values = []\n///   let s1 = new(1)\n///   let s2 = new(2)\n///   let s3 = @reactive.map2(s1, s2, fn(a, b) { a + b })\n///   s3.subscribe_permanent(fn(v) { values.push(v) })\n///   s1.update(3) // This will trigger the subscriber with value 5.\n///   s2.update(4) // This will trigger the subscriber with value 7.\n///   s1.update(5) // This will trigger the subscriber with value 9.\n///   inspect!(values, content=\"[3, 5, 7, 9]\")\n/// }\n/// ```\npub fn[T : Eq, U : Eq, V : Eq] map2(\n  s1 : Signal[T],\n  s2 : Signal[U],\n  f : (T, U) -> V\n) -> Signal[V] {\n  let s = new(f(s1.value, s2.value))\n  s1.subscribe_permanent(fn(v) { s.update(f(v, s2.value)) })\n  s2.subscribe_permanent(fn(v) { s.update(f(s1.value, v)) })\n  s\n}\n\n///| Creates a new signal that receives values from `self` where `f(new_value)` is `true`.\n/// If the initial value of `f(self.get()) == false`, the new signal will be \n/// initialized with the given `seed` value.\n/// \n/// Parameters:\n/// - `self`: The original signal.\n/// - `f`: The filter function.\n/// - `seed`: The initial value for the new signal if the filter function returns false during creation.\n///\n/// Returns:\n/// - A new signal that emits only the values from `self` that pass the filter function `f`.\n/// \n/// Example:\n/// ```moonbit\n/// test \"signal_filter\" {\n///   let filtered_values = []\n///   let s = new(1)\n///   let s2 = s.filter(fn(v) { v > 5 }, 0)\n///   s2.subscribe_permanent_only(fn(v) { filtered_values.push(v) })\n///   s.update(10) // This will trigger the subscriber with value 10.\n///   s.update(7) // This will trigger the subscriber with value 7.\n///   s.update(3) // This will not trigger the subscriber.\n///   inspect!(filtered_values, content=\"[10, 7]\")\n/// }\n/// ```\npub fn[T : Eq] Signal::filter(\n  self : Signal[T],\n  f : (T) -> Bool,\n  seed : T\n) -> Signal[T] {\n  let v = if f(self.value) { self.value } else { seed }\n  let s = new(v)\n  self.subscribe_permanent(fn(v) { if f(v) { s.update(v) } })\n  s\n}\n\n///| Creates a new signal that maps the values of `self` iff `f(self.get()) == Some(v)`.\n/// If `f(self.get())` returns `None`, the new signal will be initialized with the given `seed` value\n/// \n/// This combines the functionality of `map` and `filter` into a single operation.\n/// \n/// Parameters:\n/// - `self`: The original signal.\n/// - `f`: The mapping function.\n/// - `seed`: The initial value for the new signal if the mapping function returns `None` during creation.\n/// \n/// Returns:\n/// - A new signal that emits the values from `self` that pass the mapping function `f`.\n/// \n/// Example:\n/// ```moonbit\n/// test \"signal_filter_map\" {\n///   let mapped_values = []\n///   let s = new(1)\n///   let s2 = s.filter_map(fn(v) { if v > 5 { Some(v+2) } else { None } }, 0)\n///   s2.subscribe_permanent_only(fn(v) { mapped_values.push(v) })\n///   s.update(10) // This will trigger the subscriber with value 12.\n///   s.update(7) // This will trigger the subscriber with value 9.\n///   s.update(3) // This will not trigger the subscriber.\n///   inspect!(mapped_values, content=\"[12, 9]\")\n/// }\n/// ```\npub fn[T, U : Eq] Signal::filter_map(\n  self : Signal[T],\n  f : (T) -> U?,\n  seed : U\n) -> Signal[U] {\n  let v = f(self.value).or_else(fn() { seed })\n  let s = new(v)\n  self.subscribe_permanent(fn(v) {\n    match f(v) {\n      Some(v) => s.update(v)\n      None => ()\n    }\n  })\n  s\n}\n\n// -- Combinators ---\n\n///| Creates a new signal which re-emits the latest signal from one of the \n/// signals in `signals` array.\n/// \n/// This is useful for combining multiple signals into a single signal.\n///\n/// The initial value of the new signal will be the default value of `T`.\n/// \n/// Parameters:\n/// - `signals`: An array of signals to combine.\n///\n/// Returns:\n/// - A new signal that emits the values from all signals in the array.\n///\n/// Example:\n/// ```moonbit\n/// test \"select_one\" {\n///   let values = []\n///   let s1 = new(1)\n///   let s2 = new(2)\n///   let s3 = new(3)\n///   let combined_signal = @reactive.select_one([s1, s2, s3])\n///   combined_signal.subscribe_permanent_only(fn(v) { values.push(v) })\n///   s1.update(4) // This will trigger the subscriber with value 4.\n///   s2.update(5) // This will trigger the subscriber with value 5.\n///   s3.update(6) // This will trigger the subscriber with value 6.\n///   inspect!(values, content=\"[4, 5, 6]\")\n/// }\n/// ```\npub fn[T : Default + Eq] select_one(signals : Array[Signal[T]]) -> Signal[T] {\n  let s = new(T::default())\n  for signal in signals {\n    signal.subscribe_permanent_only(fn(v) { s.update(v) })\n  }\n  s\n}\n\n///| Creates a new signal that emits a tuple of the latest values from both signals.\n/// \n/// Parameters:\n/// - `s1`: The first signal.\n/// - `s2`: The second signal.\n/// \n/// Returns:\n/// - A new signal that emits a tuple of the latest values from `s1` and `s2`.\n///\n/// Example:\n/// ```moonbit\n/// test \"combine_pair\" {\n///   let values = []\n///   let s1 = new(1)\n///   let s2 = new(2)\n///   let s3 = @reactive.combine_pair(s1, s2)\n///   s3.subscribe_permanent(fn(v) { values.push(v) })\n///   s1.update(3) // This will trigger the subscriber with value (3, 2).\n///   s2.update(4) // This will trigger the subscriber with value (3, 4).\n///   s1.update(5) // This will trigger the subscriber with value (5, 4).\n///   inspect!(values, content=\"[(1, 2), (3, 2), (3, 4), (5, 4)]\")\n/// }\n/// ```\npub fn[T : Eq, U : Eq] combine_pair(\n  s1 : Signal[T],\n  s2 : Signal[U]\n) -> Signal[(T, U)] {\n  let s = new((s1.value, s2.value))\n  s1.subscribe_permanent_only(fn(v) { s.update((v, s2.value)) })\n  s2.subscribe_permanent_only(fn(v) { s.update((s1.value, v)) })\n  s\n}\n\n///| Creates a new signal that emits a tuple of the latest values from three signals.\n///\n/// Parameters:\n/// - `s1`: The first signal.\n/// - `s2`: The second signal.\n/// - `s3`: The third signal.\n///\n/// Returns:\n/// - A new signal that emits a tuple of the latest values from `s1`, `s2`, and `s3`.\n///\n/// Example:\n/// ```moonbit\n/// test \"combine_triple\" {\n///   let values = []\n///   let s1 = new(1)\n///   let s2 = new(2)\n///   let s3 = new(3)\n///   let s4 = @reactive.combine_triple(s1, s2, s3)\n///   s4.subscribe_permanent(fn(v) { values.push(v) })\n///   s1.update(4) // This will trigger the subscriber with value (4, 2, 3).\n///   s2.update(5) // This will trigger the subscriber with value (4, 5, 3).\n///   s3.update(6) // This will trigger the subscriber with value (4, 5, 6).\n///   s1.update(7) // This will trigger the subscriber with value (7, 5, 6).\n///   inspect!(values, content=\"[(1, 2, 3), (4, 2, 3), (4, 5, 3), (4, 5, 6), (7, 5, 6)]\")\n/// }\n/// ```\npub fn[T : Eq, U : Eq, V : Eq] combine_triple(\n  s1 : Signal[T],\n  s2 : Signal[U],\n  s3 : Signal[V]\n) -> Signal[(T, U, V)] {\n  let s = new((s1.value, s2.value, s3.value))\n  s1.subscribe_permanent_only(fn(v) { s.update((v, s2.value, s3.value)) })\n  s2.subscribe_permanent_only(fn(v) { s.update((s1.value, v, s3.value)) })\n  s3.subscribe_permanent_only(fn(v) { s.update((s1.value, s2.value, v)) })\n  s\n}\n\n///| Combines all signals in `signals` into a single signal `s`. If any of the signals\n/// change, `s` will emit an array of the latest values from all signals.\n/// \n/// Parameters:\n/// - `signals`: An array of signals to combine.\n/// \n/// Returns:\n/// - A new signal that emits an array of the latest values from all signals.\n/// \n/// Example:\n/// ```moonbit\n/// test \"combine_all\" {\n///   let values = []\n///   let s1 = new(1)\n///   let s2 = new(2)\n///   let s3 = new(3)\n///   let s4 = new(4)\n///   let combined_signal = @reactive.combine_all([s1, s2, s3, s4])\n///   combined_signal.subscribe_permanent(fn(v) { values.push(v) })\n///   s1.update(5) // This will trigger the subscriber with value [5, 2, 3, 4].\n///   s2.update(6) // This will trigger the subscriber with value [5, 6, 3, 4].\n///   s3.update(7) // This will trigger the subscriber with value [5, 6, 7, 4].\n///   s4.update(8) // This will trigger the subscriber with value [5, 6, 7, 8].\n///   inspect!(values, content=\"[[1, 2, 3, 4], [5, 2, 3, 4], [5, 6, 3, 4], [5, 6, 7, 4], [5, 6, 7, 8]]\")\n/// }\n/// ```\npub fn[T : Eq] combine_all(signals : Array[Signal[T]]) -> Signal[Array[T]] {\n  let latest_values = []\n  for signal in signals {\n    latest_values.push(signal.value)\n  }\n  let s = new(latest_values)\n  for signal in signals {\n    signal.subscribe_permanent_only(fn(new_val) {\n      let vals = []\n      for s in signals {\n        if s.id == signal.id {\n          vals.push(new_val)\n        } else {\n          vals.push(s.value)\n        }\n      }\n      s.update(vals)\n    })\n  }\n  s\n}\n\n///|\ntest \"create_signal: get and set basic\" {\n  let s = new(0)\n  assert_eq!(Signal::val(s), 0)\n  Signal::update(s, 5)\n  assert_eq!(Signal::val(s), 5)\n  let s = new(\"hello\")\n  assert_eq!(Signal::val(s), \"hello\")\n  Signal::update(s, \"world\")\n  assert_eq!(Signal::val(s), \"world\")\n}\n\n///|\ntest \"subscribe: basic\" (t : @test.T) {\n  let s = new(0)\n  Signal::update(s, 5)\n  let sub1 = Signal::subscribe(s, fn(v) { t.writeln(\"Sub1 updated to: \\{v}\") })\n  let _ = Signal::subscribe(s, fn(v) { t.writeln(\"Sub2 updated to: \\{v}\") })\n  Signal::unsubscribe(s, sub1)\n  t.writeln(\"\\nUnsubscribed sub1.\\nSignal update to 10.\\n\")\n  Signal::update(s, 10)\n  Signal::update(s, 10)\n  t.snapshot!(filename=\"subscribe_basic\")\n}\n\n///|\ntest \"map: basic\" (t : @test.T) {\n  let s = new(0)\n  let s2 = Signal::map(s, fn(v) { v + 1 })\n  let sub = Signal::subscribe(s2, fn(v) { t.writeln(\"Sub updated to: \\{v}\") })\n  s.update(5)\n  s.update(10)\n  s2.unsubscribe(sub)\n  s.update(20)\n  t.snapshot!(filename=\"map_basic\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\npub impl[A : Show, B : Show] Show for (A, B) with output(self, logger) {\n  let (a, b) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(a)\n  ..write_string(\", \")\n  ..write_object(b)\n  ..write_string(\")\")\n}\n\n///|\npub impl[A : Show, B : Show, C : Show] Show for (A, B, C) with output(\n  self,\n  logger\n) {\n  let (a, b, c) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(a)\n  ..write_string(\", \")\n  ..write_object(b)\n  ..write_string(\", \")\n  ..write_object(c)\n  ..write_string(\")\")\n}\n\n///|\npub impl[A : Show, B : Show, C : Show, D : Show] Show for (A, B, C, D) with output(\n  self,\n  logger\n) {\n  let (a, b, c, d) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(a)\n  ..write_string(\", \")\n  ..write_object(b)\n  ..write_string(\", \")\n  ..write_object(c)\n  ..write_string(\", \")\n  ..write_object(d)\n  ..write_string(\")\")\n}\n\n///|\npub impl[A : Show, B : Show, C : Show, D : Show, E : Show] Show for (\n  A,\n  B,\n  C,\n  D,\n  E,\n) with output(self, logger) {\n  let (a, b, c, d, e) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(a)\n  ..write_string(\", \")\n  ..write_object(b)\n  ..write_string(\", \")\n  ..write_object(c)\n  ..write_string(\", \")\n  ..write_object(d)\n  ..write_string(\", \")\n  ..write_object(e)\n  ..write_string(\")\")\n}\n\n///|\npub impl[A : Show, B : Show, C : Show, D : Show, E : Show, F : Show] Show for (\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n) with output(self, logger) {\n  let (a, b, c, d, e, f) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(a)\n  ..write_string(\", \")\n  ..write_object(b)\n  ..write_string(\", \")\n  ..write_object(c)\n  ..write_string(\", \")\n  ..write_object(d)\n  ..write_string(\", \")\n  ..write_object(e)\n  ..write_string(\", \")\n  ..write_object(f)\n  ..write_string(\")\")\n}\n\n///|\npub impl[A : Show, B : Show, C : Show, D : Show, E : Show, F : Show, G : Show] Show for (\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  G,\n) with output(self, logger) {\n  let (a, b, c, d, e, f, g) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(a)\n  ..write_string(\", \")\n  ..write_object(b)\n  ..write_string(\", \")\n  ..write_object(c)\n  ..write_string(\", \")\n  ..write_object(d)\n  ..write_string(\", \")\n  ..write_object(e)\n  ..write_string(\", \")\n  ..write_object(f)\n  ..write_string(\", \")\n  ..write_object(g)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\", \")\n  ..write_object(x9)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\", \")\n  ..write_object(x9)\n  ..write_string(\", \")\n  ..write_object(x10)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\", \")\n  ..write_object(x9)\n  ..write_string(\", \")\n  ..write_object(x10)\n  ..write_string(\", \")\n  ..write_object(x11)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\", \")\n  ..write_object(x9)\n  ..write_string(\", \")\n  ..write_object(x10)\n  ..write_string(\", \")\n  ..write_object(x11)\n  ..write_string(\", \")\n  ..write_object(x12)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show, T13 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n  T13,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\", \")\n  ..write_object(x9)\n  ..write_string(\", \")\n  ..write_object(x10)\n  ..write_string(\", \")\n  ..write_object(x11)\n  ..write_string(\", \")\n  ..write_object(x12)\n  ..write_string(\", \")\n  ..write_object(x13)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show, T13 : Show, T14 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n  T13,\n  T14,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\", \")\n  ..write_object(x9)\n  ..write_string(\", \")\n  ..write_object(x10)\n  ..write_string(\", \")\n  ..write_object(x11)\n  ..write_string(\", \")\n  ..write_object(x12)\n  ..write_string(\", \")\n  ..write_object(x13)\n  ..write_string(\", \")\n  ..write_object(x14)\n  ..write_string(\")\")\n}\n\n///|\npub impl[T0 : Show, T1 : Show, T2 : Show, T3 : Show, T4 : Show, T5 : Show, T6 : Show, T7 : Show, T8 : Show, T9 : Show, T10 : Show, T11 : Show, T12 : Show, T13 : Show, T14 : Show, T15 : Show] Show for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n  T13,\n  T14,\n  T15,\n) with output(self, logger) {\n  let (x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15) = self\n  logger\n  ..write_string(\"(\")\n  ..write_object(x0)\n  ..write_string(\", \")\n  ..write_object(x1)\n  ..write_string(\", \")\n  ..write_object(x2)\n  ..write_string(\", \")\n  ..write_object(x3)\n  ..write_string(\", \")\n  ..write_object(x4)\n  ..write_string(\", \")\n  ..write_object(x5)\n  ..write_string(\", \")\n  ..write_object(x6)\n  ..write_string(\", \")\n  ..write_object(x7)\n  ..write_string(\", \")\n  ..write_object(x8)\n  ..write_string(\", \")\n  ..write_object(x9)\n  ..write_string(\", \")\n  ..write_object(x10)\n  ..write_string(\", \")\n  ..write_object(x11)\n  ..write_string(\", \")\n  ..write_object(x12)\n  ..write_string(\", \")\n  ..write_object(x13)\n  ..write_string(\", \")\n  ..write_object(x14)\n  ..write_string(\", \")\n  ..write_object(x15)\n  ..write_string(\")\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Creates a new dynamic array from a fixed-size array.\n///\n/// Parameters:\n///\n/// * `arr` : The fixed-size array to convert. The elements of this array will be\n/// copied to the new array.\n///\n/// Returns a new dynamic array containing all elements from the input fixed-size\n/// array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::from_fixed_array\" {\n///   let fixed = FixedArray::make(3, 42)\n///   let dynamic = Array::from_fixed_array(fixed)\n///   inspect(dynamic, content=\"[42, 42, 42]\")\n/// }\n/// ```\npub fn[T] Array::from_fixed_array(arr : FixedArray[T]) -> Array[T] {\n  let len = arr.length()\n  let arr2 = Array::make_uninit(len)\n  UninitializedArray::unsafe_blit_fixed(arr2.buffer(), 0, arr, 0, len)\n  arr2\n}\n\n///|\n/// Creates a new array with a specified length and initializes all elements with\n/// the given value.\n///\n/// Parameters:\n///\n/// * `length` : The length of the array to create. Must be a non-negative\n/// integer.\n/// * `initial_value` : The value used to initialize all elements in the array.\n///\n/// Returns a new array of type `Array[T]` with `length` elements, where each\n/// element is initialized to `initial_value`.\n///\n/// Throws an error if `length` is negative.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::make\" {\n///   let arr = Array::make(3, 42)\n///   inspect(arr, content=\"[42, 42, 42]\")\n/// }\n///\n/// test \"panic Array::make/negative_length\" {\n///   ignore(Array::make(-1, 0))\n/// }\n/// ```\n/// \n/// WARNING: A common pitfall is creating with the same initial value, for example:\n/// ```moonbit\n/// test {\n///   let two_dimension_array = Array::make(10, Array::make(10, 0))\n///   two_dimension_array[0][5] = 10\n///   assert_eq(two_dimension_array[5][5], 10)\n/// }\n/// ```\n/// This is because all the cells reference to the same object (the Array[Int] in this case). \n/// One should use makei() instead which creates an object for each index.\npub fn[T] Array::make(len : Int, elem : T) -> Array[T] {\n  let arr = Array::make_uninit(len)\n  for i in 0..<len {\n    arr.unsafe_set(i, elem)\n  }\n  arr\n}\n\n///|\n/// Returns the total capacity of the array, which is the number of elements that\n/// the array can hold without requiring reallocation of its internal buffer.\n///\n/// Parameters:\n///\n/// * `array` : The array whose capacity is to be determined.\n///\n/// Returns the current capacity of the array as an integer.\n///\n/// NOTE: The capacity of an array may not be consistent across different backends\n/// and/or different versions of the MoonBit compiler/core.\npub fn[T] Array::capacity(self : Array[T]) -> Int {\n  self.buffer()._.length()\n}\n\n///|\n/// Retrieves the element at the specified index from an array without bounds\n/// checking.\n///\n/// Parameters:\n///\n/// * `array` : The array from which to retrieve the element.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::unsafe_get/basic\" {\n///   let arr = [1, 2, 3]\n///   inspect(arr.unsafe_get(1), content=\"2\")\n/// }\n/// ```\n///\n#intrinsic(\"%array.unsafe_get\")\npub fn[T] Array::unsafe_get(self : Array[T], idx : Int) -> T {\n  self.buffer()[idx]\n}\n\n///|\n/// Retrieves an element from the array at the specified index.\n///\n/// Parameters:\n///\n/// * `array` : The array to get the element from.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index.\n///\n/// Throws a panic if the index is negative or greater than or equal to the\n/// length of the array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::op_get\" {\n///   let arr = [1, 2, 3]\n///   inspect(arr[1], content=\"2\")\n/// }\n///\n/// test \"panic Array::op_get/out_of_bounds\" {\n///   let arr = [1, 2, 3]\n///   ignore(arr[3]) // Index out of bounds\n/// }\n/// ```\n///\n#intrinsic(\"%array.get\")\npub fn[T] Array::op_get(self : Array[T], index : Int) -> T {\n  let len = self.length()\n  guard index >= 0 && index < len\n  self.buffer()[index]\n}\n\n///|\n/// Retrieves the element at the specified index from the array.\n///\n/// Parameters:\n///\n/// * `self` : The array to get the element from.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns `Some(element)` if the index is within bounds, or `None` if the index\n/// is out of bounds.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::get\" {\n///   let arr = [1, 2, 3]\n///   inspect(arr.get(-1), content=\"None\")\n///   inspect(arr.get(0), content=\"Some(1)\")\n///   inspect(arr.get(3), content=\"None\")\n/// }\n/// ```\npub fn[T] Array::get(self : Array[T], index : Int) -> T? {\n  let len = self.length()\n  guard index >= 0 && index < len else { None }\n  Some(self.unsafe_get(index))\n}\n\n///|\n#intrinsic(\"%array.unsafe_set\")\nfn[T] Array::unsafe_set(self : Array[T], idx : Int, val : T) -> Unit {\n  self.buffer()[idx] = val\n}\n\n///|\n/// Sets the element at the specified index in the array to a new value. The\n/// original value at that index is overwritten.\n///\n/// Parameters:\n///\n/// * `array` : The array to modify.\n/// * `index` : The position in the array where the value will be set.\n/// * `value` : The new value to assign at the specified index.\n///\n/// Throws an error if `index` is negative or greater than or equal to the length\n/// of the array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::op_set\" {\n///   let arr = [1, 2, 3]\n///   arr[1] = 42\n///   inspect(arr, content=\"[1, 42, 3]\")\n/// }\n///\n/// test \"panic Array::op_set/out_of_bounds\" {\n///   let arr = [1, 2, 3]\n///   arr[3] = 42 // Index out of bounds\n/// }\n/// ```\n///\n#intrinsic(\"%array.set\")\npub fn[T] Array::op_set(self : Array[T], index : Int, value : T) -> Unit {\n  let len = self.length()\n  guard index >= 0 && index < len\n  self.buffer()[index] = value\n}\n\n///|\n/// Compares two arrays for equality. Returns true if both arrays have the same\n/// length and contain equal elements in the same order.\n///\n/// Parameters:\n///\n/// * `self` : The first array to compare.\n/// * `other` : The second array to compare.\n///\n/// Returns true if the arrays are equal, false otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::op_equal\" {\n///   let arr1 = [1, 2, 3]\n///   let arr2 = [1, 2, 3]\n///   let arr3 = [1, 2, 4]\n///   inspect(arr1 == arr2, content=\"true\")\n///   inspect(arr1 == arr3, content=\"false\")\n/// }\n/// ```\npub impl[T : Eq] Eq for Array[T] with op_equal(self, other) {\n  let self_len = self.length()\n  let other_len = other.length()\n  guard self_len == other_len else { return false }\n  for i in 0..<self_len {\n    guard self.unsafe_get(i) == other.unsafe_get(i) else { break false }\n\n  } else {\n    true\n  }\n}\n\n///|\npub impl[T : Hash] Hash for Array[T] with hash_combine(self, hasher) {\n  for v in self {\n    v.hash_combine(hasher)\n  }\n}\n\n///|\n/// Compares two arrays lexicographically.\n///\n/// First compares the lengths of the arrays. If they differ, returns -1 if the\n/// first array is shorter, 1 if it's longer. If the lengths are equal, compares\n/// elements pairwise until a difference is found or all elements have been\n/// compared.\n///\n/// Parameters:\n///\n/// * `self` : The first array to compare.\n/// * `other` : The second array to compare.\n///\n/// Returns an integer that indicates the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::compare\" {\n///   let arr1 = [1, 2, 3]\n///   let arr2 = [1, 2, 4]\n///   let arr3 = [1, 2]\n///   inspect(arr1.compare(arr2), content=\"-1\") // arr1 < arr2\n///   inspect(arr2.compare(arr1), content=\"1\") // arr2 > arr1\n///   inspect(arr1.compare(arr3), content=\"1\") // arr1 > arr3 (longer)\n///   inspect(arr1.compare(arr1), content=\"0\") // arr1 = arr1\n/// }\n/// ```\npub impl[T : Compare] Compare for Array[T] with compare(self, other) {\n  let len_self = self.length()\n  let len_other = other.length()\n  let cmp = len_self.compare(len_other)\n  guard cmp is 0 else { return cmp }\n  for i in 0..<len_self {\n    let cmp = self.unsafe_get(i).compare(other.unsafe_get(i))\n    guard cmp is 0 else { break cmp }\n\n  } else {\n    0\n  }\n}\n\n///|\n/// Concatenates two arrays into a new array. The resulting array contains all\n/// elements from the first array followed by all elements from the second array.\n///\n/// Parameters:\n///\n/// * `self` : The first array to concatenate.\n/// * `other` : The second array to concatenate.\n///\n/// Returns a new array containing all elements from both arrays in order.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::op_add\" {\n///   let a = [1, 2, 3]\n///   let b = [4, 5]\n///   inspect(a + b, content=\"[1, 2, 3, 4, 5]\")\n/// }\n/// ```\npub impl[T] Add for Array[T] with op_add(self, other) {\n  let result = Array::make_uninit(self.length() + other.length())\n  UninitializedArray::unsafe_blit(\n    result.buffer(),\n    0,\n    self.buffer(),\n    0,\n    self.length(),\n  )\n  UninitializedArray::unsafe_blit(\n    result.buffer(),\n    self.length(),\n    other.buffer(),\n    0,\n    other.length(),\n  )\n  result\n}\n\n///|\n/// Appends all elements from one array to the end of another array. The elements\n/// are added in-place, modifying the original array.\n///\n/// Parameters:\n///\n/// * `self` : The array to append to.\n/// * `other` : The array whose elements will be appended.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::append\" {\n///   let v1 = [1, 2, 3]\n///   let v2 = [4, 5, 6]\n///   v1.append(v2)\n///   inspect(v1, content=\"[1, 2, 3, 4, 5, 6]\")\n/// }\n///\n/// test \"Array::append/empty\" {\n///   let v1 = [1, 2, 3]\n///   let v2 : Array[Int] = []\n///   v1.append(v2)\n///   inspect(v1, content=\"[1, 2, 3]\")\n/// }\n/// ```\npub fn[T] Array::append(self : Array[T], other : Array[T]) -> Unit {\n  other.blit_to(\n    self,\n    len=other.length(),\n    src_offset=0,\n    dst_offset=self.length(),\n  )\n}\n\n///|\n/// Iterates through each element of the array in order, applying the given\n/// function to each element.\n///\n/// Parameters:\n///\n/// * `array` : The array to iterate over.\n/// * `function` : A function that takes a single element of type `T` as input\n/// and returns `Unit`. This function is applied to each element of the array in\n/// order.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::each\" {\n///   let arr = [1, 2, 3]\n///   let mut sum = 0\n///   arr.each(fn(x) { sum = sum + x })\n///   inspect(sum, content=\"6\")\n/// }\n/// ```\n#locals(f)\npub fn[T] Array::each(self : Array[T], f : (T) -> Unit) -> Unit {\n  for v in self {\n    f(v)\n  }\n}\n\n///|\n/// Iterates over the elements of the array in reverse order, applying the given\n/// function to each element.\n///\n/// Parameters:\n///\n/// * `array` : The array to iterate over.\n/// * `f` : A function that takes an element of type `T` and returns `Unit`. This\n/// function is applied to each element of the array in reverse order.\n///\n/// Example:\n///\n/// ```\n/// let v = [3, 4, 5]\n/// let mut sum = 0\n/// v.rev_each(fn(x) { sum = sum - x })\n/// @json.inspect(sum, content=-12)\n/// ```\n#locals(f)\npub fn[T] Array::rev_each(self : Array[T], f : (T) -> Unit) -> Unit {\n  let len = self.length()\n  for i in 0..<len {\n    f(self[len - i - 1])\n  }\n}\n\n///|\n/// Iterates over the elements of the array with index in reversed order.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let mut sum = 0\n/// v.rev_eachi(fn(i, x) { sum = sum + x + i })\n/// assert_eq(sum, 15)\n/// ```\n#locals(f)\npub fn[T] Array::rev_eachi(self : Array[T], f : (Int, T) -> Unit) -> Unit {\n  let len = self.length()\n  for i in 0..<len {\n    f(i, self[len - i - 1])\n  }\n}\n\n///|\n/// Iterates over the elements of the array with index.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let mut sum = 0\n/// v.eachi(fn (i, x) {sum = sum + x + i})\n/// ```\n#locals(f)\npub fn[T] Array::eachi(self : Array[T], f : (Int, T) -> Unit) -> Unit {\n  for i, v in self {\n    f(i, v)\n  }\n}\n\n///|\n/// Clears the array, removing all values.\n///\n/// This method has no effect on the allocated capacity of the array, only setting the length to 0.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// v.clear()\n/// assert_eq(v.length(), 0)\n/// ```\npub fn[T] Array::clear(self : Array[T]) -> Unit {\n  self.unsafe_truncate_to_length(0)\n}\n\n///|\n/// Maps a function over the elements of the array.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let v2 = v.map(fn (x) {x + 1})\n/// assert_eq(v2, [4, 5, 6])\n/// ```\n#locals(f)\npub fn[T, U] Array::map(self : Array[T], f : (T) -> U) -> Array[U] {\n  let arr = Array::make_uninit(self.length())\n  for i, v in self {\n    arr.unsafe_set(i, f(v))\n  }\n  arr\n}\n\n///|\n/// Maps a function over the elements of the array in place.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// v.map_inplace(fn (x) {x + 1})\n/// assert_eq(v, [4, 5, 6])\n/// ```\n#locals(f)\npub fn[T] Array::map_inplace(self : Array[T], f : (T) -> T) -> Unit {\n  for i, v in self {\n    self[i] = f(v)\n  }\n}\n\n///|\n/// Maps a function over the elements of the array with index.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let v2 = v.mapi(fn (i, x) {x + i})\n/// assert_eq(v2, [3, 5, 7])\n/// ```\n#locals(f)\npub fn[T, U] Array::mapi(self : Array[T], f : (Int, T) -> U) -> Array[U] {\n  if self.length() == 0 {\n    return []\n  }\n  let arr = Array::make_uninit(self.length())\n  for i, v in self {\n    arr.unsafe_set(i, f(i, v))\n  }\n  arr\n}\n\n///|\n/// Maps a function over the elements of the array with index in place.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// v.mapi_inplace(fn (i, x) {x + i})\n/// assert_eq(v, [3, 5, 7])\n/// ```\n#locals(f)\npub fn[T] Array::mapi_inplace(self : Array[T], f : (Int, T) -> T) -> Unit {\n  for i, v in self {\n    self[i] = f(i, v)\n  }\n}\n\n///|\n/// Creates a new array containing all elements from the input array that satisfy\n/// the given predicate function.\n///\n/// Parameters:\n///\n/// * `array` : The array to filter.\n/// * `predicate` : A function that takes an element and returns a boolean\n/// indicating whether the element should be included in the result.\n///\n/// Returns a new array containing only the elements for which the predicate\n/// function returns `true`. The relative order of the elements is preserved.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::filter\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   let evens = arr.filter(fn(x) { x % 2 == 0 })\n///   inspect(evens, content=\"[2, 4]\")\n/// }\n/// ```\n#locals(f)\npub fn[T] Array::filter(self : Array[T], f : (T) -> Bool) -> Array[T] {\n  let arr = []\n  for v in self {\n    if f(v) {\n      arr.push(v)\n    }\n  }\n  arr\n}\n\n///|\n/// Tests whether the array contains no elements.\n///\n/// Parameters:\n///\n/// * `array` : The array to check.\n///\n/// Returns `true` if the array has no elements, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::is_empty\" {\n///   let empty : Array[Int] = []\n///   inspect(empty.is_empty(), content=\"true\")\n///   let non_empty = [1, 2, 3]\n///   inspect(non_empty.is_empty(), content=\"false\")\n/// }\n/// ```\npub fn[T] Array::is_empty(self : Array[T]) -> Bool {\n  self.length() == 0\n}\n\n///|\n/// Tests whether the array is sorted in ascending order.\n///\n/// Parameters:\n///\n/// * `self` : The array to be tested.\n/// * `T` : The type of elements in the array. Must implement the `Compare`\n/// trait.\n///\n/// Returns a boolean value indicating whether the array is sorted in ascending\n/// order:\n///\n/// * `true` if the array is empty, contains only one element, or all elements\n/// are in ascending order.\n/// * `false` if any element is greater than the element that follows it.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::is_sorted/basic\" {\n///   let ascending = [1, 2, 3, 4, 5]\n///   let descending = [5, 4, 3, 2, 1]\n///   let unsorted = [1, 3, 2, 4, 5]\n///   inspect(ascending.is_sorted(), content=\"true\")\n///   inspect(descending.is_sorted(), content=\"false\")\n///   inspect(unsorted.is_sorted(), content=\"false\")\n/// }\n/// ```\npub fn[T : Compare] Array::is_sorted(self : Array[T]) -> Bool {\n  for i = 1 {\n    if i >= self.length() {\n      break true\n    }\n    if self[i - 1] > self[i] {\n      break false\n    }\n    continue i + 1\n  }\n}\n\n///|\n/// Reverses the order of elements in an array in place, modifying the original\n/// array.\n///\n/// Parameters:\n///\n/// * `self` : The array to be reversed.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::rev_inplace\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   arr.rev_inplace()\n///   inspect(arr, content=\"[5, 4, 3, 2, 1]\")\n/// }\n///\n/// test \"Array::rev_inplace/empty\" {\n///   let arr : Array[Int] = []\n///   arr.rev_inplace()\n///   inspect(arr, content=\"[]\")\n/// }\n/// ```\npub fn[T] Array::rev_inplace(self : Array[T]) -> Unit {\n  for i in 0..<(self.length() / 2) {\n    let temp = self.unsafe_get(i)\n    self.unsafe_set(i, self.unsafe_get(self.length() - i - 1))\n    self.unsafe_set(self.length() - i - 1, temp)\n  }\n}\n\n///|\n/// Creates a new array with elements in reversed order.\n///\n/// Parameters:\n///\n/// * `self` : The array to be reversed.\n///\n/// Returns a new array containing the same elements as the input array but in\n/// reverse order. The original array remains unchanged.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::rev\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.rev(), content=\"[5, 4, 3, 2, 1]\")\n///   inspect(arr, content=\"[1, 2, 3, 4, 5]\") // original array unchanged\n/// }\n/// ```\npub fn[T] Array::rev(self : Array[T]) -> Array[T] {\n  let arr = Array::make_uninit(self.length())\n  for i in 0..<self.length() {\n    arr.unsafe_set(i, self.unsafe_get(self.length() - i - 1))\n  }\n  arr\n}\n\n///|\n/// Split the array into two at the given index.\n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let (v1, v2) = v.split_at(1)\n/// assert_eq(v1, [3])\n/// assert_eq(v2, [4, 5])\n/// ```\n/// TODO: perf could be optimized\npub fn[T] Array::split_at(self : Array[T], index : Int) -> (Array[T], Array[T]) {\n  if index < 0 || index > self.length() {\n    let len = self.length()\n    abort(\n      \"index out of bounds: the len is from 0 to \\{len} but the index is \\{index}\",\n    )\n  }\n  let v1 = Array::make_uninit(index)\n  let v2 = Array::make_uninit(self.length() - index)\n  UninitializedArray::unsafe_blit(v1.buffer(), 0, self.buffer(), 0, index)\n  if index != self.length() {\n    UninitializedArray::unsafe_blit(\n      v2.buffer(),\n      0,\n      self.buffer(),\n      index,\n      self.length() - index,\n    )\n  }\n  (v1, v2)\n}\n\n///|\n/// Checks whether the array contains an element equal to the given value.\n///\n/// Parameters:\n///\n/// * `array` : The array to search in.\n/// * `value` : The value to search for.\n///\n/// Returns `true` if the array contains an element equal to the given value,\n/// `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::contains\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.contains(3), content=\"true\")\n///   inspect(arr.contains(6), content=\"false\")\n/// }\n///\n/// test \"Array::contains/empty\" {\n///   let arr : Array[Int] = []\n///   inspect(arr.contains(1), content=\"false\")\n/// }\n/// ```\npub fn[T : Eq] Array::contains(self : Array[T], value : T) -> Bool {\n  for v in self {\n    if v == value {\n      break true\n    }\n  } else {\n    false\n  }\n}\n\n///|\n/// Checks if the array begins with all elements of the provided prefix array in\n/// order.\n///\n/// Parameters:\n///\n/// * `self` : The array to check against.\n/// * `prefix` : The array containing the sequence of elements to look for at the\n/// beginning.\n///\n/// Returns `true` if the array starts with all elements in `prefix` in the same\n/// order, `false` otherwise. An empty prefix array always returns `true`, and a\n/// prefix longer than the array always returns `false`.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::starts_with\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.starts_with([1, 2]), content=\"true\")\n///   inspect(arr.starts_with([2, 3]), content=\"false\")\n///   inspect(arr.starts_with([]), content=\"true\")\n///   inspect(arr.starts_with([1, 2, 3, 4, 5, 6]), content=\"false\")\n/// }\n/// ```\npub fn[T : Eq] Array::starts_with(self : Array[T], prefix : Array[T]) -> Bool {\n  if prefix.length() > self.length() {\n    return false\n  }\n  for i in 0..<prefix.length() {\n    if self.unsafe_get(i) != prefix.unsafe_get(i) {\n      break false\n    }\n  } else {\n    true\n  }\n}\n\n///|\n/// Tests if an array ends with the given suffix.\n///\n/// Parameters:\n///\n/// * `self` : The array to check.\n/// * `suffix` : The array to test against.\n///\n/// Returns `true` if the array ends with the given suffix, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::ends_with/basic\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.ends_with([4, 5]), content=\"true\")\n///   inspect(arr.ends_with([3, 4]), content=\"false\")\n///   inspect(arr.ends_with([]), content=\"true\")\n/// }\n///\n/// test \"Array::ends_with/empty\" {\n///   let arr : Array[Int] = []\n///   inspect(arr.ends_with([]), content=\"true\")\n///   inspect(arr.ends_with([1]), content=\"false\")\n/// }\n/// ```\npub fn[T : Eq] Array::ends_with(self : Array[T], suffix : Array[T]) -> Bool {\n  if suffix.length() > self.length() {\n    return false\n  }\n  for i in 0..<suffix.length() {\n    if self.unsafe_get(self.length() - suffix.length() + i) !=\n      suffix.unsafe_get(i) {\n      break false\n    }\n  } else {\n    true\n  }\n}\n\n///|\n/// Removes a prefix from an array if it exists.\n///\n/// Parameters:\n///\n/// * `array` : The array to remove the prefix from.\n/// * `prefix` : The array to be removed from the beginning of `array`.\n///\n/// Returns `Some(array)` containing the remaining elements after removing the\n/// prefix if the array starts with the prefix, or `None` if the array doesn't\n/// start with the prefix.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"strip_prefix\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.strip_prefix([1, 2]), content=\"Some([3, 4, 5])\")\n///   inspect(arr.strip_prefix([2, 3]), content=\"None\")\n/// }\n/// ```\npub fn[T : Eq] Array::strip_prefix(\n  self : Array[T],\n  prefix : Array[T]\n) -> Array[T]? {\n  if self.starts_with(prefix) {\n    let v = Array::make_uninit(self.length() - prefix.length())\n    UninitializedArray::unsafe_blit(\n      v.buffer(),\n      0,\n      self.buffer(),\n      prefix.length(),\n      self.length() - prefix.length(),\n    )\n    Some(v)\n  } else {\n    None\n  }\n}\n\n///|\n/// Strip a suffix from the array.\n///\n/// If the array ends with the suffix, return the array before the suffix, otherwise return None.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let v2 = v.strip_suffix([5])\n/// assert_eq(v2, Some([3, 4]))\n/// ```\npub fn[T : Eq] Array::strip_suffix(\n  self : Array[T],\n  suffix : Array[T]\n) -> Array[T]? {\n  if self.ends_with(suffix) {\n    let v = Array::make_uninit(self.length() - suffix.length())\n    let len = self.length() - suffix.length()\n    UninitializedArray::unsafe_blit(v.buffer(), 0, self.buffer(), 0, len)\n    Some(v)\n  } else {\n    None\n  }\n}\n\n///|\n/// Searches for the first occurrence of a value in the array and returns its\n/// index.\n///\n/// Parameters:\n///\n/// * `self` : The array to search in.\n/// * `value` : The value to search for.\n///\n/// Returns an `Option` containing the index of the first occurrence of `value`\n/// if found, or `None` if the value is not present in the array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::search\" {\n///   let arr = [1, 2, 3, 2, 4]\n///   inspect(arr.search(2), content=\"Some(1)\") // first occurrence\n///   inspect(arr.search(5), content=\"None\") // not found\n/// }\n/// ```\npub fn[T : Eq] Array::search(self : Array[T], value : T) -> Int? {\n  for i, v in self {\n    if v == value {\n      break Some(i)\n    }\n  } else {\n    None\n  }\n}\n\n///|\n/// Searches the array for the first element that satisfies the predicate\n/// function.\n///\n/// Parameters:\n///\n/// * `array` : The array to search in.\n/// * `predicate` : A function that takes an element and returns a boolean\n/// indicating whether the element satisfies the search condition.\n///\n/// Returns the index of the first element that satisfies the predicate, or\n/// `None` if no such element is found.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"find_index\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   inspect(arr.search_by(fn(x) { x > 3 }), content=\"Some(3)\")\n///   inspect(arr.search_by(fn(x) { x > 10 }), content=\"None\")\n/// }\n/// ```\n///\n#deprecated(\"Use `search_by` instead.\")\n#coverage.skip\npub fn[T] Array::find_index(self : Array[T], f : (T) -> Bool) -> Int? {\n  self.search_by(f)\n}\n\n///|\n/// Search the index of the first element that satisfies the predicate.\n///\n/// # Example\n///\n/// ```\n/// let v = [1, 2, 3, 4, 5]\n/// match v.search_by(fn(x) { x == 3 }) {\n///   Some(index) => assert_eq(index, 2) // 2\n///   None => println(\"Not found\")\n/// }\n/// ```\n#locals(f)\npub fn[T] Array::search_by(self : Array[T], f : (T) -> Bool) -> Int? {\n  for i, v in self {\n    if f(v) {\n      break Some(i)\n    }\n  } else {\n    None\n  }\n}\n\n///|\n/// Performs a binary search on a sorted array to find the index of a given element.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let result = v.binary_search(3)\n/// assert_eq(result, Ok(0)) // The element 3 is found at index 0\n/// ```\n///\n/// # Arguments\n/// - `self`: The array in which to perform the search.\n/// - `value`: The element to search for in the array.\n///\n/// # Returns\n/// - `Result[Int, Int]`:\n/// If the element is found, an `Ok` variant is returned, containing the index of the matching element in the array.\n/// If there are multiple matches, the leftmost match will be returned.\n/// If the element is not found, an `Err` variant is returned, containing the index where the element could be inserted to maintain the sorted order.\n///\n/// # Notes\n/// - Ensure that the array is sorted in increasing order before calling this function.\n/// - If the array is not sorted, the returned result is undefined and should not be relied on.\npub fn[T : Compare] Array::binary_search(\n  self : Array[T],\n  value : T\n) -> Result[Int, Int] {\n  let len = self.length()\n  for i = 0, j = len; i < j; {\n    let h = i + (j - i) / 2\n    // Note even if self[h] == value, we still continue the search\n    // because we want to find the leftmost match\n    if self.unsafe_get(h) < value {\n      continue h + 1, j\n    } else {\n      continue i, h\n    }\n  } else {\n    if i < len && self.unsafe_get(i) == value {\n      Ok(i)\n    } else {\n      Err(i)\n    }\n  }\n}\n\n///|\n/// Performs a binary search on a sorted array using a custom comparison\n/// function. Returns the position of the matching element if found, or the\n/// position where the element could be inserted while maintaining the sorted\n/// order.\n///\n/// Parameters:\n///\n/// * `array` : The sorted array to search in.\n/// * `comparator` : A function that compares each element with the target value,\n/// returning:\n///  * A negative integer if the element is less than the target\n///  * Zero if the element equals the target\n///  * A positive integer if the element is greater than the target\n///\n/// Returns a `Result` containing either:\n///\n/// * `Ok(index)` if a matching element is found at position `index`\n/// * `Err(index)` if no match is found, where `index` is the position where the\n/// element could be inserted\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"binary_search_by\" {\n///   let arr = [1, 3, 5, 7, 9]\n///   let find_3 = arr.binary_search_by(fn(x) {\n///     if x < 3 {\n///       -1\n///     } else if x > 3 {\n///       1\n///     } else {\n///       0\n///     }\n///   })\n///   inspect(find_3, content=\"Ok(1)\")\n///   let find_4 = arr.binary_search_by(fn(x) {\n///     if x < 4 {\n///       -1\n///     } else if x > 4 {\n///       1\n///     } else {\n///       0\n///     }\n///   })\n///   inspect(find_4, content=\"Err(2)\")\n/// }\n/// ```\n///\n/// Notes:\n///\n/// * Assumes the array is sorted according to the ordering implied by the\n/// comparison function\n/// * For multiple matches, returns the leftmost matching position\n/// * Returns an insertion point that maintains the sort order when no match is\n/// found\n#locals(cmp)\npub fn[T] Array::binary_search_by(\n  self : Array[T],\n  cmp : (T) -> Int\n) -> Result[Int, Int] {\n  let len = self.length()\n  for i = 0, j = len; i < j; {\n    let h = i + (j - i) / 2\n    // Note even if self[h] == value, we still continue the search\n    // because we want to find the leftmost match\n    if cmp(self.unsafe_get(h)) < 0 {\n      continue h + 1, j\n    } else {\n      continue i, h\n    }\n  } else {\n    if i < len && cmp(self.unsafe_get(i)) == 0 {\n      Ok(i)\n    } else {\n      Err(i)\n    }\n  }\n}\n\n///|\n/// Swaps the values at two positions in the array.\n///\n/// Parameters:\n///\n/// * `array` : The array in which to swap elements.\n/// * `index1` : The index of the first element to be swapped.\n/// * `index2` : The index of the second element to be swapped.\n///\n/// This function will panic if either index is negative or greater than or equal to\n/// the length of the array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::swap\" {\n///   let arr = [1, 2, 3]\n///   arr.swap(0, 2)\n///   inspect(arr, content=\"[3, 2, 1]\")\n/// }\n///\n/// test \"panic Array::swap/out_of_bounds\" {\n///   let arr = [1, 2, 3]\n///   ignore(arr.swap(0, 3)) // Index out of bounds\n/// }\n/// ```\npub fn[T] Array::swap(self : Array[T], i : Int, j : Int) -> Unit {\n  if i >= self.length() || j >= self.length() || i < 0 || j < 0 {\n    let len = self.length()\n    abort(\n      \"index out of bounds: the len is from 0 to \\{len} but the index is (\\{i}, \\{j})\",\n    )\n  }\n  let temp = self.unsafe_get(i)\n  self.unsafe_set(i, self.unsafe_get(j))\n  self.unsafe_set(j, temp)\n}\n\n///|\n/// Removes all elements from the array that do not satisfy the predicate\n/// function, modifying the array in place. The order of remaining elements is\n/// preserved.\n///\n/// Parameters:\n///\n/// * `array` : The array to be filtered.\n/// * `predicate` : A function that takes an element and returns `true` if the\n/// element should be kept, `false` if it should be removed.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"retain\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   arr.retain(fn(x) { x % 2 == 0 })\n///   inspect(arr, content=\"[2, 4]\")\n/// }\n///\n/// test \"retain/empty_result\" {\n///   let arr = [1, 2, 3]\n///   arr.retain(fn(x) { x > 10 })\n///   inspect(arr, content=\"[]\")\n/// }\n///\n/// test \"retain/keep_all\" {\n///   let arr = [1, 2, 3]\n///   arr.retain(fn { _ => true })\n///   inspect(arr, content=\"[1, 2, 3]\")\n/// }\n/// ```\n/// TODO: perf could be improved\n#locals(f)\npub fn[T] Array::retain(self : Array[T], f : (T) -> Bool) -> Unit {\n  for i = 0, j = 0; i < self.length(); {\n    if f(self.unsafe_get(i)) {\n      self.unsafe_set(j, self.unsafe_get(i))\n      continue i + 1, j + 1\n    }\n    continue i + 1, j\n  } else {\n    // we use `else` here to capture `j`\n    self.unsafe_truncate_to_length(j)\n  }\n}\n\n///|\n/// Resizes an array to a specified length, either by truncating if the new\n/// length is smaller, or by appending copies of a default value if the new\n/// length is larger.\n///\n/// Parameters:\n///\n/// * `array` : The array to be resized.\n/// * `new_length` : The desired length of the array after resizing.\n/// * `default_value` : The value to append when extending the array.\n///\n/// Throws a panic if `new_length` is negative.\n///\n/// Examples:\n///\n/// ```moonbit\n/// test \"Array::resize/shrink\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   arr.resize(3, 0)\n///   inspect(arr, content=\"[1, 2, 3]\")\n/// }\n///\n/// test \"Array::resize/extend\" {\n///   let arr = [1, 2, 3]\n///   arr.resize(5, 0)\n///   inspect(arr, content=\"[1, 2, 3, 0, 0]\")\n/// }\n///\n/// test \"panic Array::resize/negative_length\" {\n///   let arr = [1, 2, 3]\n///   ignore(arr.resize(-1, 0))\n/// }\n/// ```\n///\npub fn[T] Array::resize(self : Array[T], new_len : Int, f : T) -> Unit {\n  if new_len < 0 {\n    abort(\"negative new length\")\n  }\n  if new_len < self.length() {\n    self.unsafe_truncate_to_length(new_len)\n  } else {\n    for i = self.length(); i < new_len; i = i + 1 {\n      self.push(f)\n    }\n  }\n}\n\n///|\n/// Flattens a array of arrays into a array.\n///\n/// Example:\n///\n/// ```moonbit\n/// let v = [[3, 4], [5, 6]].flatten()\n/// assert_eq(v, [3, 4, 5, 6])\n/// ```\npub fn[T] Array::flatten(self : Array[Array[T]]) -> Array[T] {\n  let mut len = 0\n  for x in self {\n    len += x.length()\n  }\n  let res = Array::make_uninit(len)\n  let mut i = 0\n  for xs in self {\n    res.unsafe_blit(i, xs, 0, xs.length())\n    i += xs.length()\n  }\n  res\n}\n\n///|\n/// Create a array by repeat a given array for a given times.\n///\n/// Example:\n///\n/// ```moonbit\n/// let v = [3, 4].repeat(2)\n/// assert_eq(v, [3, 4, 3, 4])\n/// ```\npub fn[T] Array::repeat(self : Array[T], times : Int) -> Array[T] {\n  let v = Array::new(capacity=self.length() * times)\n  for i in 0..<times {\n    v.append(self)\n  }\n  v\n}\n\n///|\n/// Fold out values from an array according to certain rules.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].fold(init=0, fn { sum, elem => sum + elem })\n/// assert_eq(sum, 15)\n/// ```\n#locals(f)\npub fn[A, B] Array::fold(self : Array[A], init~ : B, f : (B, A) -> B) -> B {\n  for i = 0, acc = init; i < self.length(); {\n    continue i + 1, f(acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].rev_fold(init=0, fn { sum, elem => sum + elem })\n/// assert_eq(sum, 15)\n/// ```\n#locals(f)\npub fn[A, B] Array::rev_fold(self : Array[A], init~ : B, f : (B, A) -> B) -> B {\n  for i = self.length() - 1, acc = init; i >= 0; {\n    continue i - 1, f(acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Fold out values from an array according to certain rules with index.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].foldi(init=0, fn { index, sum, _elem => sum + index })\n/// assert_eq(sum, 10)\n/// ```\n#locals(f)\npub fn[A, B] Array::foldi(\n  self : Array[A],\n  init~ : B,\n  f : (Int, B, A) -> B\n) -> B {\n  for i = 0, acc = init; i < self.length(); {\n    continue i + 1, f(i, acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn with index.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].rev_foldi(init=0, fn { index, sum, _elem => sum + index })\n/// assert_eq(sum, 10)\n/// ```\n#locals(f)\npub fn[A, B] Array::rev_foldi(\n  self : Array[A],\n  init~ : B,\n  f : (Int, B, A) -> B\n) -> B {\n  let len = self.length()\n  for i = len - 1, acc = init; i >= 0; {\n    continue i - 1, f(len - i - 1, acc, self[i])\n  } else {\n    acc\n  }\n}\n\n///|\n/// Fold out values from an array according to certain rules.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].fold(init=0, fn { sum, elem => sum + elem })\n/// assert_eq(sum, 15)\n/// ```\n#deprecated(\"Use `fold` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_left(self : Array[T], f : (U, T) -> U, init~ : U) -> U {\n  self.fold(init~, f)\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].rev_fold(init=0, fn { sum, elem => sum + elem })\n/// assert_eq(sum, 15)\n/// ```\n#deprecated(\"Use `rev_fold` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_right(\n  self : Array[T],\n  f : (U, T) -> U,\n  init~ : U\n) -> U {\n  self.rev_fold(init~, f)\n}\n\n///|\n/// Fold out values from an array according to certain rules with index.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].foldi(init=0, fn { index, sum, _elem => sum + index })\n/// assert_eq(sum, 10)\n/// ```\n#deprecated(\"Use `foldi` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_lefti(\n  self : Array[T],\n  f : (Int, U, T) -> U,\n  init~ : U\n) -> U {\n  self.foldi(init~, f)\n}\n\n///|\n/// Fold out values from an array according to certain rules in reversed turn with index.\n///\n/// Example:\n///\n/// ```moonbit\n/// let sum = [1, 2, 3, 4, 5].rev_foldi(init=0, fn { index, sum, _elem => sum + index })\n/// assert_eq(sum, 10)\n/// ```\n#deprecated(\"Use `rev_foldi` instead.\")\n#coverage.skip\npub fn[T, U] Array::fold_righti(\n  self : Array[T],\n  f : (Int, U, T) -> U,\n  init~ : U\n) -> U {\n  self.rev_foldi(init~, f)\n}\n\n///|\n/// Removes consecutive duplicate elements from an array in-place, using equality\n/// comparison. The first occurrence of each element is retained while subsequent\n/// equal elements are removed.\n///\n/// Parameters:\n///\n/// * `array` : The array to remove duplicates from. Must contain elements that\n/// implement the `Eq` trait for equality comparison.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"dedup\" {\n///   let arr = [1, 2, 2, 3, 3, 3, 2]\n///   arr.dedup()\n///   inspect(arr, content=\"[1, 2, 3, 2]\")\n/// }\n///\n/// test \"dedup/sorted\" {\n///   let arr = [1, 2, 2, 2, 3, 3]\n///   arr.dedup()\n///   inspect(arr, content=\"[1, 2, 3]\")\n/// }\n///\n/// test \"dedup/empty\" {\n///   let arr : Array[Int] = []\n///   arr.dedup()\n///   inspect(arr, content=\"[]\")\n/// }\n/// ```\n///\n/// Note: For best results when removing all duplicates regardless of position,\n/// sort the array before calling this function. When used on an unsorted array,\n/// this function only removes consecutive duplicates.\npub fn[T : Eq] Array::dedup(self : Array[T]) -> Unit {\n  if self.is_empty() {\n    return\n  }\n  let mut w = 1\n  for i in 1..<self.length() {\n    if self[i] != self[w - 1] {\n      self[w] = self[i]\n      w = w + 1\n    }\n  }\n  self.unsafe_truncate_to_length(w)\n}\n\n///|\n/// Extracts elements from an array that satisfy a given predicate function. The\n/// extracted elements are removed from the original array and returned as a new\n/// array. The relative order of the extracted elements is preserved.\n///\n/// Parameters:\n///\n/// * `array` : The array to extract elements from.\n/// * `predicate` : A function that takes an element and returns `true` if the\n/// element should be extracted, `false` otherwise.\n///\n/// Returns a new array containing all elements that satisfy the predicate\n/// function, in the order they appeared in the original array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"extract_if\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   let extracted = arr.extract_if(fn(x) { x % 2 == 0 })\n///   inspect(extracted, content=\"[2, 4]\")\n///   inspect(arr, content=\"[1, 3, 5]\")\n/// }\n/// ```\n#locals(f)\npub fn[T] Array::extract_if(self : Array[T], f : (T) -> Bool) -> Array[T] {\n  let v = []\n  let indices = []\n  for i in 0..<self.length() {\n    if f(self[i]) {\n      v.push(self[i])\n      indices.push(i)\n    }\n  }\n  for i in 0..<indices.length() {\n    self.remove(indices[i] - i) |> ignore\n  }\n  v\n}\n\n///|\n/// Divides an array into smaller arrays (chunks) of the specified size.\n///\n/// Parameters:\n///\n/// * `array` : The array to be divided into chunks.\n/// * `size` : The size of each chunk. Must be a positive integer.\n///\n/// Returns an array of arrays, where each inner array is a chunk containing\n/// elements from the original array. If the length of the original array is not\n/// divisible by the chunk size, the last chunk will contain fewer elements.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"chunks\" {\n///   let arr = [1, 2, 3, 4, 5]\n///   let chunks = arr.chunks(2)\n///   inspect(chunks, content=\"[[1, 2], [3, 4], [5]]\")\n/// }\n///\n/// test \"chunks/empty\" {\n///   let arr : Array[Int] = []\n///   inspect(arr.chunks(3), content=\"[]\")\n/// }\n/// ```\npub fn[T] Array::chunks(self : Array[T], size : Int) -> Array[Array[T]] {\n  let chunks = []\n  let mut i = 0\n  while i < self.length() {\n    let chunk = Array::new(capacity=size)\n    for j = 0; j < size && i < self.length(); j = j + 1 {\n      chunk.push(self[i])\n      i = i + 1\n    }\n    chunks.push(chunk)\n  }\n  chunks\n}\n\n///|\n/// Groups consecutive elements of the array into chunks where adjacent elements\n/// satisfy the given predicate function.\n///\n/// Parameters:\n///\n/// * `array` : The array to be chunked.\n/// * `predicate` : A function that takes two adjacent elements and returns\n/// `true` if they should be in the same chunk, `false` otherwise.\n///\n/// Returns an array of arrays, where each inner array is a chunk of consecutive\n/// elements that satisfy the predicate with their adjacent elements.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"chunk_by\" {\n///   let v = [1, 1, 2, 3, 2, 3, 2, 3, 4]\n///   let chunks = v.chunk_by(fn(x, y) { x <= y })\n///   inspect(chunks, content=\"[[1, 1, 2, 3], [2, 3], [2, 3, 4]]\")\n/// }\n///\n/// test \"chunk_by/empty\" {\n///   let v : Array[Int] = []\n///   inspect(v.chunk_by(fn(x, y) { x <= y }), content=\"[]\")\n/// }\n/// ```\n#locals(pred)\npub fn[T] Array::chunk_by(\n  self : Array[T],\n  pred : (T, T) -> Bool\n) -> Array[Array[T]] {\n  let chunks = []\n  let mut i = 0\n  while i < self.length() {\n    let chunk = []\n    chunk.push(self[i])\n    i = i + 1\n    while i < self.length() && pred(self[i - 1], self[i]) {\n      chunk.push(self[i])\n      i = i + 1\n    }\n    chunks.push(chunk)\n  }\n  chunks\n}\n\n///|\n/// Splits an array into chunks using a predicate function. Creates chunks by\n/// grouping consecutive elements that do not satisfy the predicate function.\n/// Elements that satisfy the predicate function are excluded from the resulting\n/// chunks and act as delimiters.\n///\n/// Parameters:\n///\n/// * `array` : The array to be split into chunks.\n/// * `predicate` : A function that takes an element and returns `true` if the\n/// element should be used as a delimiter.\n///\n/// Returns an array of arrays, where each inner array is a chunk of consecutive\n/// elements that do not satisfy the predicate.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"split/basic\" {\n///   let arr = [1, 0, 2, 0, 3, 0, 4]\n///   inspect(arr.split(fn(x) { x == 0 }), content=\"[[1], [2], [3], [4]]\")\n/// }\n///\n/// test \"split/empty_chunks\" {\n///   let arr = [0, 1, 0, 0, 2, 0]\n///   inspect(arr.split(fn(x) { x == 0 }), content=\"[[], [1], [], [2]]\")\n/// }\n/// ```\n#locals(pred)\npub fn[T] Array::split(self : Array[T], pred : (T) -> Bool) -> Array[Array[T]] {\n  let chunks = []\n  let mut i = 0\n  while i < self.length() {\n    let chunk = []\n    while i < self.length() && not(pred(self[i])) {\n      chunk.push(self[i])\n      i = i + 1\n    }\n    chunks.push(chunk)\n    i = i + 1\n  }\n  chunks\n}\n\n///|\n/// Creates an iterator over the elements of the array.\n///\n/// Parameters:\n///\n/// * `array` : The array to create an iterator from.\n///\n/// Returns an iterator that yields each element of the array in order.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::iter\" {\n///   let arr = [1, 2, 3]\n///   let mut sum = 0\n///   arr.iter().each(fn(x) { sum = sum + x })\n///   inspect(sum, content=\"6\")\n/// }\n/// ```\npub fn[T] Array::iter(self : Array[T]) -> Iter[T] {\n  Iter::new(fn(yield_) {\n    for v in self {\n      guard yield_(v) is IterContinue else { break IterEnd }\n\n    } else {\n      IterContinue\n    }\n  })\n}\n\n///|\n/// Returns an iterator that yields elements from the array in reverse order,\n/// from the last element to the first.\n///\n/// Parameters:\n///\n/// * `array` : The array to iterate over in reverse order.\n///\n/// Returns an iterator that yields each element of the array, starting from the\n/// last element and moving towards the first.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::rev_iter\" {\n///   let arr = [1, 2, 3]\n///   let result = []\n///   arr.rev_iter().each(fn(x) { result.push(x) })\n///   inspect(result, content=\"[3, 2, 1]\")\n/// }\n/// ```\npub fn[T] Array::rev_iter(self : Array[T]) -> Iter[T] {\n  Iter::new(fn(yield_) {\n    for i = self.length() - 1; i >= 0; i = i - 1 {\n      guard yield_(self.unsafe_get(i)) is IterContinue else { break IterEnd }\n\n    } else {\n      IterContinue\n    }\n  })\n}\n\n///|\n/// Returns an iterator that provides both indices and values of the array in\n/// order.\n///\n/// Parameters:\n///\n/// * `self` : The array to iterate over.\n///\n/// Returns an iterator that yields tuples of index and value pairs, where\n/// indices start from 0.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::iter2\" {\n///   let arr = [10, 20, 30]\n///   let mut sum = 0\n///   arr.iter2().each(fn(i, x) { sum = sum + i + x })\n///   inspect(sum, content=\"63\") // (0 + 10) + (1 + 20) + (2 + 30) = 63\n/// }\n/// ```\npub fn[A] Array::iter2(self : Array[A]) -> Iter2[Int, A] {\n  Iter2::new(fn(yield_) {\n    for i, v in self {\n      guard yield_(i, v) is IterContinue else { break IterEnd }\n\n    } else {\n      IterContinue\n    }\n  })\n}\n\n///|\n/// Creates a new empty array.\n///\n/// Returns an empty array of type `Array[T]`.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::default\" {\n///   let arr : Array[Int] = Array::default()\n///   inspect(arr.length(), content=\"0\")\n///   inspect(arr.is_empty(), content=\"true\")\n/// }\n/// ```\npub impl[T] Default for Array[T] with default() {\n  []\n}\n\n///|\n/// Removes a back element from an array.\n///\n/// # Example\n/// ```mbt\n/// let array = [1, 2, 3, 4, 5]\n/// array.unsafe_pop_back()\n/// assert_eq(array.last(), Some(4))\n/// ```\n#internal(unsafe, \"Panic if the array is empty on non-JS backend.\")\npub fn[A] Array::unsafe_pop_back(self : Array[A]) -> Unit {\n  self.unsafe_pop() |> ignore\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Represents a source code location in a MoonBit program, containing\n/// information about the file path, line number, and column number. Used\n/// internally by the compiler for error reporting and debugging purposes.\n///\n/// This type is public to all packages but its internal representation is\n/// opaque. Users cannot construct values of this type directly; they are\n/// automatically created by the compiler when needed.\npub(all) extern type SourceLoc\n\n///|\n/// Converts a source location to its string representation.\n///\n/// Parameters:\n///\n/// * `source_location` : A source code location containing information about the\n/// file path, line number, and column number.\n///\n/// Returns a string representation of the source location, typically in the\n/// format \"file:line:column\".\n///\n/// Note: This function is primarily used internally by the compiler for error\n/// reporting and debugging purposes. Source locations are automatically created\n/// by the compiler when needed.\npub fn SourceLoc::to_string(self : SourceLoc) -> String = \"%loc_to_string\"\n\n///|\npub impl Show for SourceLoc with output(self, logger) {\n  logger.write_string(self.to_string())\n}\n\n///|\n/// Represents a type for storing argument locations in source code. It is an\n/// array of optional source locations, where each element corresponds to an\n/// argument's location in the source code. Used internally by the compiler for\n/// error reporting and debugging purposes.\npub(all) type ArgsLoc Array[SourceLoc?] derive(Show)\n\n///|\n/// Converts an array of optional source locations to its JSON string\n/// representation. Each location in the array is either represented as a string\n/// if present, or \"null\" if absent.\n///\n/// Parameters:\n///\n/// * `self` : The array of optional source locations to be converted.\n///\n/// Returns a JSON array string where each element is either a string\n/// representation of a source location or \"null\".\npub fn ArgsLoc::to_json(self : ArgsLoc) -> String {\n  let buf = StringBuilder::new(size_hint=10)\n  buf.write_char('[')\n  for i in 0..<self._.length() {\n    if i != 0 {\n      buf.write_string(\", \")\n    }\n    let item = self._[i]\n    match item {\n      None => buf.write_string(\"null\")\n      Some(loc) => loc.to_string() |> Show::output(buf)\n    }\n  }\n  buf.write_char(']')\n  buf.to_string()\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nconst ALPHABET : String = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n\n///|\npub fn Int64::to_string(self : Int64, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=Int64::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for Int64 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn Int::to_string(self : Int, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=Int::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for Int with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn UInt::to_string(self : UInt, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=UInt::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for UInt with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\ntest \"UInt::to_string\" {\n  inspect(0U, content=\"0\")\n  inspect(17U, content=\"17\")\n  inspect(4294967295U, content=\"4294967295\")\n}\n\n///|\npub fn UInt64::to_string(self : UInt64, radix~ : Int = 10) -> String {\n  let buf = StringBuilder::new(size_hint=UInt64::output_size_hint(radix~))\n  self.output(buf, radix~)\n  buf.to_string()\n}\n\n///|\npub impl Show for UInt64 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn Int16::to_string(self : Int16, radix~ : Int = 10) -> String {\n  self.to_int().to_string(radix~)\n}\n\n///|\npub impl Show for Int16 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\npub fn UInt16::to_string(self : UInt16, radix~ : Int = 10) -> String {\n  self.to_int().to_string(radix~)\n}\n\n///|\npub impl Show for UInt16 with to_string(self) {\n  self.to_string(radix=10)\n}\n\n///|\ntest \"to_string\" {\n  assert_eq((0x100).to_string(), \"256\")\n  assert_eq(\"\\{0x100}\", \"256\")\n  assert_eq(0x200U.to_string(), \"512\")\n  assert_eq(\"\\{0x200U}\", \"512\")\n  assert_eq(0x300L.to_string(), \"768\")\n  assert_eq(\"\\{0x300L}\", \"768\")\n  assert_eq(0x400UL.to_string(), \"1024\")\n  assert_eq(\"\\{0x400UL}\", \"1024\")\n}\n\n///|\ntest \"to_string with radix\" {\n  // Binary\n  inspect((0).to_string(radix=2), content=\"0\")\n  inspect((1).to_string(radix=2), content=\"1\")\n  inspect((2).to_string(radix=2), content=\"10\")\n  inspect((255).to_string(radix=2), content=\"11111111\")\n  inspect((-255).to_string(radix=2), content=\"-11111111\")\n\n  // Octal\n  inspect((0).to_string(radix=8), content=\"0\")\n  inspect((8).to_string(radix=8), content=\"10\")\n  inspect((64).to_string(radix=8), content=\"100\")\n  inspect((-64).to_string(radix=8), content=\"-100\")\n\n  // Decimal\n  inspect((0).to_string(radix=10), content=\"0\")\n  inspect((123).to_string(radix=10), content=\"123\")\n  inspect((-123).to_string(radix=10), content=\"-123\")\n  inspect(\n    0x7fff_ffff_ffff_ffffL.to_string(radix=10),\n    content=\"9223372036854775807\",\n  )\n  inspect(\n    0x8000_0000_0000_0000L.to_string(radix=10),\n    content=\"-9223372036854775808\",\n  )\n\n  // Hexadecimal\n  inspect((0).to_string(radix=16), content=\"0\")\n  inspect((0x11).to_string(radix=16), content=\"11\")\n  inspect((0x15ef).to_string(radix=16), content=\"15ef\")\n  inspect((-0xabcd).to_string(radix=16), content=\"-abcd\")\n  inspect(\n    (1.0 : Float).reinterpret_as_int().to_string(radix=16),\n    content=\"3f800000\",\n  )\n\n  // UInt\n  inspect(0U.to_string(radix=16), content=\"0\")\n  inspect(0x1AU.to_string(radix=16), content=\"1a\")\n  inspect(0xabcdU.to_string(radix=16), content=\"abcd\")\n  inspect(\n    (-2.0 : Float).reinterpret_as_uint().to_string(radix=16),\n    content=\"c0000000\",\n  )\n  inspect((-1).reinterpret_as_uint().to_string(radix=16), content=\"ffffffff\")\n\n  // Int64\n  inspect(0L.to_string(radix=16), content=\"0\")\n  inspect(0x2fL.to_string(radix=16), content=\"2f\")\n  inspect(0xf0aeL.to_string(radix=16), content=\"f0ae\")\n  inspect((-0x1234eacbL).to_string(radix=16), content=\"-1234eacb\")\n  inspect(\n    1.0.reinterpret_as_uint64().to_string(radix=16),\n    content=\"3ff0000000000000\",\n  )\n\n  // UInt64\n  inspect(0UL.to_string(radix=16), content=\"0\")\n  inspect(0x11UL.to_string(radix=16), content=\"11\")\n  inspect(0x12bdUL.to_string(radix=16), content=\"12bd\")\n  inspect(\n    (-1L).reinterpret_as_uint64().to_string(radix=16),\n    content=\"ffffffffffffffff\",\n  )\n  inspect(\n    2.0.reinterpret_as_uint64().to_string(radix=16),\n    content=\"4000000000000000\",\n  )\n}\n\n///|\ntest \"panic to_string_by_radix/illegal_radix\" {\n  ignore((1).to_string(radix=1))\n  ignore((1).to_string(radix=37))\n  ignore(1L.to_string(radix=0))\n  ignore(1L.to_string(radix=42))\n  ignore(1U.to_string(radix=-1))\n  ignore(1U.to_string(radix=73))\n  ignore(1UL.to_string(radix=-100))\n  ignore(1UL.to_string(radix=100))\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n// Types\npriv struct Entry[K, V] {\n  mut prev : Int\n  mut next : Entry[K, V]?\n  mut psl : Int\n  hash : Int\n  key : K\n  mut value : V\n} derive(Show)\n\n///|\nimpl[K : Eq, V] Eq for Entry[K, V] with op_equal(self, other) {\n  self.hash == other.hash && self.key == other.key\n}\n\n///|\n/// Mutable linked hash map that maintains the order of insertion, not thread safe.\n///\n/// # Example\n///\n/// ```\n/// let map = { 3: \"three\", 8 :  \"eight\", 1 :  \"one\"}\n/// assert_eq(map.get(2), None)\n/// assert_eq(map.get(3), Some(\"three\"))\n/// map.set(3, \"updated\")\n/// assert_eq(map.get(3), Some(\"updated\"))\n/// ```\nstruct Map[K, V] {\n  mut entries : FixedArray[Entry[K, V]?]\n  mut size : Int // active key-value pairs count\n  mut capacity : Int // current capacity\n  mut capacity_mask : Int // capacity_mask = capacity - 1, used to find idx\n  mut grow_at : Int // threshold that triggers grow\n  mut head : Entry[K, V]? // head of linked list\n  mut tail : Int // tail of linked list\n}\n\n// Implementations\n\n///|\nfn power_2_above(x : Int, n : Int) -> Int {\n  for i = x {\n    if i >= n {\n      break i\n    }\n    let next = i << 1\n    if next < 0 {\n      // overflow happened\n      break i\n    }\n    continue next\n  }\n}\n\n///|\ntest \"power_2_above\" {\n  inspect(power_2_above(1, 15), content=\"16\")\n  inspect(power_2_above(1, 16), content=\"16\")\n  inspect(power_2_above(1, 17), content=\"32\")\n  inspect(power_2_above(1, 32), content=\"32\")\n  inspect(power_2_above(128, 33), content=\"128\")\n  inspect(power_2_above(1, 2147483647), content=\"1073741824\")\n}\n\n///|\n/// Create a hash map.\n/// The capacity of the map will be the smallest power of 2 that is\n/// greater than or equal to the provided [capacity].\npub fn[K, V] Map::new(capacity~ : Int = 8) -> Map[K, V] {\n  let capacity = power_2_above(8, capacity)\n  {\n    size: 0,\n    capacity,\n    capacity_mask: capacity - 1,\n    grow_at: calc_grow_threshold(capacity),\n    entries: FixedArray::make(capacity, None),\n    head: None,\n    tail: -1,\n  }\n}\n\n///|\n/// Create a hash map from array.\npub fn[K : Hash + Eq, V] Map::from_array(arr : Array[(K, V)]) -> Map[K, V] {\n  let m = Map::new(capacity=arr.length())\n  arr.each(fn(e) { m.set(e.0, e.1) })\n  m\n}\n\n///|\n/// Set a key-value pair into the hash map.\npub fn[K : Hash + Eq, V] Map::set(self : Map[K, V], key : K, value : V) -> Unit {\n  if self.size >= self.grow_at {\n    self.grow()\n  }\n  let hash = key.hash()\n  let (idx, psl) = for psl = 0, idx = hash & self.capacity_mask {\n    match self.entries[idx] {\n      None => break (idx, psl)\n      Some(curr_entry) => {\n        if curr_entry.hash == hash && curr_entry.key == key {\n          curr_entry.value = value\n          return\n        }\n        if psl > curr_entry.psl {\n          self.push_away(idx, curr_entry)\n          break (idx, psl)\n        }\n        continue psl + 1, (idx + 1) & self.capacity_mask\n      }\n    }\n  }\n  let entry = { prev: self.tail, next: None, psl, key, value, hash }\n  self.add_entry_to_tail(idx, entry)\n}\n\n///|\nfn[K, V] Map::push_away(\n  self : Map[K, V],\n  idx : Int,\n  entry : Entry[K, V]\n) -> Unit {\n  for psl = entry.psl + 1, idx = (idx + 1) & self.capacity_mask, entry = entry {\n    match self.entries[idx] {\n      None => {\n        entry.psl = psl\n        self.set_entry(entry, idx)\n        break\n      }\n      Some(curr_entry) =>\n        if psl > curr_entry.psl {\n          entry.psl = psl\n          self.set_entry(entry, idx)\n          continue curr_entry.psl + 1,\n            (idx + 1) & self.capacity_mask,\n            curr_entry\n        } else {\n          continue psl + 1, (idx + 1) & self.capacity_mask, entry\n        }\n    }\n  }\n}\n\n///|\nfn[K, V] Map::set_entry(\n  self : Map[K, V],\n  entry : Entry[K, V],\n  new_idx : Int\n) -> Unit {\n  self.entries[new_idx] = Some(entry)\n  match entry.next {\n    None => self.tail = new_idx\n    Some(next) => next.prev = new_idx\n  }\n}\n\n///|\npub fn[K : Hash + Eq, V] Map::op_set(\n  self : Map[K, V],\n  key : K,\n  value : V\n) -> Unit {\n  self.set(key, value)\n}\n\n///|\n/// Get the value associated with a key.\npub fn[K : Hash + Eq, V] Map::get(self : Map[K, V], key : K) -> V? {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break None }\n    if entry.hash == hash && entry.key == key {\n      break Some(entry.value)\n    }\n    if i > entry.psl {\n      break None\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n#deprecated(\"Use `get` instead. `op_get` will return `V` instead of `Option[V]` in the future.\")\npub fn[K : Hash + Eq, V] Map::op_get(self : Map[K, V], key : K) -> V? {\n  self.get(key)\n}\n\n///|\n/// Returns the value associated with the key in the map, or computes and returns\n/// a default value if the key does not exist.\n///\n/// Parameters:\n///\n/// * `map` : The map to search in.\n/// * `key` : The key to look up in the map.\n/// * `default` : A function that returns a default value when the key is not\n/// found.\n///\n/// Returns either the value associated with the key if it exists, or the result\n/// of calling the default function.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"get_or_default\" {\n///   let map = { \"a\": 1, \"b\": 2 }\n///   inspect(map.get_or_default(\"a\", 0), content=\"1\")\n///   inspect(map.get_or_default(\"c\", 42), content=\"42\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] Map::get_or_default(\n  self : Map[K, V],\n  key : K,\n  default : V\n) -> V {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    match self.entries[idx] {\n      Some(entry) => {\n        if entry.hash == hash && entry.key == key {\n          break entry.value\n        }\n        if i > entry.psl {\n          break default\n        }\n        continue i + 1, (idx + 1) & self.capacity_mask\n      }\n      None => break default\n    }\n  }\n}\n\n///|\n/// Returns the value for the given key, or sets and returns a default value if the key does not exist.\npub fn[K : Hash + Eq, V] Map::get_or_init(\n  self : Map[K, V],\n  key : K,\n  default : () -> V\n) -> V {\n  match self.get(key) {\n    Some(v) => v\n    None => {\n      let v = default()\n      self.set(key, v)\n      v\n    }\n  }\n}\n\n///|\n/// Check if the hash map contains a key.\npub fn[K : Hash + Eq, V] Map::contains(self : Map[K, V], key : K) -> Bool {\n  // inline Map::get to avoid boxing\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break false }\n    if entry.hash == hash && entry.key == key {\n      break true\n    }\n    if i > entry.psl {\n      break false\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n/// Checks if a map contains a specific key-value pair.\n///\n/// Parameters:\n///\n/// * `map` : A map of type `Map[K, V]` to search in.\n/// * `key` : The key to look up in the map.\n/// * `value` : The value to be compared with the value associated with the key.\n///\n/// Returns `true` if the map contains the specified key and its associated value\n/// equals the given value, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// \n/// test \"Map::contains_kv\" {\n///   let map = { \"a\": 1, \"b\": 2 }\n///   inspect(map.contains_kv(\"a\", 1), content=\"true\")\n///   inspect(map.contains_kv(\"a\", 2), content=\"false\")\n///   inspect(map.contains_kv(\"c\", 3), content=\"false\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V : Eq] Map::contains_kv(\n  self : Map[K, V],\n  key : K,\n  value : V\n) -> Bool {\n  // inline Map::get to avoid boxing\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break false }\n    if entry.hash == hash && entry.key == key && entry.value == value {\n      break true\n    }\n    if i > entry.psl {\n      break false\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n/// Remove a key-value pair from hash map.\npub fn[K : Hash + Eq, V] Map::remove(self : Map[K, V], key : K) -> Unit {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break }\n    if entry.hash == hash && entry.key == key {\n      self.remove_entry(entry)\n      self.shift_back(idx)\n      self.size -= 1\n      break\n    }\n    if i > entry.psl {\n      break\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\nfn[K, V] Map::add_entry_to_tail(\n  self : Map[K, V],\n  idx : Int,\n  entry : Entry[K, V]\n) -> Unit {\n  match self.tail {\n    -1 => self.head = Some(entry)\n    tail => self.entries[tail].unwrap().next = Some(entry)\n  }\n  self.tail = idx\n  self.entries[idx] = Some(entry)\n  self.size += 1\n}\n\n///|\nfn[K, V] Map::remove_entry(self : Map[K, V], entry : Entry[K, V]) -> Unit {\n  match entry.prev {\n    -1 => self.head = entry.next\n    idx => self.entries[idx].unwrap().next = entry.next\n  }\n  match entry.next {\n    None => self.tail = entry.prev\n    Some(next) => next.prev = entry.prev\n  }\n}\n\n///|\nfn[K, V] Map::shift_back(self : Map[K, V], idx : Int) -> Unit {\n  let next = (idx + 1) & self.capacity_mask\n  match self.entries[next] {\n    None | Some({ psl: 0, .. }) => self.entries[idx] = None\n    Some(entry) => {\n      entry.psl -= 1\n      self.set_entry(entry, idx)\n      self.shift_back(next)\n    }\n  }\n}\n\n///|\nfn[K : Hash + Eq, V] Map::grow(self : Map[K, V]) -> Unit {\n  let old_head = self.head\n  let new_capacity = self.capacity << 1\n  self.entries = FixedArray::make(new_capacity, None)\n  self.capacity = new_capacity\n  self.capacity_mask = new_capacity - 1\n  self.grow_at = calc_grow_threshold(self.capacity)\n  self.size = 0\n  self.head = None\n  self.tail = -1\n  loop old_head {\n    Some({ next, key, value, .. }) => {\n      self.set(key, value)\n      continue next\n    }\n    None => break\n  }\n}\n\n///|\nfn calc_grow_threshold(capacity : Int) -> Int {\n  capacity * 13 / 16\n}\n\n// Utils\n\n///|\nfn[K : Show, V : Show] Map::debug_entries(self : Map[K, V]) -> String {\n  let buf = StringBuilder::new()\n  for i in 0..<self.entries.length() {\n    if i > 0 {\n      buf.write_char(',')\n    }\n    match self.entries[i] {\n      None => buf.write_char('_')\n      Some({ psl, key, value, .. }) =>\n        buf.write_string(\"(\\{psl},\\{key},\\{value})\")\n    }\n  }\n  buf.to_string()\n}\n\n///|\npub impl[K : Show, V : Show] Show for Map[K, V] with output(self, logger) {\n  logger.write_string(\"{\")\n  loop 0, self.head {\n    _, None => logger.write_string(\"}\")\n    i, Some({ key, value, next, .. }) => {\n      if i > 0 {\n        logger.write_string(\", \")\n      }\n      logger..write_object(key)..write_string(\": \")..write_object(value)\n      continue i + 1, next\n    }\n  }\n}\n\n///|\n/// Get the number of key-value pairs in the map.\npub fn[K, V] Map::size(self : Map[K, V]) -> Int {\n  self.size\n}\n\n///|\n/// Get the capacity of the map.\npub fn[K, V] Map::capacity(self : Map[K, V]) -> Int {\n  self.capacity\n}\n\n///|\n/// Check if the hash map is empty.\npub fn[K, V] Map::is_empty(self : Map[K, V]) -> Bool {\n  self.size == 0\n}\n\n///|\n/// Iterate over all key-value pairs of the map in the order of insertion.\n#locals(f)\npub fn[K, V] Map::each(self : Map[K, V], f : (K, V) -> Unit) -> Unit {\n  loop self.head {\n    Some({ key, value, next, .. }) => {\n      f(key, value)\n      continue next\n    }\n    None => break\n  }\n}\n\n///|\n/// Iterate over all key-value pairs of the map in the order of insertion, with index.\n#locals(f)\npub fn[K, V] Map::eachi(self : Map[K, V], f : (Int, K, V) -> Unit) -> Unit {\n  loop 0, self.head {\n    i, Some({ key, value, next, .. }) => {\n      f(i, key, value)\n      continue i + 1, next\n    }\n    _, None => break\n  }\n}\n\n///|\n/// Clears the map, removing all key-value pairs. Keeps the allocated space.\npub fn[K, V] Map::clear(self : Map[K, V]) -> Unit {\n  self.entries.fill(None)\n  self.size = 0\n  self.head = None\n  self.tail = -1\n}\n\n///|\n/// Returns the iterator of the hash map, provide elements in the order of insertion.\npub fn[K, V] Map::iter(self : Map[K, V]) -> Iter[(K, V)] {\n  Iter::new(fn(yield_) {\n    loop self.head {\n      Some({ key, value, next, .. }) => {\n        guard yield_((key, value)) is IterContinue else { break IterEnd }\n        continue next\n      }\n      None => break IterContinue\n    }\n  })\n}\n\n///|\npub fn[K, V] Map::iter2(self : Map[K, V]) -> Iter2[K, V] {\n  Iter2::new(fn(yield_) {\n    loop self.head {\n      Some({ key, value, next, .. }) => {\n        guard yield_(key, value) is IterContinue else { break IterEnd }\n        continue next\n      }\n      None => IterContinue\n    }\n  })\n}\n\n///|\npub fn[K, V] Map::keys(self : Map[K, V]) -> Iter[K] {\n  Iter::new(fn(yield_) {\n    loop self.head {\n      Some({ key, next, .. }) => {\n        guard yield_(key) is IterContinue else { break IterEnd }\n        continue next\n      }\n      None => IterContinue\n    }\n  })\n}\n\n///|\npub fn[K, V] Map::values(self : Map[K, V]) -> Iter[V] {\n  Iter::new(fn(yield_) {\n    loop self.head {\n      Some({ value, next, .. }) => {\n        guard yield_(value) is IterContinue else { break IterEnd }\n        continue next\n      }\n      None => IterContinue\n    }\n  })\n}\n\n///|\n/// Converts the hash map to an array.\npub fn[K, V] Map::to_array(self : Map[K, V]) -> Array[(K, V)] {\n  let arr = Array::make_uninit(self.size)\n  let mut i = 0\n  loop self.head {\n    Some({ key, value, next, .. }) => {\n      arr.unsafe_set(i, (key, value))\n      i += 1\n      continue next\n    }\n    None => break\n  }\n  arr\n}\n\n///|\npub impl[K : Hash + Eq, V : Eq] Eq for Map[K, V] with op_equal(\n  self : Map[K, V],\n  that : Map[K, V]\n) -> Bool {\n  guard self.size == that.size else { return false }\n  for k, v in self {\n    guard that.contains_kv(k, v) else { return false }\n\n  } else {\n    true\n  }\n}\n\n///|\npub fn[K : Hash + Eq, V] Map::of(arr : FixedArray[(K, V)]) -> Map[K, V] {\n  let length = arr.length()\n  let m = Map::new(capacity=length)\n  // arr.iter(fn(e) { m.set(e.0, e.1) })\n  for i in 0..<length {\n    let e = arr[i]\n    m.set(e.0, e.1)\n  }\n  m\n}\n\n///|\npub fn[K : Hash + Eq, V] Map::from_iter(iter : Iter[(K, V)]) -> Map[K, V] {\n  let m = {}\n  for e in iter {\n    m.set(e.0, e.1)\n  }\n  m\n}\n\n///|\npub impl[K, V] Default for Map[K, V] with default() {\n  Map::new()\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\npub impl[X : Eq] Eq for X? with op_equal(self, other) {\n  match (self, other) {\n    (None, None) => true\n    (Some(x), Some(y)) => x == y\n    _ => false\n  }\n}\n\n///|\npub fn[X : Show] Option::to_string(self : X?) -> String {\n  match self {\n    None => \"None\"\n    Some(x) => \"Some(\" + x.to_string() + \")\"\n  }\n}\n\n///|\n/// Extract the value in `Some`.\n/// \n/// If the value is `None`, it throws a panic.\npub fn[X] Option::unwrap(self : X?) -> X {\n  match self {\n    None => panic()\n    Some(x) => x\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nstruct StringBuilder {\n  mut data : FixedArray[Byte]\n  mut len : Int\n}\n\n///|\n/// Creates a new string builder with an optional initial capacity hint.\n///\n/// Parameters:\n///\n/// * `size_hint` : An optional initial capacity hint for the internal buffer. If\n/// less than 1, a minimum capacity of 1 is used. Defaults to 0. It is the size of bytes, \n/// not the size of characters. `size_hint` may be ignored on some platforms, JS for example.\n///\n/// Returns a new `StringBuilder` instance with the specified initial capacity.\n///\npub fn StringBuilder::new(size_hint~ : Int = 0) -> StringBuilder {\n  let initial = if size_hint < 1 { 1 } else { size_hint }\n  let data : FixedArray[Byte] = FixedArray::make(initial, 0)\n  { data, len: 0 }\n}\n\n///|\n/// Return whether the given buffer is empty.\npub fn StringBuilder::is_empty(self : StringBuilder) -> Bool {\n  self.len == 0\n}\n\n///|\nfn StringBuilder::grow_if_necessary(\n  self : StringBuilder,\n  required : Int\n) -> Unit {\n  let current_len = self.data.length()\n  if required <= current_len {\n    return\n  }\n  // current_len is at least 1\n  let mut enough_space = current_len\n  // double the enough_space until it larger than required\n  while enough_space < required {\n    enough_space = enough_space * 2\n  }\n  let new_data = FixedArray::make(enough_space, Byte::default())\n  new_data.unsafe_blit(0, self.data, 0, self.len)\n  self.data = new_data\n}\n\n///|\n/// Writes a string to the StringBuilder.\npub impl Logger for StringBuilder with write_string(self, str) {\n  self.grow_if_necessary(self.len + str.length() * 2)\n  self.data.blit_from_string(self.len, str, 0, str.length())\n  self.len += str.length() * 2\n}\n\n///|\n/// Writes a character to the StringBuilder.\npub impl Logger for StringBuilder with write_char(self, ch) {\n  self.grow_if_necessary(self.len + 4)\n  let inc = self.data.set_utf16le_char(self.len, ch)\n  self.len += inc\n}\n\n///|\n/// Writes a part of the given string to the StringBuilder.\n/// \n/// Parameters:\n///\n/// * `self` : The StringBuilder to write to.\n/// * `str` : The given string.\n/// * `start` : The start index of the substring to write.\n/// * `len` : The length of the substring to write.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"write_substring\" {\n///   let sb = StringBuilder::new()\n///   sb.write_substring(\"Hello, world!\", 0, 5)\n///   assert_eq(sb.to_string(), \"Hello\")\n/// }\n/// ```\npub impl Logger for StringBuilder with write_substring(\n  self : StringBuilder,\n  str : String,\n  start : Int,\n  len : Int\n) -> Unit {\n  guard start >= 0 && len >= 0 && start + len <= str.length()\n  self.grow_if_necessary(self.len + len * 2)\n  self.data.blit_from_string(self.len, str, start, len)\n  self.len += len * 2\n}\n\n///| \n/// Returns the current content of the StringBuilder as a string.\npub fn StringBuilder::to_string(self : StringBuilder) -> String {\n  self.data.unsafe_to_bytes().to_unchecked_string(offset=0, length=self.len)\n}\n\n///|\n/// TODO: improve perf\npub impl Show for StringBuilder with output(self, logger) {\n  logger.write_string(\n    self.data.unsafe_to_bytes().to_unchecked_string(offset=0, length=self.len),\n  )\n}\n\n///| \n/// Resets the string builder to an empty state.\npub fn StringBuilder::reset(self : StringBuilder) -> Unit {\n  self.len = 0\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn println_mono(s : String) -> Unit = \"%println\"\n\n///|\nfn[T] any_to_string(any : T) -> String = \"%any.to_string\"\n\n///|\n/// Prints any value that implements the `Show` trait to the standard output,\n/// followed by a newline.\n///\n/// Parameters:\n///\n/// * `value` : The value to be printed. Must implement the `Show` trait.\n///\n/// Example:\n///\n/// ```moonbit skip\n/// test \"println\" {\n///   println(42)\n///   println(\"Hello, World!\")\n///   println([1, 2, 3])\n/// }\n/// ```\npub fn[T : Show] println(input : T) -> Unit {\n  println_mono(input.to_string())\n}\n\n///|\n/// Prints and returns the value of a given expression for quick and dirty debugging.\n#deprecated(\"This function is for debugging only and should not be used in production\")\npub fn[T] dump(t : T, name? : String, loc~ : SourceLoc = _) -> T {\n  let name = match name {\n    Some(name) => name\n    None => \"\"\n  }\n  println(\"dump(\\{name}@\\{loc}) = \\{any_to_string(t)}\")\n  t\n}\n\n///|\n/// Represents an error type used by the `inspect` function to indicate failures\n/// in value inspection. Contains a string message describing the nature of the\n/// inspection failure.\n///\n/// Returns a type constructor that creates an error type from a string message.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"inspect/failure\" {\n///   let x : Int = 42\n///   inspect(x, content=\"42\") // Raises InspectError with detailed failure message\n/// }\n/// ```\npub(all) type! InspectError String\n\n///|\nfn base64_encode(data : FixedArray[Byte]) -> String {\n  let base64 = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n  let buf = StringBuilder::new()\n  let len = data.length()\n  let rem = len % 3\n  for i = 0; i < len - rem; i = i + 3 {\n    let b0 = data[i].to_int()\n    let b1 = data[i + 1].to_int()\n    let b2 = data[i + 2].to_int()\n    let x0 = base64[(b0 & 0xFC) >> 2]\n    let x1 = base64[((b0 & 0x03) << 4) | ((b1 & 0xF0) >> 4)]\n    let x2 = base64[((b1 & 0x0F) << 2) | ((b2 & 0xC0) >> 6)]\n    let x3 = base64[b2 & 0x3F]\n    buf.write_char(x0.to_char())\n    buf.write_char(x1.to_char())\n    buf.write_char(x2.to_char())\n    buf.write_char(x3.to_char())\n  }\n  if rem == 1 {\n    let b0 = data[len - 1].to_int()\n    let x0 = base64[(b0 & 0xFC) >> 2]\n    let x1 = base64[(b0 & 0x03) << 4]\n    buf.write_char(x0.to_char())\n    buf.write_char(x1.to_char())\n    buf.write_char('=')\n    buf.write_char('=')\n  } else if rem == 2 {\n    let b0 = data[len - 2].to_int()\n    let b1 = data[len - 1].to_int()\n    let x0 = base64[(b0 & 0xFC) >> 2]\n    let x1 = base64[((b0 & 0x03) << 4) | ((b1 & 0xF0) >> 4)]\n    let x2 = base64[(b1 & 0x0F) << 2]\n    buf.write_char(x0.to_char())\n    buf.write_char(x1.to_char())\n    buf.write_char(x2.to_char())\n    buf.write_char('=')\n  }\n  buf.to_string()\n}\n\n///|\nfn base64_encode_string_codepoint(s : String) -> String {\n  // the input string is expected to be valid utf-16 string\n  let codepoint_length = s.char_length()\n  let data : FixedArray[Byte] = FixedArray::make(codepoint_length * 4, 0)\n  for i = 0, utf16_index = 0\n      i < codepoint_length\n      i = i + 1, utf16_index = utf16_index + 1 {\n    let c = s.unsafe_char_at(utf16_index).to_int()\n    if c > 0xFFFF {\n      data[i * 4] = (c & 0xFF).to_byte()\n      data[i * 4 + 1] = ((c >> 8) & 0xFF).to_byte()\n      data[i * 4 + 2] = ((c >> 16) & 0xFF).to_byte()\n      data[i * 4 + 3] = ((c >> 24) & 0xFF).to_byte()\n      continue i + 1, utf16_index + 2\n    } else {\n      data[i * 4] = (c & 0xFF).to_byte()\n      data[i * 4 + 1] = ((c >> 8) & 0xFF).to_byte()\n      data[i * 4 + 2] = 0\n      data[i * 4 + 3] = 0\n    }\n  }\n  base64_encode(data)\n}\n\n///|\ntest {\n  inspect(base64_encode_string_codepoint(\"\"))\n  inspect(base64_encode_string_codepoint(\"a\"), content=\"YQAAAA==\")\n  inspect(base64_encode_string_codepoint(\"ab\"), content=\"YQAAAGIAAAA=\")\n  inspect(base64_encode_string_codepoint(\"abc\"), content=\"YQAAAGIAAABjAAAA\")\n  inspect(\n    base64_encode_string_codepoint(\"abcd\"),\n    content=\"YQAAAGIAAABjAAAAZAAAAA==\",\n  )\n  inspect(\n    base64_encode_string_codepoint(\"abcde\"),\n    content=\"YQAAAGIAAABjAAAAZAAAAGUAAAA=\",\n  )\n  inspect(base64_encode_string_codepoint(\"a中\"), content=\"YQAAAC1OAAA=\")\n  inspect(\n    base64_encode_string_codepoint(\"a中🤣\"),\n    content=\"YQAAAC1OAAAj+QEA\",\n  )\n  inspect(\n    base64_encode_string_codepoint(\"a中🤣a\"),\n    content=\"YQAAAC1OAAAj+QEAYQAAAA==\",\n  )\n  inspect(\n    base64_encode_string_codepoint(\"a中🤣中\"),\n    content=\"YQAAAC1OAAAj+QEALU4AAA==\",\n  )\n}\n\n///|\n/// Tests if the string representation of an object matches the expected content.\n/// Used primarily in test cases to verify the correctness of `Show`\n/// implementations and program outputs.\n///\n/// Parameters:\n///\n/// * `object` : The object to be inspected. Must implement the `Show` trait.\n/// * `content` : The expected string representation of the object. Defaults to\n/// an empty string.\n/// * `location` : Source code location information for error reporting.\n/// Automatically provided by the compiler.\n/// * `arguments_location` : Location information for function arguments in\n/// source code. Automatically provided by the compiler.\n///\n/// Throws an `InspectError` if the actual string representation of the object\n/// does not match the expected content. The error message includes detailed\n/// information about the mismatch, including source location and both expected\n/// and actual values.\n///\n/// Example:\n///\n/// ```moonbit skip\n/// test \"inspect/basic\" {\n///   inspect(42, content=\"42\")\n///   inspect(\"hello\", content=\"hello\")\n///   inspect([1, 2, 3], content=\"[1, 2, 3]\")\n/// }\n/// ```\npub fn inspect(\n  obj : &Show,\n  content~ : String = \"\",\n  loc~ : SourceLoc = _,\n  args_loc~ : ArgsLoc = _\n) -> Unit!InspectError {\n  let actual = obj.to_string()\n  if actual != content {\n    let loc = loc.to_string().escape()\n    let args_loc = args_loc.to_json().escape()\n    let expect_escaped = content.escape()\n    let actual_escaped = actual.escape()\n    let expect_base64 = \"\\\"\\{base64_encode_string_codepoint(content)}\\\"\"\n    let actual_base64 = \"\\\"\\{base64_encode_string_codepoint(actual)}\\\"\"\n    raise InspectError(\n      \"@EXPECT_FAILED {\\\"loc\\\": \\{loc}, \\\"args_loc\\\": \\{args_loc}, \\\"expect\\\": \\{expect_escaped}, \\\"actual\\\": \\{actual_escaped}, \\\"expect_base64\\\": \\{expect_base64}, \\\"actual_base64\\\": \\{actual_base64}}\",\n    )\n  }\n}\n\n///|\n/// Represents an error that occurs during snapshot testing. Contains a string\n/// message describing the error.\n///\n/// Used internally by the test driver to handle snapshot-related errors. Not\n/// intended for direct use by end users.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"SnapshotError\" {\n///   let err : SnapshotError = SnapshotError(\"failed to load snapshot\")\n///   match err {\n///     SnapshotError(msg) => assert_eq(msg, \"failed to load snapshot\")\n///   }\n/// }\n/// ```\npub(all) type! SnapshotError String\n\n///|\npub(all) type! BenchError String\n\n///|\ntest \"panic error case of inspect\" {\n  let x : Int = 42\n  inspect(x, content=\"100\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\npub impl[T0 : Eq, T1 : Eq] Eq for (T0, T1) with op_equal(\n  self : (T0, T1),\n  other : (T0, T1)\n) -> Bool {\n  self.0 == other.0 && self.1 == other.1\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq] Eq for (T0, T1, T2) with op_equal(\n  self : (T0, T1, T2),\n  other : (T0, T1, T2)\n) -> Bool {\n  self.0 == other.0 && self.1 == other.1 && self.2 == other.2\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq] Eq for (T0, T1, T2, T3) with op_equal(\n  self : (T0, T1, T2, T3),\n  other : (T0, T1, T2, T3)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n) with op_equal(self : (T0, T1, T2, T3, T4), other : (T0, T1, T2, T3, T4)) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5),\n  other : (T0, T1, T2, T3, T4, T5)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6),\n  other : (T0, T1, T2, T3, T4, T5, T6)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8 &&\n  self.9 == other.9\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8 &&\n  self.9 == other.9 &&\n  self.10 == other.10\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8 &&\n  self.9 == other.9 &&\n  self.10 == other.10 &&\n  self.11 == other.11\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8 &&\n  self.9 == other.9 &&\n  self.10 == other.10 &&\n  self.11 == other.11 &&\n  self.12 == other.12\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq, T13 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n  T13,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8 &&\n  self.9 == other.9 &&\n  self.10 == other.10 &&\n  self.11 == other.11 &&\n  self.12 == other.12 &&\n  self.13 == other.13\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq, T13 : Eq, T14 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n  T13,\n  T14,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8 &&\n  self.9 == other.9 &&\n  self.10 == other.10 &&\n  self.11 == other.11 &&\n  self.12 == other.12 &&\n  self.13 == other.13 &&\n  self.14 == other.14\n}\n\n///|\npub impl[T0 : Eq, T1 : Eq, T2 : Eq, T3 : Eq, T4 : Eq, T5 : Eq, T6 : Eq, T7 : Eq, T8 : Eq, T9 : Eq, T10 : Eq, T11 : Eq, T12 : Eq, T13 : Eq, T14 : Eq, T15 : Eq] Eq for (\n  T0,\n  T1,\n  T2,\n  T3,\n  T4,\n  T5,\n  T6,\n  T7,\n  T8,\n  T9,\n  T10,\n  T11,\n  T12,\n  T13,\n  T14,\n  T15,\n) with op_equal(\n  self : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15),\n  other : (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)\n) -> Bool {\n  self.0 == other.0 &&\n  self.1 == other.1 &&\n  self.2 == other.2 &&\n  self.3 == other.3 &&\n  self.4 == other.4 &&\n  self.5 == other.5 &&\n  self.6 == other.6 &&\n  self.7 == other.7 &&\n  self.8 == other.8 &&\n  self.9 == other.9 &&\n  self.10 == other.10 &&\n  self.11 == other.11 &&\n  self.12 == other.12 &&\n  self.13 == other.13 &&\n  self.14 == other.14 &&\n  self.15 == other.15\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Reinterpret the byte sequence as Bytes.\nfn FixedArray::unsafe_to_bytes(self : FixedArray[Byte]) -> Bytes = \"%identity\"\n\n///| \n/// Creates a new byte sequence of the specified length, where each byte is\n/// initialized using a function that maps indices to bytes.\n///\n/// Parameters:\n///\n/// * `length` : The length of the byte sequence to create. If `length` is less than or\n/// equal to 0, returns an empty byte sequence.\n/// * `value` : A function that takes an index (from 0 to `length - 1`) and\n/// returns a byte for that position.\n///\n/// Returns a new byte sequence containing the bytes produced by applying the\n/// value function to each index.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::makei\" {\n///   let bytes = Bytes::makei(3, fn(i) { (i + 65).to_byte() })\n///   assert_eq(bytes, b\"ABC\")\n/// }\n/// ```\npub fn Bytes::makei(length : Int, value : (Int) -> Byte) -> Bytes {\n  if length <= 0 {\n    return []\n  }\n  let arr = FixedArray::make(length, value(0))\n  for i in 1..<length {\n    arr[i] = value(i)\n  }\n  FixedArray::unsafe_to_bytes(arr)\n}\n\n///|\n/// Creates a byte sequence from a UTF-16 encoded string. Each character in the\n/// string is encoded as a pair of bytes in little-endian order.\n///\n/// Parameters:\n///\n/// * `string` : The input string to be converted to a byte sequence.\n///\n/// Returns a new byte sequence containing the UTF-16LE encoded representation of\n/// the input string.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::of_string\" {\n///   let bytes = Bytes::of_string(\"ABC\")\n///   inspect(bytes, content=\"b\\\"\\\\x41\\\\x00\\\\x42\\\\x00\\\\x43\\\\x00\\\"\")\n/// }\n/// ```\n#deprecated(\"Use `str.to_bytes()` instead\")\npub fn Bytes::of_string(str : String) -> Bytes {\n  FixedArray::make(str.length() * 2, Byte::default())\n  ..blit_from_string(0, str, 0, str.length())\n  .unsafe_to_bytes()\n}\n\n///|\n/// TODO: support local primitive declaration\nfn unsafe_sub_string(\n  bytes : Bytes,\n  byte_offset : Int,\n  byte_length : Int\n) -> String = \"$moonbit.unsafe_bytes_sub_string\"\n\n///|\n/// Return an unchecked string, containing the subsequence of `self` that starts at \n/// `offset` and has length `length`. Both `offset` and `length` \n/// are indexed by byte.\n/// \n/// Note this function does not validate the encoding of the byte sequence, \n/// it simply copy the bytes into a new String.\npub fn Bytes::to_unchecked_string(\n  self : Bytes,\n  offset~ : Int = 0,\n  length~ : Int = self.length() - offset\n) -> String {\n  let len = self.length()\n  guard offset >= 0 && length >= 0 && offset + length <= len\n  unsafe_sub_string(self, offset, length)\n}\n\n///|\n/// Copies characters from a string to a byte sequence in UTF-16LE encoding. Each\n/// character is converted into two bytes, with the lower byte stored first.\n///\n/// Parameters:\n///\n/// * `self` : The destination byte array to copy the characters into.\n/// * `bytes_offset` : The starting position in the destination array where bytes\n/// will be written.\n/// * `str` : The source string containing the characters to copy.\n/// * `str_offset` : The starting position in the source string from which\n/// characters will be read.\n/// * `length` : The number of characters to copy.\n///\n/// Throws a runtime error if:\n///\n/// * `length` is negative\n/// * `bytes_offset` is negative\n/// * `str_offset` is negative\n/// * The range `[bytes_offset, bytes_offset + length * 2)` exceeds the length of\n/// the destination array\n/// * The range `[str_offset, str_offset + length)` exceeds the length of the\n/// source string\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::blit_from_string\" {\n///   let bytes = FixedArray::make(6, b'\\x00')\n///   bytes.blit_from_string(0, \"ABC\", 0, 3)\n///   inspect(bytes[0], content=\"b'\\\\x41'\") // 'A'\n///   inspect(bytes[1], content=\"b'\\\\x00'\")\n///   inspect(bytes[2], content=\"b'\\\\x42'\") // 'B'\n/// }\n/// ```\npub fn FixedArray::blit_from_string(\n  self : FixedArray[Byte],\n  bytes_offset : Int,\n  str : String,\n  str_offset : Int,\n  length : Int\n) -> Unit {\n  let s1 = bytes_offset\n  let s2 = str_offset\n  let e1 = bytes_offset + length - 1\n  let e2 = str_offset + length - 1\n  let len1 = self.length()\n  let len2 = str.length()\n  guard length >= 0 && s1 >= 0 && e1 < len1 && s2 >= 0 && e2 < len2\n  let end_str_offset = str_offset + length\n  for i = str_offset, j = bytes_offset; i < end_str_offset; i = i + 1, j = j + 2 {\n    let c = str.unsafe_charcode_at(i).reinterpret_as_uint()\n    self[j] = (c & 0xff).to_byte()\n    self[j + 1] = (c >> 8).to_byte()\n  }\n}\n\n///|\n/// Copy `length` chars from byte sequence `src`, starting at `src_offset`,\n/// into byte sequence `self`, starting at `bytes_offset`.\npub fn FixedArray::blit_from_bytes(\n  self : FixedArray[Byte],\n  bytes_offset : Int,\n  src : Bytes,\n  src_offset : Int,\n  length : Int\n) -> Unit {\n  let s1 = bytes_offset\n  let s2 = src_offset\n  let e1 = bytes_offset + length - 1\n  let e2 = src_offset + length - 1\n  let len1 = self.length()\n  let len2 = src.length()\n  guard length >= 0 && s1 >= 0 && e1 < len1 && s2 >= 0 && e2 < len2\n  let end_src_offset = src_offset + length\n  for i = src_offset, j = bytes_offset; i < end_src_offset; i = i + 1, j = j + 1 {\n    self[j] = src[i]\n  }\n}\n\n///|\n/// Creates a new byte sequence by copying all bytes from the input sequence.\n///\n/// Parameters:\n///\n/// * `bytes` : The byte sequence to be copied.\n///\n/// Returns a new `Bytes` containing the same sequence of bytes as the input.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::copy\" {\n///   let original = b\"\\x01\\x02\\x03\"\n///   let copy = original.copy()\n///   inspect(copy, content=\"b\\\"\\\\x01\\\\x02\\\\x03\\\"\")\n/// }\n/// ```\npub fn Bytes::copy(self : Bytes) -> Bytes {\n  Bytes::makei(self.length(), fn(i) { self[i] })\n}\n\n///|\n/// Encodes a Unicode character into UTF-8 bytes and writes them into a fixed\n/// array of bytes at the specified offset.\n///\n/// Parameters:\n///\n/// * `array` : The fixed array of bytes to write into.\n/// * `offset` : The starting position in the array where the encoded bytes will\n/// be written.\n/// * `char` : The Unicode character to be encoded.\n///\n/// Returns the number of bytes written (1 to 4 bytes depending on the\n/// character's code point).\n///\n/// Throws a panic if:\n///\n/// * The character's code point is greater than 0x10FFFF.\n/// * The array's size is insufficient to store the encoded bytes at the given\n/// offset.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::set_utf8_char\" {\n///   let buf = FixedArray::make(4, b'\\x00')\n///   let written = buf.set_utf8_char(0, '€') // Euro symbol (U+20AC)\n///   inspect(written, content=\"3\") // UTF-8 encoding takes 3 bytes\n///   inspect(buf[0], content=\"b'\\\\xE2'\")\n///   inspect(buf[1], content=\"b'\\\\x82'\")\n///   inspect(buf[2], content=\"b'\\\\xAC'\")\n/// }\n/// \n/// test \"panic FixedArray::set_utf8_char/invalid_char\" {\n///   let buf = FixedArray::make(4, b'\\x00')\n///   ignore(buf.set_utf8_char(0, (0x110000).unsafe_to_char())) // Invalid Unicode code point\n/// }\n/// ```\npub fn FixedArray::set_utf8_char(\n  self : FixedArray[Byte],\n  offset : Int,\n  value : Char\n) -> Int {\n  let code = value.to_uint()\n  match code {\n    _..<0x80 => {\n      self[offset] = ((code & 0x7F) | 0x00).to_byte()\n      1\n    }\n    _..<0x0800 => {\n      self[offset] = (((code >> 6) & 0x1F) | 0xC0).to_byte()\n      self[offset + 1] = ((code & 0x3F) | 0x80).to_byte()\n      2\n    }\n    _..<0x010000 => {\n      self[offset] = (((code >> 12) & 0x0F) | 0xE0).to_byte()\n      self[offset + 1] = (((code >> 6) & 0x3F) | 0x80).to_byte()\n      self[offset + 2] = ((code & 0x3F) | 0x80).to_byte()\n      3\n    }\n    _..<0x110000 => {\n      self[offset] = (((code >> 18) & 0x07) | 0xF0).to_byte()\n      self[offset + 1] = (((code >> 12) & 0x3F) | 0x80).to_byte()\n      self[offset + 2] = (((code >> 6) & 0x3F) | 0x80).to_byte()\n      self[offset + 3] = ((code & 0x3F) | 0x80).to_byte()\n      4\n    }\n    _ => abort(\"Char out of range\")\n  }\n}\n\n///|\n/// Fill UTF16LE encoded char `value` into byte sequence `self`, starting at `offset`.\n/// It return the length of bytes has been written.\n/// \n/// This function will panic if the `value` is out of range.\npub fn FixedArray::set_utf16le_char(\n  self : FixedArray[Byte],\n  offset : Int,\n  value : Char\n) -> Int {\n  let code = value.to_uint()\n  if code < 0x10000 {\n    self[offset] = (code & 0xFF).to_byte()\n    self[offset + 1] = (code >> 8).to_byte()\n    2\n  } else if code < 0x110000 {\n    let hi = code - 0x10000\n    let lo = (hi >> 10) | 0xD800\n    let hi = (hi & 0x3FF) | 0xDC00\n    self[offset] = (lo & 0xFF).to_byte()\n    self[offset + 1] = (lo >> 8).to_byte()\n    self[offset + 2] = (hi & 0xFF).to_byte()\n    self[offset + 3] = (hi >> 8).to_byte()\n    4\n  } else {\n    abort(\"Char out of range\")\n  }\n}\n\n///|\n/// Fill UTF16BE encoded char `value` into byte sequence `self`, starting at `offset`.\n/// It return the length of bytes has been written.\n/// \n/// This function will panic if the `value` is out of range.\npub fn FixedArray::set_utf16be_char(\n  self : FixedArray[Byte],\n  offset : Int,\n  value : Char\n) -> Int {\n  let code = value.to_uint()\n  if code < 0x10000 {\n    self[offset] = (code >> 0xFF).to_byte()\n    self[offset + 1] = (code & 0xFF).to_byte()\n    2\n  } else if code < 0x110000 {\n    let hi = code - 0x10000\n    let lo = (hi >> 10) | 0xD800\n    let hi = (hi & 0x3FF) | 0xDC00\n    self[offset] = (lo >> 8).to_byte()\n    self[offset + 1] = (lo & 0xFF).to_byte()\n    self[offset + 2] = (hi >> 8).to_byte()\n    self[offset + 3] = (hi & 0xFF).to_byte()\n    4\n  } else {\n    abort(\"Char out of range\")\n  }\n}\n\n///|\n/// Compares two byte sequences for equality. Returns true only if both sequences\n/// have the same length and contain identical bytes in the same order.\n///\n/// Parameters:\n///\n/// * `self` : The first byte sequence to compare.\n/// * `other` : The second byte sequence to compare.\n///\n/// Returns `true` if the byte sequences are equal, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::op_equal\" {\n///   let bytes1 = b\"\\x01\\x02\\x03\"\n///   let bytes2 = b\"\\x01\\x02\\x03\"\n///   let bytes3 = b\"\\x01\\x02\\x04\"\n///   inspect(bytes1 == bytes2, content=\"true\")\n///   inspect(bytes1 == bytes3, content=\"false\")\n/// }\n/// ```\npub impl Eq for Bytes with op_equal(self : Bytes, other : Bytes) -> Bool {\n  if self.length() != other.length() {\n    false\n  } else {\n    let len = self.length()\n    for i in 0..<len {\n      if self[i] != other[i] {\n        break false\n      }\n    } else {\n      true\n    }\n  }\n}\n\n///|\n/// Compares two byte sequences lexicographically. First compares the lengths of\n/// the sequences, then compares bytes pairwise until a difference is found or\n/// all bytes have been compared.\n///\n/// Parameters:\n///\n/// * `self` : The first byte sequence to compare.\n/// * `other` : The second byte sequence to compare.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::compare\" {\n///   let a = b\"\\x01\\x02\\x03\"\n///   let b = b\"\\x01\\x02\\x04\"\n///   inspect(a.compare(b), content=\"-1\") // a < b\n///   inspect(b.compare(a), content=\"1\") // b > a\n///   inspect(a.compare(a), content=\"0\") // a = a\n/// }\n/// \n/// test \"Bytes::compare/different_lengths\" {\n///   let a = b\"\\x01\\x02\"\n///   let b = b\"\\x01\\x02\\x03\"\n///   inspect(a.compare(b), content=\"-1\") // shorter sequence is less\n///   inspect(b.compare(a), content=\"1\") // longer sequence is greater\n/// }\n/// ```\npub impl Compare for Bytes with compare(self, other) {\n  let self_len = self.length()\n  let other_len = other.length()\n  let cmp = self_len.compare(other_len)\n  if cmp != 0 {\n    return cmp\n  }\n  for i in 0..<self_len {\n    let b1 = self.unsafe_get(i)\n    let b2 = other.unsafe_get(i)\n    let cmp = b1.compare(b2)\n    if cmp != 0 {\n      break cmp\n    }\n  } else {\n    0\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn unsafe_make_string(length : Int, value : Char) -> String = \"$moonbit.unsafe_make_string\"\n\n///|\n/// Create new string of `length`, where each character is `value`\n///\n/// ```\n/// assert_eq(String::make(5,'S'), \"SSSSS\")\n/// ```\npub fn String::make(length : Int, value : Char) -> String {\n  guard length >= 0 else { abort(\"invalid length\") }\n  if value.to_int() <= 0xFFFF {\n    unsafe_make_string(length, value)\n  } else {\n    let buf = StringBuilder::new(size_hint=2 * length)\n    for _ in 0..<length {\n      buf.write_char(value)\n    }\n    buf.to_string()\n  }\n}\n\n///|\nlet min_leading_surrogate = 0xD800\n\n///|\nlet max_leading_surrogate = 0xDBFF\n\n///|\nlet min_trailing_surrogate = 0xDC00\n\n///|\nlet max_trailing_surrogate = 0xDFFF\n\n///|\nfn is_leading_surrogate(c : Int) -> Bool {\n  min_leading_surrogate <= c && c <= max_leading_surrogate\n}\n\n///|\nfn is_trailing_surrogate(c : Int) -> Bool {\n  min_trailing_surrogate <= c && c <= max_trailing_surrogate\n}\n\n///|\nfn code_point_of_surrogate_pair(leading : Int, trailing : Int) -> Char {\n  ((leading - 0xD800) * 0x400 + trailing - 0xDC00 + 0x10000).unsafe_to_char()\n}\n\n///|\n/// Returns the UTF-16 code unit at the given index.\n/// \n/// This function will panic if the index is out of bounds.\n///\n/// # Examples\n///\n/// ```\n/// let s = \"Hello🤣\";\n/// inspect(s.charcode_at(0), content=\"72\");\n/// inspect(s.charcode_at(5), content=\"55358\"); // First surrogate of 🤣\n/// inspect(s.charcode_at(6), content=\"56611\"); // Second surrogate of 🤣\n/// ```\n///\npub fn String::charcode_at(self : String, index : Int) -> Int = \"%string_get\"\n\n///|\n/// Returns the Unicode code point at the given index.\n///\n/// This method counts Unicode code points (characters) rather than UTF-16 code units.\n/// It properly handles surrogate pairs to return the correct Unicode character.\n///\n/// # Examples\n///\n/// ```\n/// let s = \"Hello🤣\";\n/// inspect(s.codepoint_at(0), content=\"H\");\n/// inspect(s.codepoint_at(5), content=\"🤣\"); // Returns full emoji character\n/// ```\n///\n/// # Panics\n///\n/// Panics if:\n/// - The index is out of bounds\n/// - The string contains an invalid surrogate pair\n#deprecated(\"The index will be changed to utf16 index. If you want to access n-th character, use `str.iter().nth(n).unwrap()` instead.\")\npub fn String::codepoint_at(self : String, index : Int) -> Char {\n  let charcode_len = self.length()\n  guard index >= 0 && index < charcode_len else { abort(\"index out of bounds\") }\n  for char_count = 0, utf16_offset = 0\n      char_count < charcode_len && utf16_offset < index\n      char_count = char_count + 1, utf16_offset = utf16_offset + 1 {\n    let c1 = self.unsafe_charcode_at(char_count)\n    if is_leading_surrogate(c1) && char_count + 1 < charcode_len {\n      let c2 = self.unsafe_charcode_at(char_count + 1)\n      if is_trailing_surrogate(c2) {\n        continue char_count + 2, utf16_offset + 1\n      } else {\n        abort(\"invalid surrogate pair\")\n      }\n    }\n  } else {\n    guard utf16_offset == index && char_count < charcode_len else {\n      abort(\"index out of bounds\")\n    }\n    let c1 = self.unsafe_charcode_at(char_count)\n    if is_leading_surrogate(c1) && char_count + 1 < charcode_len {\n      let c2 = self.unsafe_charcode_at(char_count + 1)\n      if is_trailing_surrogate(c2) {\n        code_point_of_surrogate_pair(c1, c2)\n      } else {\n        abort(\"invalid surrogate pair\")\n      }\n    } else {\n      c1.unsafe_to_char()\n    }\n  }\n}\n\n///|\n/// Returns the Unicode code point at the given index without bounds checking.\npub fn String::unsafe_char_at(self : String, index : Int) -> Char {\n  let c1 = self.unsafe_charcode_at(index)\n  if is_leading_surrogate(c1) {\n    let c2 = self.unsafe_charcode_at(index + 1)\n    code_point_of_surrogate_pair(c1, c2)\n  } else {\n    c1.unsafe_to_char()\n  }\n}\n\n///|\n/// Returns the number of Unicode code points (characters) in the string.\n///\n/// This method counts actual Unicode characters, properly handling surrogate pairs\n/// that represent single characters like emojis. For the raw UTF-16 code unit count,\n/// use `length()` instead.\n///\n/// # Examples\n///\n/// ```\n/// let s = \"Hello🤣\";\n/// inspect(s.char_length(), content = \"6\"); // 6 actual characters\n/// inspect(s.length(), content = \"7\");  // 5 ASCII chars + 2 surrogate pairs\n/// ```\npub fn String::char_length(\n  self : String,\n  start_offset~ : Int = 0,\n  end_offset~ : Int = self.length()\n) -> Int {\n  guard start_offset >= 0 &&\n    start_offset <= end_offset &&\n    end_offset <= self.length() else {\n    abort(\"invalid start or end index for String::codepoint_length\")\n  }\n  for utf16_index = start_offset, char_count = 0\n      utf16_index < end_offset\n      utf16_index = utf16_index + 1, char_count = char_count + 1 {\n    let c1 = self.unsafe_charcode_at(utf16_index)\n    if is_leading_surrogate(c1) && utf16_index + 1 < end_offset {\n      let c2 = self.unsafe_charcode_at(utf16_index + 1)\n      if is_trailing_surrogate(c2) {\n        continue utf16_index + 2, char_count + 1\n      } else {\n        abort(\"invalid surrogate pair\")\n      }\n    }\n  } else {\n    char_count\n  }\n}\n\n///|\n#deprecated(\"Use `char_length` instead.\")\npub fn String::codepoint_length(\n  self : String,\n  start_offset~ : Int = 0,\n  end_offset~ : Int = self.length()\n) -> Int {\n  self.char_length(start_offset~, end_offset~)\n}\n\n///|\n#intrinsic(\"%string.substring\")\nfn unsafe_substring(str : String, start : Int, end : Int) -> String {\n  let len = end - start\n  let bytes = FixedArray::make(len * 2, Byte::default())\n  bytes.blit_from_string(0, str, start, len)\n  bytes.unsafe_to_bytes().to_unchecked_string()\n}\n\n///|\n/// Returns a new string containing characters from the original string starting\n/// at `start` index up to (but not including) `end` index.\n///\n/// Parameters:\n///\n/// * `string` : The source string from which to extract the substring.\n/// * `start` : The starting index of the substring (inclusive). Defaults to 0.\n/// * `end` : The ending index of the substring (exclusive). Defaults to the\n/// length of the string.\n///\n/// Returns a new string containing the specified substring.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"substring/basic\" {\n///   let s = \"Hello world\"\n///   inspect(s.substring(start=0, end=5), content=\"Hello\")\n///   inspect(s.substring(start=6, end=11), content=\"world\")\n///   inspect(s.substring(), content=\"Hello world\")\n/// }\n///\n/// test \"substring/empty\" {\n///   let s = \"test\"\n///   inspect(s.substring(start=2, end=2), content=\"\")\n///   inspect(\"\".substring(), content=\"\")\n/// }\n///\n/// test \"panic substring/invalid_range\" {\n///   let s = \"test\"\n///   ignore(s.substring(start=-1))\n///   ignore(s.substring(end=5))\n///   ignore(s.substring(start=3, end=2))\n/// }\n/// ```\npub fn String::substring(self : String, start~ : Int = 0, end? : Int) -> String {\n  let len = self.length()\n  let end = match end {\n    Some(end) => end\n    None => len\n  }\n  guard start >= 0 && start <= end && end <= len\n  unsafe_substring(self, start, end)\n}\n\n///|\ntest \"substring/basic\" {\n  let s = \"hello, world\"\n  inspect(s.substring(start=0, end=5), content=\"hello\")\n  inspect(s.substring(start=7, end=12), content=\"world\")\n  inspect(s.substring(), content=\"hello, world\")\n}\n\n///|\ntest \"substring/empty\" {\n  let s = \"test\"\n  inspect(s.substring(start=2, end=2), content=\"\")\n  inspect(s.substring(start=4, end=4), content=\"\")\n  inspect(\"\".substring(), content=\"\")\n}\n\n///|\ntest \"panic substring/invalid_range\" {\n  let s = \"test\"\n  ignore(s.substring(start=-1))\n  ignore(s.substring(end=5))\n  ignore(s.substring(start=3, end=2))\n}\n\n///|\ntest \"substring/basic\" {\n  inspect(\"Hello world\".substring(start=0, end=5), content=\"Hello\")\n  inspect(\"Hello world\".substring(start=6, end=11), content=\"world\")\n  inspect(\"Hello world\".substring(start=0), content=\"Hello world\")\n  inspect(\"Hello world\".substring(start=6), content=\"world\")\n}\n\n///|\ntest \"substring/boundary\" {\n  inspect(\"\".substring(start=0, end=0), content=\"\")\n  inspect(\"a\".substring(start=0, end=1), content=\"a\")\n  inspect(\"abc\".substring(start=0), content=\"abc\")\n  inspect(\"abc\".substring(start=1), content=\"bc\")\n  inspect(\"abc\".substring(start=0, end=3), content=\"abc\")\n}\n\n///|\ntest \"panic substring/out_of_bounds\" {\n  ignore(\"hello\".substring(start=-1, end=4))\n  ignore(\"hello\".substring(start=6, end=4))\n  ignore(\"hello\".substring(start=0, end=6))\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Evaluates an expression and discards its result. This is useful when you want\n/// to execute an expression for its side effects but don't care about its return\n/// value, or when you want to explicitly indicate that a value is intentionally\n/// unused.\n///\n/// Parameters:\n///\n/// * `value` : The value to be ignored. Can be of any type.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"ignore\" {\n///   let x = 42\n///   ignore(x) // Explicitly ignore the value\n///   let mut sum = 0\n///   ignore([1, 2, 3].iter().each(fn(x) { sum = sum + x })) // Ignore the Unit return value of each()\n/// }\n/// ```\npub fn[T] ignore(t : T) -> Unit = \"%ignore\"\n\n///|\n/// Tests if two values are physically equal (i.e., point to the same memory\n/// location). Unlike structural equality testing (`==`), this function checks if\n/// two references point to exactly the same object in memory.\n///\n/// Parameters:\n///\n/// * `first` : The first value to compare.\n/// * `second` : The second value to compare.\n/// * `T` : The type parameter representing the type of values being compared.\n///\n/// Returns `true` if both values refer to the same object in memory, `false`\n/// otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"physical_equal\" {\n///   let arr1 = [1, 2, 3]\n///   let arr2 = arr1\n///   let arr3 = [1, 2, 3]\n///   inspect(physical_equal(arr1, arr2), content=\"true\") // Same object\n///   inspect(physical_equal(arr1, arr3), content=\"false\") // Different objects with same content\n/// }\n/// ```\npub fn[T] physical_equal(a : T, b : T) -> Bool = \"%refeq\"\n\n///|\npub fnalias @abort.abort\n\n///|\npub fn[T] panic() -> T = \"%panic\"\n\n// Bool primitive ops\n\n///|\n/// Performs logical negation on a boolean value.\n///\n/// Parameters:\n///\n/// * `value` : The boolean value to negate.\n///\n/// Returns the logical NOT of the input value: `true` if the input is `false`,\n/// and `false` if the input is `true`.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"not\" {\n///   inspect(not(true), content=\"false\")\n///   inspect(not(false), content=\"true\")\n/// }\n/// ```\npub fn not(x : Bool) -> Bool = \"%bool_not\"\n\n///|\n/// Compares two boolean values for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first boolean value to compare.\n/// * `other` : The second boolean value to compare.\n///\n/// Returns `true` if both boolean values are equal (either both `true` or both\n/// `false`), `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bool::op_equal\" {\n///   inspect(true == true, content=\"true\")\n///   inspect(false == true, content=\"false\")\n///   inspect(true == false, content=\"false\")\n///   inspect(false == false, content=\"true\")\n/// }\n/// ```\npub impl Eq for Bool with op_equal(self : Bool, other : Bool) -> Bool = \"%bool_eq\"\n\n///|\n/// Compares two boolean values and returns their relative order. This is a\n/// deprecated method and users should use `compare` instead.\n///\n/// Parameters:\n///\n/// * `self` : The first boolean value to compare.\n/// * `other` : The second boolean value to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other` (i.e., `self` is `false`\n/// and `other` is `true`)\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other` (i.e., `self` is `true`\n/// and `other` is `false`)\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bool::op_compare/deprecated\" {\n///   let t = true\n///   let f = false\n///   // This usage is deprecated, use compare() instead\n///   inspect(t.compare(f), content=\"1\")\n///   inspect(f.compare(t), content=\"-1\")\n///   inspect(t.compare(t), content=\"0\")\n/// }\n/// ```\n///\n#deprecated(\"Use `compare` instead\")\n#coverage.skip\npub fn Bool::op_compare(self : Bool, other : Bool) -> Int = \"%bool_compare\"\n\n///|\n/// Compares two boolean values and returns their relative order. The comparison\n/// follows the rule that `false` is less than `true`.\n///\n/// Parameters:\n///\n/// * `self` : The first boolean value to compare.\n/// * `other` : The second boolean value to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is `false` and `other` is `true`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is `true` and `other` is `false`\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bool::compare\" {\n///   inspect(true.compare(false), content=\"1\") // true > false\n///   inspect(false.compare(true), content=\"-1\") // false < true\n///   inspect(true.compare(true), content=\"0\") // true = true\n/// }\n/// ```\npub impl Compare for Bool with compare(self, other) = \"%bool_compare\"\n\n///|\n/// Returns the default value for the `Bool` type, which is `false`.\n///\n/// Returns a `Bool` value that represents the default state of a boolean value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bool::default\" {\n///   let b : Bool = Bool::default()\n///   inspect(b, content=\"false\")\n/// }\n/// ```\npub impl Default for Bool with default() = \"%bool_default\"\n\n// int32 primitive ops\n\n///|\n/// Performs arithmetic negation on an integer value, returning its additive\n/// inverse.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to negate.\n///\n/// Returns the negation of the input value. For all inputs except\n/// `Int::min_value()`, returns the value with opposite sign. When the input is\n/// `Int::min_value()`, returns `Int::min_value()` due to two's complement\n/// representation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_neg\" {\n///   inspect(-42, content=\"-42\")\n///   inspect(42, content=\"42\")\n///   inspect(--2147483647, content=\"2147483647\") // negating near min value\n/// }\n/// ```\npub impl Neg for Int with op_neg(self) = \"%i32_neg\"\n\n///|\n/// Adds two 32-bit signed integers. Performs two's complement arithmetic, which\n/// means the operation will wrap around if the result exceeds the range of a\n/// 32-bit integer.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns a new integer that is the sum of the two operands. If the\n/// mathematical sum exceeds the range of a 32-bit integer (-2,147,483,648 to\n/// 2,147,483,647), the result wraps around according to two's complement rules.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_add\" {\n///   inspect(42 + 1, content=\"43\")\n///   inspect(2147483647 + 1, content=\"-2147483648\") // Overflow wraps around to minimum value\n/// }\n/// ```\npub impl Add for Int with op_add(self, other) = \"%i32_add\"\n\n///|\n/// Performs subtraction between two 32-bit integers, following standard two's\n/// complement arithmetic rules. When the result overflows or underflows, it\n/// wraps around within the 32-bit integer range.\n///\n/// Parameters:\n///\n/// * `self` : The minuend (the number being subtracted from).\n/// * `other` : The subtrahend (the number to subtract).\n///\n/// Returns the difference between `self` and `other`.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_sub\" {\n///   let a = 42\n///   let b = 10\n///   inspect(a - b, content=\"32\")\n///   let max = 2147483647 // Int maximum value\n///   inspect(max - -1, content=\"-2147483648\") // Overflow case\n/// }\n/// ```\npub impl Sub for Int with op_sub(self, other) = \"%i32_sub\"\n\n///|\n/// Multiplies two 32-bit integers. This is the implementation of the `*`\n/// operator for `Int`.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns the product of the two integers. If the result overflows the range of\n/// `Int`, it wraps around according to two's complement arithmetic.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_mul\" {\n///   inspect(42 * 2, content=\"84\")\n///   inspect(-10 * 3, content=\"-30\")\n///   let max = 2147483647 // Int.max_value\n///   inspect(max * 2, content=\"-2\") // Overflow wraps around\n/// }\n/// ```\npub impl Mul for Int with op_mul(self, other) = \"%i32_mul\"\n\n///|\n/// Performs integer division between two 32-bit integers. The result is\n/// truncated towards zero (rounds down for positive numbers and up for negative\n/// numbers).\n///\n/// Parameters:\n///\n/// * `dividend` : The first integer operand to be divided.\n/// * `divisor` : The second integer operand that divides the dividend.\n///\n/// Returns the quotient of the division operation.\n///\n/// Throws a panic if `divisor` is zero.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_div\" {\n///   inspect(10 / 3, content=\"3\") // truncates towards zero\n///   inspect(-10 / 3, content=\"-3\")\n///   inspect(10 / -3, content=\"-3\")\n/// }\n///\n/// test \"panic Int::op_div/division_by_zero\" {\n///   ignore(42 / 0) // Panics with division by zero\n/// }\n/// ```\npub impl Div for Int with op_div(self, other) = \"%i32_div\"\n\n///|\n/// Calculates the remainder of dividing one integer by another. The result\n/// follows the formula `dividend - (dividend / divisor) * divisor`, maintaining\n/// the same sign as the dividend.\n///\n/// Parameters:\n///\n/// * `self` : The dividend (the number being divided).\n/// * `other` : The divisor (the number to divide by).\n///\n/// Returns the remainder of the division. If `other` is 0, the behavior is\n/// undefined.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_mod\" {\n///   inspect(7 % 3, content=\"1\")\n///   inspect(-7 % 3, content=\"-1\")\n///   inspect(7 % -3, content=\"1\")\n/// }\n///\n/// test \"panic Int::op_mod/division_by_zero\" {\n///   ignore(7 % 0) // Panics with division by zero\n/// }\n/// ```\npub impl Mod for Int with op_mod(self, other) = \"%i32_mod\"\n\n///|\n/// Performs a bitwise NOT operation on a 32-bit integer. Flips each bit in the\n/// integer's binary representation (0 becomes 1 and 1 becomes 0).\n///\n/// Parameters:\n///\n/// * `value` : The 32-bit integer on which to perform the bitwise NOT operation.\n///\n/// Returns a new integer with all bits flipped from the input value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::lnot\" {\n///   let a = -1 // All bits are 1\n///   let b = 0 // All bits are 0\n///   inspect(a.lnot(), content=\"0\")\n///   inspect(b.lnot(), content=\"-1\")\n/// }\n/// ```\npub fn Int::lnot(self : Int) -> Int = \"%i32_lnot\"\n\n///|\n/// Performs a bitwise AND operation between two 32-bit integers. Each bit in the\n/// result is set to 1 only if the corresponding bits in both operands are 1.\n///\n/// Parameters:\n///\n/// * `self` : The first 32-bit integer operand.\n/// * `other` : The second 32-bit integer operand.\n///\n/// Returns the result of the bitwise AND operation. The resulting value has a\n/// bit set to 1 at each position where both input integers have a bit set to 1.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::land\" {\n///   let x = 0xF0 // 11110000\n///   let y = 0xAA // 10101010\n///   inspect(x & y, content=\"160\") // 10100000 = 160\n/// }\n/// ```\npub fn Int::land(self : Int, other : Int) -> Int = \"%i32_land\"\n\n///|\n/// Performs a bitwise OR operation between two 32-bit integers. For each bit\n/// position, the result is 1 if at least one of the corresponding bits in either\n/// operand is 1.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns a new integer where each bit is set to 1 if at least one of the\n/// corresponding bits in either operand is 1, and 0 otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::lor\" {\n///   let x = 0xF0F0 // 1111_0000_1111_0000\n///   let y = 0x0F0F // 0000_1111_0000_1111\n///   inspect(x | y, content=\"65535\") // 1111_1111_1111_1111 = 65535\n/// }\n/// ```\npub fn Int::lor(self : Int, other : Int) -> Int = \"%i32_lor\"\n\n///|\n/// Performs a bitwise XOR operation between two integers.\n///\n/// Parameters:\n///\n/// * `self` : The first integer operand.\n/// * `other` : The second integer operand.\n///\n/// Returns a new integer where each bit is set to 1 if the corresponding bits in\n/// the operands are different, and 0 if they are the same.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::lxor\" {\n///   let x = 0xF0F0 // 1111_0000_1111_0000\n///   let y = 0x0F0F // 0000_1111_0000_1111\n///   inspect(x ^ y, content=\"65535\") // 1111_1111_1111_1111\n///   inspect(x ^ x, content=\"0\") // XOR with self gives 0\n/// }\n/// ```\npub fn Int::lxor(self : Int, other : Int) -> Int = \"%i32_lxor\"\n\n///|\n/// Performs a left shift operation on a 32-bit integer. Shifts each bit in the\n/// integer to the left by the specified number of positions, filling the\n/// rightmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift. Must be a non-negative value\n/// less than 32. Values outside this range will be masked with `& 31`.\n///\n/// Returns a new integer with bits shifted left by the specified number of\n/// positions. For each position shifted, the rightmost bit is filled with 0, and\n/// the leftmost bit is discarded.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_shl\" {\n///   let x = 1\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n///   let y = -4\n///   inspect(y << 2, content=\"-16\") // Binary: 100 -> 10000\n/// }\n/// ```\npub impl Shl for Int with op_shl(self, other) = \"%i32_shl\"\n\n///|\n/// Performs an arithmetic right shift operation on an integer value. Shifts the\n/// bits of the first operand to the right by the number of positions specified\n/// by the second operand. The sign bit is preserved and copied to the leftmost\n/// positions.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift the bits to the right. Must be\n/// non-negative.\n///\n/// Returns an integer representing the result of the arithmetic right shift\n/// operation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_shr\" {\n///   let n = -16\n///   inspect(n >> 2, content=\"-4\") // Sign bit is preserved during shift\n///   let p = 16\n///   inspect(p >> 2, content=\"4\") // Regular right shift for positive numbers\n/// }\n/// ```\npub impl Shr for Int with op_shr(self, other) = \"%i32_shr\"\n\n///|\n/// Performs a left shift operation on a 32-bit integer. Shifts each bit in the\n/// integer to the left by the specified number of positions, filling the vacated\n/// bit positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift the bits to the left.\n///\n/// Returns an integer containing the result of shifting `self` left by `shift`\n/// positions.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::lsl\" {\n///   let x = 1\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n///   let y = 42\n///   inspect(y << 2, content=\"168\") // Binary: 101010 -> 10101000\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn Int::lsl(self : Int, other : Int) -> Int = \"%i32_shl\"\n\n///|\n/// Performs a left shift operation on a 32-bit integer. Shifts the bits of the\n/// first operand to the left by the specified number of positions. The rightmost\n/// positions are filled with zeros.\n///\n/// Parameters:\n///\n/// * `value` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift left. Must be non-negative and\n/// less than 32.\n///\n/// Returns a new integer value after performing the left shift operation. The\n/// value is equal to multiplying the input by 2 raised to the power of the shift\n/// count.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::shl\" {\n///   let x = 1\n///   inspect(x << 3, content=\"8\") // Equivalent to x << 3\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn Int::shl(self : Int, other : Int) -> Int = \"%i32_shl\"\n\n///|\n/// Performs a logical right shift operation on a signed 32-bit integer. In a\n/// logical right shift, zeros are shifted in from the left, regardless of the\n/// sign bit. This function is DEPRECATED and users should use `UInt` type with\n/// the infix operator `>>` instead.\n///\n/// Parameters:\n///\n/// * `self` : The signed 32-bit integer value to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a signed 32-bit integer containing the same bits as if the input were\n/// treated as an unsigned integer and shifted right logically.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::lsr\" {\n///   let x = -4 // Binary: 11111...11100\n///   let unsigned = x.reinterpret_as_uint() // Convert to UInt first\n///   inspect(unsigned >> 1, content=\"2147483646\") // Using the recommended operator\n/// }\n/// ```\n///\n#deprecated(\"Use UInt type and infix operator `>>` instead\")\n#coverage.skip\npub fn Int::lsr(self : Int, other : Int) -> Int {\n  (self.reinterpret_as_uint() >> other).reinterpret_as_int()\n}\n\n///|\n/// Performs an arithmetic right shift operation on a 32-bit integer value,\n/// preserving the sign bit by replicating it into the positions vacated by the\n/// shift. This is a deprecated function; use the infix operator `>>` instead.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a new integer value that is the result of arithmetically shifting\n/// `self` right by `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::asr\" {\n///   let x = -16\n///   inspect(x >> 2, content=\"-4\") // Right shift preserves sign bit\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn Int::asr(self : Int, other : Int) -> Int = \"%i32_shr\"\n\n///|\n/// Performs an arithmetic right shift operation on a 32-bit integer by the\n/// specified number of positions. The operation preserves the sign bit,\n/// replicating it into the positions vacated by the shift.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be shifted.\n/// * `shift` : The number of positions to shift right.\n///\n/// Returns a new integer representing the result of shifting `self` right by\n/// `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::shr\" {\n///   let n = -1024\n///   inspect(n >> 3, content=\"-128\") // Preserves sign bit during right shift\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn Int::shr(self : Int, other : Int) -> Int = \"%i32_shr\"\n\n///|\n/// Counts the number of consecutive zero bits at the least significant end of\n/// the integer's binary representation.\n///\n/// Parameters:\n///\n/// * `self` : The integer value whose trailing zeros are to be counted.\n///\n/// Returns the number of trailing zero bits (0 to 32). For example, returns 0 if\n/// the value is odd (least significant bit is 1), returns 32 if the value is 0\n/// (all bits are zeros).\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::ctz\" {\n///   let x = 0\n///   inspect(x.ctz(), content=\"32\") // All bits are zero\n///   let y = 1\n///   inspect(y.ctz(), content=\"0\") // No trailing zeros\n///   let z = 16\n///   inspect(z.ctz(), content=\"4\") // Binary: ...10000\n/// }\n/// ```\npub fn Int::ctz(self : Int) -> Int = \"%i32_ctz\"\n\n///|\npub fn Int::clz(self : Int) -> Int = \"%i32_clz\"\n\n///|\n/// Counts the number of set bits (1s) in the binary representation of a 32-bit\n/// integer.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit integer whose bits are to be counted.\n///\n/// Returns the number of bits set to 1 in the binary representation of the input\n/// integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::popcnt\" {\n///   let x = 0b1011 // Binary: 1011 (3 bits set)\n///   inspect(x.popcnt(), content=\"3\")\n///   let y = -1 // All bits set in two's complement\n///   inspect(y.popcnt(), content=\"32\")\n/// }\n/// ```\npub fn Int::popcnt(self : Int) -> Int = \"%i32_popcnt\"\n\n///|\n/// Compares two integers for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first integer to compare.\n/// * `other` : The second integer to compare.\n///\n/// Returns `true` if both integers have the same value, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::op_equal\" {\n///   inspect(42 == 42, content=\"true\")\n///   inspect(42 == -42, content=\"false\")\n/// }\n/// ```\npub impl Eq for Int with op_equal(self : Int, other : Int) -> Bool = \"%i32_eq\"\n\n///|\n/// Compares two integers and returns their relative order.\n///\n/// Parameters:\n///\n/// * `self` : The first integer to compare.\n/// * `other` : The second integer to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::compare\" {\n///   let a = 42\n///   let b = 24\n///   inspect(a.compare(b), content=\"1\") // 42 > 24\n///   inspect(b.compare(a), content=\"-1\") // 24 < 42\n///   inspect(a.compare(a), content=\"0\") // 42 = 42\n/// }\n/// ```\npub impl Compare for Int with compare(self, other) = \"%i32_compare\"\n\n///|\npub fn Int::is_pos(self : Int) -> Bool = \"%i32_is_pos\"\n\n///|\n/// Tests whether an integer is negative.\n///\n/// Parameters:\n///\n/// * `self` : The integer to test.\n///\n/// Returns `true` if the integer is negative, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::is_neg\" {\n///   let neg = -42\n///   let zero = 0\n///   let pos = 42\n///   inspect(neg.is_neg(), content=\"true\")\n///   inspect(zero.is_neg(), content=\"false\")\n///   inspect(pos.is_neg(), content=\"false\")\n/// }\n/// ```\npub fn Int::is_neg(self : Int) -> Bool = \"%i32_is_neg\"\n\n///|\npub fn Int::is_non_pos(self : Int) -> Bool = \"%i32_is_non_pos\"\n\n///|\npub fn Int::is_non_neg(self : Int) -> Bool = \"%i32_is_non_neg\"\n\n///|\n/// Returns the default value for integers, which is 0.\n///\n/// Returns an integer value of 0.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::default\" {\n///   let x : Int = Int::default()\n///   inspect(x, content=\"0\")\n/// }\n/// ```\npub impl Default for Int with default() = \"%i32_default\"\n\n///|\n/// Converts a 32-bit integer to a double-precision floating-point number. The\n/// conversion preserves the exact value since all integers in the range of `Int`\n/// can be represented exactly as `Double` values.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit integer to be converted.\n///\n/// Returns a double-precision floating-point number that represents the same\n/// numerical value as the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::to_double\" {\n///   let n = 42\n///   inspect(n.to_double(), content=\"42\")\n///   let neg = -42\n///   inspect(neg.to_double(), content=\"-42\")\n/// }\n/// ```\npub fn Int::to_double(self : Int) -> Double = \"%i32_to_f64\"\n\n///|\n/// Converts a double-precision floating-point number to an unsigned 32-bit\n/// integer by truncating the decimal part. When the input is NaN or negative,\n/// returns 0. When the input exceeds the maximum value of UInt (4294967295),\n/// returns 4294967295.\n///\n/// Parameters:\n///\n/// * `value` : The double-precision floating-point number to be converted.\n///\n/// Returns an unsigned 32-bit integer representing the truncated value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::trunc_double\" {\n///   inspect(UInt::trunc_double(42.75), content=\"42\")\n/// }\n/// ```\npub fn UInt::trunc_double(val : Double) -> UInt = \"%f64.to_u32\"\n\n///|\n/// reinterpret the signed int as unsigned int, when the value is\n/// non-negative, i.e, 0..=2^31-1, the value is the same. When the\n/// value is negative, it turns into a large number,\n/// for example, -1 turns into 2^32-1\npub fn Int::reinterpret_as_uint(self : Int) -> UInt = \"%i32.to_u32_reinterpret\"\n\n///|\n/// Reinterprets a signed 32-bit integer as an unsigned 32-bit integer. For\n/// numbers within the range \\[0, 2^31-1], the value remains the same. For\n/// negative numbers, they are reinterpreted as large positive numbers in the\n/// range \\[2^31, 2^32-1].\n///\n/// Parameters:\n///\n/// * `value` : The signed 32-bit integer to be reinterpreted.\n///\n/// Returns an unsigned 32-bit integer that has the same bit pattern as the\n/// input.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::to_uint\" {\n///   let pos = 42\n///   let neg = -1\n///   inspect(pos.reinterpret_as_uint(), content=\"42\")\n///   inspect(neg.reinterpret_as_uint(), content=\"4294967295\") // 2^32 - 1\n/// }\n/// ```\n///\n#deprecated(\"Use `reinterpret_as_uint` instead\")\n#coverage.skip\npub fn Int::to_uint(self : Int) -> UInt = \"%i32.to_u32_reinterpret\"\n// Double primitive ops\n\n///|\n/// Converts a 32-bit signed integer to an unsigned 64-bit integer by first\n/// converting it to a signed 64-bit integer and then reinterpreting the bits as\n/// an unsigned value.\n///\n/// Parameters:\n///\n/// * `value` : The 32-bit signed integer to be converted.\n///\n/// Returns an unsigned 64-bit integer representing the same bit pattern as the\n/// input value when extended to 64 bits.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::to_uint64\" {\n///   let pos = 42\n///   inspect(pos.to_uint64(), content=\"42\")\n///   let neg = -1\n///   inspect(neg.to_uint64(), content=\"18446744073709551615\") // 2^64 - 1\n/// }\n/// ```\npub fn Int::to_uint64(self : Int) -> UInt64 {\n  self.to_int64().reinterpret_as_uint64()\n}\n\n///|\n/// Negates a double-precision floating-point number. For non-NaN inputs, changes\n/// the sign of the number. For NaN inputs, returns NaN.\n///\n/// Parameters:\n///\n/// * `number` : The double-precision floating-point number to negate.\n///\n/// Returns a new double-precision floating-point number that is the negation of\n/// the input number.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::op_neg\" {\n///   inspect(-42.0, content=\"-42\")\n///   inspect(--42.0, content=\"42\")\n///   inspect(-(0.0 / 0.0), content=\"NaN\") // Negating NaN returns NaN\n/// }\n/// ```\npub impl Neg for Double with op_neg(self) = \"%f64_neg\"\n\n///|\n/// Adds two double-precision floating-point numbers together following IEEE 754\n/// standards.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number.\n/// * `other` : The second double-precision floating-point number to add.\n///\n/// Returns the sum of the two numbers. Special cases follow IEEE 754 rules:\n///\n/// * If either operand is NaN, returns NaN\n/// * If adding +∞ and -∞, returns NaN\n/// * If adding ±∞ with any finite number, returns ±∞\n/// * If adding +0.0 and -0.0, returns +0.0\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::op_add\" {\n///   inspect(2.5 + 3.7, content=\"6.2\")\n///   inspect(1.0 / 0.0 + -1.0 / 0.0, content=\"NaN\") // Infinity + -Infinity = NaN\n/// }\n/// ```\npub impl Add for Double with op_add(self, other) = \"%f64_add\"\n\n///|\n/// Performs subtraction between two double-precision floating-point numbers.\n///\n/// Parameters:\n///\n/// * `self` : The first operand (minuend).\n/// * `other` : The second operand (subtrahend).\n///\n/// Returns the difference between the two numbers according to IEEE 754\n/// double-precision arithmetic rules.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::op_sub\" {\n///   let a = 5.0\n///   let b = 3.0\n///   inspect(a - b, content=\"2\")\n///   inspect(0.0 / 0.0 - 1.0, content=\"NaN\") // NaN - anything = NaN\n/// }\n/// ```\npub impl Sub for Double with op_sub(self, other) = \"%f64_sub\"\n\n///|\n/// Multiplies two double-precision floating-point numbers. This is the\n/// implementation of the `*` operator for `Double` type.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point operand.\n/// * `other` : The second double-precision floating-point operand.\n///\n/// Returns a new double-precision floating-point number representing the product\n/// of the two operands. Special cases follow IEEE 754 standard:\n///\n/// * If either operand is NaN, returns NaN\n/// * If one operand is infinity and the other is zero, returns NaN\n/// * If one operand is infinity and the other is a non-zero finite number,\n/// returns infinity with the appropriate sign\n/// * If both operands are infinity, returns infinity with the appropriate sign\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::op_mul\" {\n///   inspect(2.5 * 2.0, content=\"5\")\n///   inspect(-2.0 * 3.0, content=\"-6\")\n///   let nan = 0.0 / 0.0 // NaN\n///   inspect(nan * 1.0, content=\"NaN\")\n/// }\n/// ```\npub impl Mul for Double with op_mul(self, other) = \"%f64_mul\"\n\n///|\n/// Performs division between two double-precision floating-point numbers.\n/// Follows IEEE 754 standard for floating-point arithmetic, including handling\n/// of special cases like division by zero (returns infinity) and operations\n/// involving NaN.\n///\n/// Parameters:\n///\n/// * `self` : The dividend (numerator) in the division operation.\n/// * `other` : The divisor (denominator) in the division operation.\n///\n/// Returns the result of dividing `self` by `other`. Special cases follow IEEE\n/// 754:\n///\n/// * Division by zero returns positive or negative infinity based on the\n/// dividend's sign\n/// * Operations involving NaN return NaN\n/// * Division of infinity by infinity returns NaN\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::op_div\" {\n///   inspect(6.0 / 2.0, content=\"3\")\n///   inspect(-6.0 / 2.0, content=\"-3\")\n///   inspect(1.0 / 0.0, content=\"Infinity\")\n/// }\n/// ```\npub impl Div for Double with op_div(self, other) = \"%f64_div\"\n\n///|\n/// Calculates the square root of a double-precision floating-point number. For\n/// non-negative numbers, returns the positive square root. For negative numbers\n/// or NaN, returns NaN.\n///\n/// Parameters:\n///\n/// * `self` : The double-precision floating-point number whose square root is to\n/// be calculated.\n///\n/// Returns the square root of the input number, or NaN if the input is negative\n/// or NaN.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::sqrt\" {\n///   inspect(4.0.sqrt(), content=\"2\")\n///   inspect(0.0.sqrt(), content=\"0\")\n///   inspect((-1.0).sqrt(), content=\"NaN\")\n/// }\n/// ```\npub fn Double::sqrt(self : Double) -> Double = \"%f64_sqrt\"\n\n///|\n/// Compares two double-precision floating-point numbers for equality following\n/// IEEE 754 rules. Returns `true` if both numbers are equal, including when both\n/// are `NaN`. Note that this differs from the standard IEEE 754 behavior where\n/// `NaN` is not equal to any value, including itself.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number to compare.\n/// * `other` : The second double-precision floating-point number to compare.\n///\n/// Returns `true` if both numbers are equal, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::op_equal\" {\n///   let a = 3.14\n///   let b = 3.14\n///   let c = 2.718\n///   inspect(a == b, content=\"true\")\n///   inspect(a == c, content=\"false\")\n///   let nan = 0.0 / 0.0 // NaN\n///   inspect(nan == nan, content=\"false\") // Note: NaN equals itself in MoonBit\n/// }\n/// ```\npub impl Eq for Double with op_equal(self : Double, other : Double) -> Bool = \"%f64_eq\"\n\n///|\n/// Tests for inequality between two double-precision floating-point numbers.\n/// Takes into account special cases like NaN, where two NaN values are\n/// considered not equal to each other.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number to compare.\n/// * `other` : The second double-precision floating-point number to compare.\n///\n/// Returns `true` if the two numbers are not equal according to IEEE 754 rules,\n/// `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::op_neq\" {\n///   inspect(1.0 != 2.0, content=\"true\")\n///   inspect(1.0 != 1.0, content=\"false\")\n///   inspect(0.0 / 0.0 != 0.0 / 0.0, content=\"true\") // NaN != NaN\n/// }\n/// ```\npub fn Double::op_neq(self : Double, other : Double) -> Bool = \"%f64_ne\"\n\n///|\n/// Compares two double-precision floating-point numbers and returns their\n/// relative order. Follows IEEE 754 rules for floating-point comparisons,\n/// including handling of special values like NaN.\n///\n/// Parameters:\n///\n/// * `self` : The first double-precision floating-point number to compare.\n/// * `other` : The second double-precision floating-point number to compare\n/// against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n/// * If either value is NaN, returns an implementation-defined value that is\n/// consistent with total ordering\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::compare\" {\n///   let a = 3.14\n///   let b = 2.718\n///   inspect(a.compare(b), content=\"1\") // 3.14 > 2.718\n///   inspect(b.compare(a), content=\"-1\") // 2.718 < 3.14\n///   inspect(a.compare(a), content=\"0\") // 3.14 = 3.14\n/// }\n/// ```\npub impl Compare for Double with compare(self, other) = \"%f64_compare\"\n\n///|\n/// Returns the default value for double-precision floating-point numbers (0.0).\n///\n/// Returns a `Double` value initialized to 0.0.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::default\" {\n///   inspect(Double::default(), content=\"0\")\n/// }\n/// ```\npub impl Default for Double with default() = \"%f64_default\"\n\n///|\nfn Double::to_unchecked_int(self : Double) -> Int = \"%f64_to_i32\"\n\n///|\n/// Converts an unsigned 32-bit integer to a double-precision floating-point\n/// number. Since the range of unsigned 32-bit integers is smaller than what can\n/// be precisely represented by a double-precision floating-point number, this\n/// conversion is guaranteed to be exact.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 32-bit integer to be converted.\n///\n/// Returns a double-precision floating-point number that exactly represents the\n/// input value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::convert_uint\" {\n///   let n = 42U\n///   inspect(Double::convert_uint(n), content=\"42\")\n///   let max = 4294967295U // maximum value of UInt\n///   inspect(Double::convert_uint(max), content=\"4294967295\")\n/// }\n/// ```\npub fn Double::convert_uint(val : UInt) -> Double = \"%u32.to_f64\"\n\n// Char primitive ops\n\n///|\n/// Converts a character to its Unicode code point value as an integer.\n///\n/// Parameters:\n///\n/// * `self` : The character to be converted.\n///\n/// Returns an integer representing the Unicode code point value of the\n/// character.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Char::to_int\" {\n///   inspect('A'.to_int(), content=\"65\") // ASCII value of 'A'\n///   inspect('あ'.to_int(), content=\"12354\") // Unicode code point of 'あ'\n/// }\n/// ```\npub fn Char::to_int(self : Char) -> Int = \"%char_to_int\"\n\n///|\n/// Converts a Unicode character to its unsigned 32-bit integer code point\n/// representation. The character's code point value is first converted to a\n/// signed integer and then reinterpreted as an unsigned integer.\n///\n/// Parameters:\n///\n/// * `character` : The Unicode character to be converted.\n///\n/// Returns an unsigned 32-bit integer representing the character's Unicode code\n/// point.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Char::to_uint\" {\n///   let c = 'A'\n///   inspect(c.to_uint(), content=\"65\") // ASCII value of 'A'\n///   let emoji = '🤣'\n///   inspect(emoji.to_uint(), content=\"129315\") // Unicode code point U+1F923\n/// }\n/// ```\npub fn Char::to_uint(self : Char) -> UInt {\n  self.to_int().reinterpret_as_uint()\n}\n\n///|\n#deprecated(\"Use `Int::unsafe_to_char` instead, and use `Int::to_char` for safe conversion\")\npub fn Char::from_int(val : Int) -> Char = \"%char_from_int\"\n\n///|\n/// Compares two characters for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first character to compare.\n/// * `other` : The second character to compare.\n///\n/// Returns `true` if both characters represent the same Unicode code point,\n/// `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Char::op_equal\" {\n///   let a = 'A'\n///   let b = 'A'\n///   let c = 'B'\n///   inspect(a == b, content=\"true\")\n///   inspect(a == c, content=\"false\")\n/// }\n/// ```\npub impl Eq for Char with op_equal(self : Char, other : Char) -> Bool = \"%char_eq\"\n\n///|\n/// Compares two characters based on their Unicode code points. Returns a\n/// negative value if the first character comes before the second, zero if they\n/// are equal, and a positive value if the first character comes after the\n/// second.\n///\n/// Parameters:\n///\n/// * `self` : The first character to compare.\n/// * `other` : The second character to compare against.\n///\n/// Returns an integer indicating the relative ordering:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Char::compare\" {\n///   inspect('a'.compare('b'), content=\"-1\")\n///   inspect('b'.compare('a'), content=\"1\")\n///   inspect('a'.compare('a'), content=\"0\")\n/// }\n/// ```\npub impl Compare for Char with compare(self, other) = \"%char_compare\"\n\n///|\n/// Returns the default value for the `Char` type, which is the null character\n/// (`'\\x00'`).\n///\n/// Returns a `Char` value representing the null character.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Char::default\" {\n///   assert_true(Char::default().to_string() == \"\\x00\")\n/// }\n/// ```\npub impl Default for Char with default() = \"%char_default\"\n\n// Bytes primitive ops\n\n///|\n/// Retrieves a byte at the specified index from a byte sequence.\n///\n/// Parameters:\n///\n/// * `bytes` : The byte sequence to access.\n/// * `index` : The position in the byte sequence from which to retrieve the\n/// byte.\n///\n/// Returns a byte value from the specified position in the sequence.\n///\n/// Throws a panic if the index is negative or greater than or equal to the\n/// length of the byte sequence.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::op_get\" {\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   inspect(bytes[1], content=\"b'\\\\x02'\")\n/// }\n///\n/// test \"panic Bytes::op_get/out_of_bounds\" {\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   ignore(bytes[3]) // Index out of bounds\n/// }\n/// ```\npub fn Bytes::op_get(self : Bytes, idx : Int) -> Byte = \"%bytes_get\"\n\n///|\n/// Retrieves a byte at the specified index from a byte sequence without\n/// performing bounds checking. This is a low-level operation that should be used\n/// with caution.\n///\n/// Parameters:\n///\n/// * `bytes` : The byte sequence to retrieve the byte from.\n/// * `index` : The position in the byte sequence from which to retrieve the\n/// byte.\n///\n/// Returns a single byte from the specified position in the byte sequence.\n///\n/// Throws a panic if the index is negative or greater than or equal to the\n/// length of the byte sequence.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::unsafe_get\" {\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   inspect(bytes.unsafe_get(1), content=\"b'\\\\x02'\")\n/// }\n///\n/// test \"panic Bytes::unsafe_get/out_of_bounds\" {\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   ignore(bytes.unsafe_get(3)) // Index out of bounds\n/// }\n/// ```\n///\n#internal(unsafe, \"Panic if index is out of bounds\")\npub fn Bytes::unsafe_get(self : Bytes, idx : Int) -> Byte = \"%bytes_get\"\n\n///|\n/// Returns the number of bytes in a byte sequence.\n///\n/// Parameters:\n///\n/// * `bytes` : The byte sequence whose length is to be determined.\n///\n/// Returns an integer representing the length (number of bytes) of the sequence.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::length\" {\n///   let bytes = b\"\\x01\\x02\\x03\"\n///   inspect(bytes.length(), content=\"3\")\n///   let empty = b\"\"\n///   inspect(empty.length(), content=\"0\")\n/// }\n/// ```\npub fn Bytes::length(self : Bytes) -> Int = \"%bytes_length\"\n\n///|\n/// Creates a new byte sequence of the specified length, where each byte is\n/// initialized to the given value. Returns an empty byte sequence if the\n/// length is negative.\n///\n/// Parameters:\n///\n/// * `length` : The length of the byte sequence to create. Must be non-negative.\n/// * `initial_value` : The byte value used to initialize each position in the\n/// sequence.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::make\" {\n///   let bytes = Bytes::make(3, b'\\xFF')\n///   inspect(bytes, content=\n///   #|b\"\\xff\\xff\\xff\"\n/// )\n///   let empty = Bytes::make(0, b'\\x00')\n///   inspect(empty, content=\"b\\\"\\\"\")\n/// }\n/// ```\npub fn Bytes::make(len : Int, init : Byte) -> Bytes {\n  if len < 0 {\n    return []\n  }\n  Bytes::unsafe_make(len, init)\n}\n\n///|\nfn Bytes::unsafe_make(len : Int, init : Byte) -> Bytes = \"%bytes_make\"\n\n///|\n/// Creates a new byte sequence filled with zero bytes.\n///\n/// Parameters:\n///\n/// * `length` : The length of the byte sequence to create. Must be a\n/// non-negative integer.\n///\n/// Returns a new byte sequence of the specified length, with all bytes\n/// initialized to zero.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Bytes::new\" {\n///   let bytes = Bytes::new(3)\n///   inspect(bytes, content=\"b\\\"\\\\x00\\\\x00\\\\x00\\\"\")\n/// }\n///\n/// test \"Bytes::new/empty\" {\n///   let bytes = Bytes::new(0)\n///   inspect(bytes, content=\"b\\\"\\\"\")\n/// }\n/// ```\npub fn Bytes::new(len : Int) -> Bytes {\n  Bytes::make(len, b'\\x00')\n}\n\n///|\n/// Converts a 32-bit signed integer to a byte by taking its least significant 8\n/// bits. Any bits beyond the first 8 bits are truncated.\n///\n/// Parameters:\n///\n/// * `value` : The 32-bit signed integer to be converted. Only the least\n/// significant 8 bits will be used.\n///\n/// Returns a byte containing the least significant 8 bits of the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::to_byte\" {\n///   let n = 258 // In binary: 100000010\n///   inspect(n.to_byte(), content=\"b'\\\\x02'\") // Only keeps 00000010\n///   let neg = -1 // In binary: all 1's\n///   inspect(neg.to_byte(), content=\"b'\\\\xFF'\") // Only keeps 11111111\n/// }\n/// ```\npub fn Int::to_byte(self : Int) -> Byte = \"%i32_to_byte\"\n\n///|\npub fn Int::unsafe_to_char(self : Int) -> Char = \"%char_from_int\"\n\n///|\npub fn Int::to_char(self : Int) -> Char? {\n  if self is (0..=0xD7FF) || self is (0xE000..=0x10FFFF) {\n    Some(self.unsafe_to_char())\n  } else {\n    None\n  }\n}\n\n///|\n/// Converts an unsigned 64-bit integer to a byte by truncating it to fit within\n/// the byte range (0 to 255).\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 64-bit integer to be converted.\n///\n/// Returns a byte containing the least significant 8 bits of the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt64::to_byte\" {\n///   let n = 258UL // In binary: 100000010\n///   inspect(n.to_byte(), content=\"b'\\\\x02'\") // Only keeps 00000010\n/// }\n/// ```\npub fn UInt64::to_byte(self : UInt64) -> Byte {\n  self.to_int().to_byte()\n}\n\n// FixedArray primitive ops\n\n///|\n/// Retrieves an element at the specified index from a fixed-size array. This\n/// function implements the array indexing operator `[]`.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to access.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index.\n///\n/// Throws a runtime error if the index is out of bounds (negative or greater\n/// than or equal to the length of the array).\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::op_get\" {\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr[1], content=\"42\")\n/// }\n///\n/// test \"panic FixedArray::op_get/out_of_bounds\" {\n///   let arr = FixedArray::make(3, 0)\n///   ignore(arr[3]) // Index out of bounds\n/// }\n/// ```\npub fn[T] FixedArray::op_get(self : FixedArray[T], idx : Int) -> T = \"%fixedarray.get\"\n\n///|\n/// Retrieves an element from a fixed-size array at the specified index without\n/// performing bounds checking. This is an unsafe operation that may cause\n/// undefined behavior if used incorrectly.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to retrieve the element from.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index in the array.\n///\n/// Throws a panic if the index is out of bounds (negative or greater than or\n/// equal to the array's length).\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::unsafe_get\" {\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr.unsafe_get(1), content=\"42\")\n/// }\n///\n/// test \"panic FixedArray::unsafe_get/out_of_bounds\" {\n///   let arr = FixedArray::make(3, 42)\n///   ignore(arr.unsafe_get(3)) // Index out of bounds\n/// }\n/// ```\n///\n#internal(unsafe, \"Panic if index is out of bounds\")\npub fn[T] FixedArray::unsafe_get(self : FixedArray[T], idx : Int) -> T = \"%fixedarray.unsafe_get\"\n\n///|\n#internal(unsafe, \"Panic if index is out of bounds\")\npub fn[T] FixedArray::unsafe_set(\n  self : FixedArray[T],\n  idx : Int,\n  val : T\n) -> Unit = \"%fixedarray.unsafe_set\"\n\n///|\n/// Retrieves an element at the specified index from a fixed-size array. This\n/// function is similar to `op_get` but provides explicit bounds checking.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to access.\n/// * `index` : The position in the array from which to retrieve the element.\n///\n/// Returns the element at the specified index.\n///\n/// Throws a runtime error if the index is out of bounds (less than 0 or greater\n/// than or equal to the length of the array).\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::get\" {\n///   let arr = [1, 2, 3]\n///   inspect(arr.get(1), content=\"Some(2)\")\n/// }\n///\n/// test \"FixedArray::get/out_of_bounds\" {\n///   let arr = [1, 2, 3]\n///   inspect(arr.get(3), content=\"None\")\n/// }\n/// ```\n#deprecated(\"use `arr.op_get(i)`(arr[i]) instead\")\npub fn[T] FixedArray::get(self : FixedArray[T], idx : Int) -> T = \"%fixedarray.get\"\n\n///|\n/// Sets a value at the specified index in a fixed-size array. The original value\n/// at that index is overwritten.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to modify.\n/// * `index` : The position in the array where the value will be set.\n/// * `value` : The new value to assign at the specified index.\n///\n/// Throws a runtime error if the index is out of bounds (less than 0 or greater\n/// than or equal to the length of the array).\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::op_set\" {\n///   let arr = [1, 2, 3]\n///   arr[1] = 42\n///   inspect(arr, content=\"[1, 42, 3]\")\n/// }\n///\n/// test \"panic FixedArray::op_set/out_of_bounds\" {\n///   let arr = [1, 2, 3]\n///   arr[3] = 42 // Index out of bounds\n/// }\n/// ```\n///\n#intrinsic(\"%fixedarray.set\")\npub fn[T] FixedArray::op_set(self : FixedArray[T], idx : Int, val : T) -> Unit = \"%fixedarray.set\"\n\n///|\n/// Sets the value at the specified index in a fixed-size array.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array to be modified.\n/// * `index` : The index at which to set the value. Must be non-negative and\n/// less than the array's length.\n/// * `value` : The value to be set at the specified index.\n///\n/// Throws a runtime error if the index is out of bounds (less than 0 or greater\n/// than or equal to the array's length).\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::set\" {\n///   let arr = FixedArray::make(3, 0)\n///   arr.set(1, 42)\n///   inspect(arr[1], content=\"42\")\n/// }\n///\n/// test \"panic FixedArray::set/out_of_bounds\" {\n///   let arr = FixedArray::make(3, 0)\n///   ignore(arr.set(3, 42)) // Panic: index out of bounds\n/// }\n/// ```\npub fn[T] FixedArray::set(self : FixedArray[T], idx : Int, val : T) -> Unit = \"%fixedarray.set\"\n\n///|\n/// Returns the number of elements in a fixed-size array.\n///\n/// Parameters:\n///\n/// * `array` : The fixed-size array whose length is to be determined.\n///\n/// Returns an integer representing the number of elements in the array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::length\" {\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr.length(), content=\"3\")\n/// }\n/// ```\npub fn[T] FixedArray::length(self : FixedArray[T]) -> Int = \"%fixedarray.length\"\n\n///|\n/// Creates a new fixed-size array with the specified length, initializing all\n/// elements with the given value.\n///\n/// Parameters:\n///\n/// * `length` : The length of the array to create. Must be non-negative.\n/// * `initial_value` : The value used to initialize all elements in the array.\n///\n/// Returns a new fixed-size array of type `FixedArray[T]` with `length`\n/// elements, where each element is initialized to `initial_value`.\n///\n/// Throws a panic if `length` is negative.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"FixedArray::make\" {\n///   let arr = FixedArray::make(3, 42)\n///   inspect(arr[0], content=\"42\")\n///   inspect(arr.length(), content=\"3\")\n/// }\n///\n/// test \"panic FixedArray::make/negative_length\" {\n///   ignore(FixedArray::make(-1, 0))\n/// }\n/// ```\n/// \n/// WARNING: A common pitfall is creating with the same initial value, for example:\n/// ```moonbit\n/// test {\n///   let two_dimension_array = FixedArray::make(10, FixedArray::make(10, 0))\n///   two_dimension_array[0][5] = 10\n///   assert_eq(two_dimension_array[5][5], 10)\n/// }\n/// ```\n/// This is because all the cells reference to the same object (the FixedArray[Int] in this case). \n/// One should use makei() instead which creates an object for each index.\npub fn[T] FixedArray::make(len : Int, init : T) -> FixedArray[T] = \"%fixedarray.make\"\n\n// String primitive ops\n\n///|\n/// Returns the number of UTF-16 code units in the string. Note that this is not\n/// necessarily equal to the number of Unicode characters (code points) in the\n/// string, as some characters may be represented by multiple UTF-16 code units.\n///\n/// Parameters:\n///\n/// * `string` : The string whose length is to be determined.\n///\n/// Returns the number of UTF-16 code units in the string.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"String::length\" {\n///   inspect(\"hello\".length(), content=\"5\")\n///   inspect(\"🤣\".length(), content=\"2\") // Emoji uses two UTF-16 code units\n///   inspect(\"\".length(), content=\"0\") // Empty string\n/// }\n/// ```\npub fn String::length(self : String) -> Int = \"%string_length\"\n\n///|\n#deprecated(\"use `length` instead\")\npub fn String::charcode_length(self : String) -> Int = \"%string_length\"\n\n///|\n#deprecated(\"use `String::charcode_at` and `Int::to_char` instead\")\npub fn String::op_get(self : String, idx : Int) -> Char = \"%string_get\"\n\n///|\n/// Retrieves the character at the specified index in a string.\n///\n/// Parameters:\n///\n/// * `string` : The string to access.\n/// * `index` : The position in the string from which to retrieve the character.\n///\n/// Returns a Unicode character at the specified position in the string.\n///\n/// Throws a runtime error if the index is negative or greater than or equal to\n/// the length of the string.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"String::get\" {\n///   let s = \"Hello, 世界\"\n///   inspect(s.get(0), content=\"H\")\n///   inspect(s.get(7), content=\"世\")\n/// }\n///\n/// test \"panic String::get/out_of_bounds\" {\n///   let s = \"Hello\"\n///   ignore(s.get(-1)) // Negative index\n///   ignore(s.get(5)) // Index equals length\n/// }\n/// ```\n#deprecated(\"use `charcode_at` instead\")\npub fn String::get(self : String, idx : Int) -> Char = \"%string_get\"\n\n///|\n/// Returns the UTF-16 code unit at a given position in the string without\n/// performing bounds checking. This is a low-level function that provides direct\n/// access to the internal representation of the string.\n///\n/// Parameters:\n///\n/// * `string` : The string from which to retrieve the code unit.\n/// * `index` : The position of the code unit to retrieve.\n///\n/// Returns the UTF-16 code unit at the specified position as an integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"String::unsafe_charcode_at\" {\n///   let s = \"Hello🤣\"\n///   inspect(s.unsafe_charcode_at(0), content=\"72\") // 'H'\n///   inspect(s.unsafe_charcode_at(5), content=\"55358\") // First surrogate of 🤣\n///   inspect(s.unsafe_charcode_at(6), content=\"56611\") // Second surrogate of 🤣\n/// }\n/// ```\n///\n#internal(unsafe, \"Panic if index is out of bounds.\")\npub fn String::unsafe_charcode_at(self : String, idx : Int) -> Int = \"%string.unsafe_get\"\n\n///|\n/// Concatenates two strings, creating a new string that contains all characters\n/// from the first string followed by all characters from the second string.\n///\n/// Parameters:\n///\n/// * `self` : The first string to concatenate.\n/// * `other` : The second string to concatenate.\n///\n/// Returns a new string containing the concatenation of both input strings.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"String::op_add\" {\n///   let hello = \"Hello\"\n///   let world = \" World!\"\n///   inspect(hello + world, content=\"Hello World!\")\n///   inspect(\"\" + \"abc\", content=\"abc\") // concatenating with empty string\n/// }\n/// ```\npub impl Add for String with op_add(self, other) = \"%string_add\"\n\n///|\n/// Tests whether two strings are equal by comparing their characters.\n///\n/// Parameters:\n///\n/// * `self` : The first string to compare.\n/// * `other` : The second string to compare.\n///\n/// Returns `true` if both strings contain exactly the same sequence of\n/// characters, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"String::op_equal\" {\n///   let str1 = \"hello\"\n///   let str2 = \"hello\"\n///   let str3 = \"world\"\n///   inspect(str1 == str2, content=\"true\")\n///   inspect(str1 == str3, content=\"false\")\n/// }\n/// ```\npub impl Eq for String with op_equal(self : String, other : String) -> Bool = \"%string_eq\"\n\n///|\n/// Returns the string itself without any modifications. This method is primarily\n/// used to implement the `Show` trait, which requires a `to_string` function.\n///\n/// Parameters:\n///\n/// * `string` : The string value to be returned.\n///\n/// Returns the same string that was passed in.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"String::to_string\" {\n///   let s = \"hello\"\n///   inspect(s.to_string(), content=\"hello\")\n/// }\n/// ```\npub fn String::to_string(self : String) -> String = \"%string_to_string\"\n\n///|\n// For internal use only\npriv extern type UnsafeMaybeUninit[_]\n\n///|\n/// Converts a byte value to a 32-bit signed integer. The resulting integer will\n/// have the same binary representation as the byte value, preserving the\n/// numerical value in the range \\[0, 255].\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted to an integer.\n///\n/// Returns a 32-bit signed integer representing the same numerical value as the\n/// input byte.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::to_int\" {\n///   let b = b'\\xFF' // byte with value 255\n///   inspect(b.to_int(), content=\"255\")\n///   let zero = b'\\x00'\n///   inspect(zero.to_int(), content=\"0\")\n/// }\n/// ```\npub fn Byte::to_int(self : Byte) -> Int = \"%byte_to_int\"\n\n///|\n/// Converts a byte value to a character.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted.\n///\n/// Returns the character corresponding to the byte value.\npub fn Byte::to_char(self : Byte) -> Char {\n  self.to_int().unsafe_to_char()\n}\n\n///|\n/// Converts a byte value to a 64-bit signed integer by first converting it to a\n/// 32-bit integer and then extending it to a 64-bit integer.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted.\n///\n/// Returns a 64-bit signed integer representing the same numerical value as the\n/// input byte.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::to_int64\" {\n///   let b = b'\\xFF'\n///   inspect(b.to_int64(), content=\"255\")\n/// }\n/// ```\npub fn Byte::to_int64(self : Byte) -> Int64 {\n  self.to_int().to_int64()\n}\n\n///|\n/// reinterpret the unsigned int as signed int\n/// For number within the range of 0..=2^31-1,\n/// the value is the same. For number within the range of 2^31..=2^32-1,\n/// the value is negative\npub fn UInt::reinterpret_as_int(self : UInt) -> Int = \"%u32.to_i32_reinterpret\"\n\n///|\n/// Reinterprets an unsigned 32-bit integer as a signed 32-bit integer. For\n/// values within the range of 0 to 2^31-1, the value remains the same. For\n/// values within the range of 2^31 to 2^32-1, the value becomes negative due to\n/// two's complement representation.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be reinterpreted.\n///\n/// Returns a signed 32-bit integer that has the same bit pattern as the input\n/// unsigned integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::to_int\" {\n///   let a = 42U\n///   inspect(a.reinterpret_as_int(), content=\"42\")\n///   let b = 4294967295U // maximum value of UInt (2^32 - 1)\n///   inspect(b.reinterpret_as_int(), content=\"-1\") // becomes -1 when reinterpreted as Int\n/// }\n/// ```\n///\n#deprecated(\"Use `reinterpret_as_int` instead\")\n#coverage.skip\npub fn UInt::to_int(self : UInt) -> Int = \"%u32.to_i32_reinterpret\"\n\n///|\n/// Performs addition between two unsigned 32-bit integers. If the result\n/// overflows, it wraps around according to the rules of modular arithmetic\n/// (2^32).\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand to be added.\n///\n/// Returns the sum of the two unsigned integers, wrapped around if necessary.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_add\" {\n///   let a = 42U\n///   let b = 100U\n///   inspect(a + b, content=\"142\")\n///\n///   // Demonstrate overflow behavior\n///   let max = 4294967295U // UInt::max_value\n///   inspect(max + 1U, content=\"0\")\n/// }\n/// ```\npub impl Add for UInt with op_add(self, other) = \"%u32.add\"\n\n///|\n/// Performs subtraction between two unsigned 32-bit integers. When the result\n/// would be negative, the function wraps around using modular arithmetic (2^32).\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer (minuend).\n/// * `other` : The second unsigned 32-bit integer to subtract from the first\n/// (subtrahend).\n///\n/// Returns a new unsigned 32-bit integer representing the difference between the\n/// two numbers. If the result would be negative, it wraps around to a positive\n/// number by adding 2^32 repeatedly until the result is in range.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_sub\" {\n///   let a = 5U\n///   let b = 3U\n///   inspect(a - b, content=\"2\")\n///   let c = 3U\n///   let d = 5U\n///   inspect(c - d, content=\"4294967294\") // wraps around to 2^32 - 2\n/// }\n/// ```\npub impl Sub for UInt with op_sub(self, other) = \"%u32.sub\"\n\n///|\n/// Performs multiplication between two unsigned 32-bit integers. The result\n/// wraps around if it exceeds the maximum value of `UInt`.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer operand.\n/// * `other` : The second unsigned integer operand.\n///\n/// Returns the product of the two unsigned integers. If the result exceeds the\n/// maximum value of `UInt` (4294967295), it wraps around to the corresponding\n/// value modulo 2^32.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_mul\" {\n///   let a = 3U\n///   let b = 4U\n///   inspect(a * b, content=\"12\")\n///   let max = 4294967295U\n///   inspect(max * 2U, content=\"4294967294\") // Wraps around to max * 2 % 2^32\n/// }\n/// ```\npub impl Mul for UInt with op_mul(self, other) = \"%u32.mul\"\n\n///|\n/// Performs division between two unsigned 32-bit integers. The operation follows\n/// standard unsigned integer division rules, where the result is truncated\n/// towards zero.\n///\n/// Parameters:\n///\n/// * `self` : The dividend (the number to be divided).\n/// * `other` : The divisor (the number to divide by).\n///\n/// Returns an unsigned 32-bit integer representing the quotient of the division.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_div\" {\n///   let a = 42U\n///   let b = 5U\n///   inspect(a / b, content=\"8\") // Using infix operator\n/// }\n///\n/// test \"panic UInt::op_div/division_by_zero\" {\n///   let a = 42U\n///   ignore(a / 0U) // Throws runtime error: division by zero\n/// }\n/// ```\npub impl Div for UInt with op_div(self, other) = \"%u32.div\"\n\n///|\n/// Calculates the remainder of dividing one unsigned integer by another.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned integer dividend.\n/// * `other` : The unsigned integer divisor.\n///\n/// Returns the remainder of the division operation.\n///\n/// Throws a panic if `other` is zero.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_mod\" {\n///   let a = 17U\n///   let b = 5U\n///   inspect(a % b, content=\"2\") // 17 divided by 5 gives quotient 3 and remainder 2\n///   inspect(7U % 4U, content=\"3\")\n/// }\n///\n/// test \"panic UInt::op_mod/division_by_zero\" {\n///   let a = 42U\n///   ignore(a % 0U) // Panics: division by zero\n/// }\n/// ```\npub impl Mod for UInt with op_mod(self, other) = \"%u32.mod\"\n\n///|\n/// Compares two unsigned 32-bit integers for equality.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer operand.\n/// * `other` : The second unsigned integer operand to compare with.\n///\n/// Returns `true` if both integers have the same value, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_equal\" {\n///   let a = 42U\n///   let b = 42U\n///   let c = 24U\n///   inspect(a == b, content=\"true\")\n///   inspect(a == c, content=\"false\")\n/// }\n/// ```\npub impl Eq for UInt with op_equal(self : UInt, other : UInt) -> Bool = \"%u32.eq\"\n\n///|\n/// Checks if two unsigned 32-bit integers are not equal.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer to compare.\n/// * `other` : The second unsigned integer to compare.\n///\n/// Returns `true` if the two integers are not equal, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_neq\" {\n///   let a = 42U\n///   let b = 24U\n///   inspect(a != b, content=\"true\")\n///   inspect(a != a, content=\"false\")\n/// }\n/// ```\npub fn UInt::op_neq(self : UInt, other : UInt) -> Bool = \"%u32.ne\"\n\n///|\n/// Compares two unsigned 32-bit integers and returns their relative order.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned integer to compare.\n/// * `other` : The second unsigned integer to compare against.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::compare\" {\n///   let a = 42U\n///   let b = 24U\n///   inspect(a.compare(b), content=\"1\") // 42 > 24\n///   inspect(b.compare(a), content=\"-1\") // 24 < 42\n///   inspect(a.compare(a), content=\"0\") // 42 = 42\n/// }\n/// ```\npub impl Compare for UInt with compare(self, other) = \"%u32.compare\"\n\n///|\n/// Performs a bitwise AND operation between two unsigned 32-bit integers. For\n/// each bit position, the result is 1 if the bits at that position in both\n/// operands are 1, and 0 otherwise.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand.\n///\n/// Returns an unsigned 32-bit integer representing the result of the bitwise AND\n/// operation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::land\" {\n///   let a = 0xF0F0U // 1111_0000_1111_0000\n///   let b = 0xFF00U // 1111_1111_0000_0000\n///   inspect(a & b, content=\"61440\") // 1111_0000_0000_0000 = 61440\n/// }\n/// ```\npub fn UInt::land(self : UInt, other : UInt) -> UInt = \"%u32.bitand\"\n\n///|\n/// Performs a bitwise OR operation between two unsigned 32-bit integers. For\n/// each bit position, the result is 1 if at least one of the corresponding bits\n/// in either operand is 1.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand.\n///\n/// Returns the result of the bitwise OR operation as an unsigned 32-bit integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::lor\" {\n///   let a = 0xF0F0U // Binary: 1111_0000_1111_0000\n///   let b = 0x0F0FU // Binary: 0000_1111_0000_1111\n///   inspect(a | b, content=\"65535\") // Binary: 1111_1111_1111_1111\n/// }\n/// ```\npub fn UInt::lor(self : UInt, other : UInt) -> UInt = \"%u32.bitor\"\n\n///|\n/// Performs a bitwise XOR (exclusive OR) operation between two unsigned 32-bit\n/// integers. Each bit in the result is set to 1 if the corresponding bits in the\n/// operands are different, and 0 if they are the same.\n///\n/// Parameters:\n///\n/// * `self` : The first unsigned 32-bit integer operand.\n/// * `other` : The second unsigned 32-bit integer operand.\n///\n/// Returns the result of the bitwise XOR operation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::lxor\" {\n///   let a = 0xFF00U // Binary: 1111_1111_0000_0000\n///   let b = 0x0F0FU // Binary: 0000_1111_0000_1111\n///   inspect(a ^ b, content=\"61455\") // Binary: 1111_0000_0000_1111\n/// }\n/// ```\npub fn UInt::lxor(self : UInt, other : UInt) -> UInt = \"%u32.bitxor\"\n\n///|\n/// Performs a bitwise NOT operation on an unsigned 32-bit integer. Flips all\n/// bits in the number (changes each 0 to 1 and each 1 to 0).\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer value on which to perform the bitwise\n/// NOT operation.\n///\n/// Returns a new unsigned 32-bit integer where each bit is inverted from the\n/// input value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::lnot\" {\n///   let x = 0xFF00U // Binary: 1111_1111_0000_0000\n///   inspect(x.lnot(), content=\"4294902015\") // Binary: ...0000_0000_1111_1111\n/// }\n/// ```\npub fn UInt::lnot(self : UInt) -> UInt = \"%u32.bitnot\"\n\n///|\n/// Performs a left shift operation on an unsigned 32-bit integer. Shifts each\n/// bit in the number to the left by the specified number of positions, filling\n/// the rightmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift the bits. Must be non-negative\n/// and less than 32. Values outside this range are wrapped to fit within it\n/// (i.e., `shift & 31`).\n///\n/// Returns a new `UInt` value representing the result of shifting the bits left\n/// by the specified number of positions. Each position shifted multiplies the\n/// number by 2.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::lsl\" {\n///   let x = 1U\n///   inspect(x << 3, content=\"8\") // Using the recommended operator\n///   let y = 8U\n///   inspect(y << 1, content=\"16\") // Using the recommended operator\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn UInt::lsl(self : UInt, shift : Int) -> UInt = \"%u32.shl\"\n\n///|\n/// Performs a left shift operation on an unsigned 32-bit integer. Shifts each\n/// bit in the integer to the left by the specified number of positions, filling\n/// the rightmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift left. Must be between 0 and 31\n/// inclusive. Values outside this range will be masked with `& 31`.\n///\n/// Returns a new `UInt` value containing the result of the left shift operation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::shl\" {\n///   let x = 1U\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn UInt::shl(self : UInt, shift : Int) -> UInt = \"%u32.shl\"\n\n///|\n/// Performs a logical right shift on an unsigned 32-bit integer. Each bit in the\n/// input value is shifted right by the specified number of positions, with zeros\n/// shifted in from the left. DEPRECATED: Use the `>>` operator instead.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a new `UInt` value representing the result of the logical right shift\n/// operation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::lsr\" {\n///   let x = 0xF0000000U\n///   inspect(x >> 4, content=\"251658240\") // Using the recommended operator\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn UInt::lsr(self : UInt, shift : Int) -> UInt = \"%u32.shr\"\n\n///|\n/// Performs a logical right shift operation on an unsigned 32-bit integer by a\n/// specified number of positions. All bits shifted in from the left are zeros.\n///\n/// Parameters:\n///\n/// * `number` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift right. Must be non-negative.\n///\n/// Returns a new `UInt` value that represents the result of shifting all bits in\n/// `number` to the right by `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::shr\" {\n///   let x = 0xFF000000U\n///   inspect(x >> 8, content=\"16711680\") // 0x00FF0000\n/// }\n/// ```\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn UInt::shr(self : UInt, shift : Int) -> UInt = \"%u32.shr\"\n\n///|\n/// Performs a left shift operation on an unsigned 32-bit integer. Each bit in\n/// the integer is shifted left by the specified number of positions, and zeros\n/// are filled in from the right.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift. Only the least significant 5\n/// bits are used, effectively making the shift count always between 0 and 31.\n///\n/// Returns a new unsigned 32-bit integer that is the result of shifting `self`\n/// left by `shift` positions.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_shl\" {\n///   let x = 1U\n///   inspect(x << 3, content=\"8\") // Binary: 1 -> 1000\n///   let y = 0xFFFFFFFFU\n///   inspect(y << 16, content=\"4294901760\") // All bits after position 16 are discarded\n/// }\n/// ```\npub impl Shl for UInt with op_shl(self, shift) = \"%u32.shl\"\n\n///|\n/// Performs a logical right shift operation on an unsigned 32-bit integer. The\n/// operation shifts all bits to the right by a specified number of positions,\n/// filling the leftmost positions with zeros.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be shifted.\n/// * `shift` : The number of positions to shift right. If this value is\n/// negative, the behavior is undefined. Values larger than 31 are masked with `&\n/// 31`.\n///\n/// Returns a new unsigned 32-bit integer containing the result of the right\n/// shift operation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::op_shr\" {\n///   let x = 0xFF000000U\n///   inspect(x >> 8, content=\"16711680\") // 0x00FF0000\n///   inspect(x >> 24, content=\"255\") // 0x000000FF\n/// }\n///\n/// test \"UInt::op_shr/large_shift\" {\n///   let x = 0xFF000000U\n///   inspect(x >> 32, content=\"4278190080\") // Same as x >> 0 due to masking\n/// }\n/// ```\npub impl Shr for UInt with op_shr(self, shift) = \"%u32.shr\"\n\n///|\n/// Counts the number of leading zero bits in an unsigned 32-bit integer,\n/// starting from the most significant bit.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 32-bit integer whose leading zeros are to be\n/// counted.\n///\n/// Returns the number of consecutive zeros starting from the most significant\n/// bit. For a zero value, returns 32.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::clz\" {\n///   inspect(0U.clz(), content=\"32\")\n///   inspect(1U.clz(), content=\"31\")\n///   inspect(0x80000000U.clz(), content=\"0\")\n/// }\n/// ```\npub fn UInt::clz(self : UInt) -> Int = \"%u32.clz\"\n\n///|\n/// Counts the number of trailing zero bits in an unsigned 32-bit integer,\n/// starting from the least significant bit. For a zero input, returns 32.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer whose trailing zeros are to be\n/// counted.\n///\n/// Returns the number of consecutive zeros at the least significant end of the\n/// binary representation. Returns 32 if the input is zero.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::ctz\" {\n///   let x = 24U // Binary: ...011000\n///   inspect(x.ctz(), content=\"3\") // 3 trailing zeros\n///   let y = 0U\n///   inspect(y.ctz(), content=\"32\") // All bits are zero\n/// }\n/// ```\npub fn UInt::ctz(self : UInt) -> Int = \"%u32.ctz\"\n\n///|\n/// Counts the number of 1 bits (population count) in the binary representation\n/// of an unsigned 32-bit integer.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer whose bits are to be counted.\n///\n/// Returns an integer representing the count of set bits (1s) in the binary\n/// representation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::popcnt\" {\n///   let x = 0xF0F0U // Binary: 1111 0000 1111 0000\n///   inspect(x.popcnt(), content=\"8\") // Has 8 bits set to 1\n/// }\n/// ```\npub fn UInt::popcnt(self : UInt) -> Int = \"%u32.popcnt\"\n\n///|\n/// Converts an unsigned 32-bit integer to an unsigned 64-bit integer by\n/// zero-extending it. The resulting value preserves the original number's\n/// magnitude while using 64 bits to represent it.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer (`UInt`) to be converted.\n///\n/// Returns an unsigned 64-bit integer (`UInt64`) representing the same numerical\n/// value as the input.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::to_uint64\" {\n///   let n = 42U\n///   inspect(n.to_uint64(), content=\"42\")\n///   let max = 4294967295U // Maximum value of UInt\n///   inspect(max.to_uint64(), content=\"4294967295\")\n/// }\n/// ```\npub fn UInt::to_uint64(self : UInt) -> UInt64 {\n  UInt64::extend_uint(self)\n}\n\n///|\n/// Converts an unsigned 32-bit integer to a byte by taking its least significant\n/// 8 bits. Any bits beyond the first 8 bits are truncated.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be converted. Only the least\n/// significant 8 bits will be used.\n///\n/// Returns a byte containing the least significant 8 bits of the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::to_byte\" {\n///   let n = 258U // In binary: 100000010\n///   inspect(n.to_byte(), content=\"b'\\\\x02'\") // Only keeps 00000010\n///   let big = 4294967295U // Maximum value of UInt\n///   inspect(big.to_byte(), content=\"b'\\\\xFF'\") // Only keeps 11111111\n/// }\n/// ```\npub fn UInt::to_byte(self : UInt) -> Byte {\n  self.reinterpret_as_int().to_byte()\n}\n\n///|\n/// Converts an unsigned 32-bit integer to a double-precision floating-point\n/// number. Since the range of unsigned 32-bit integers is smaller than what can\n/// be precisely represented by a double-precision floating-point number, this\n/// conversion is guaranteed to be exact.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 32-bit integer to be converted.\n///\n/// Returns a double-precision floating-point number that exactly represents the\n/// input value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::convert_uint\" {\n///   let n = 42U\n///   inspect(n.to_double(), content=\"42\")\n///   let max = 4294967295U // maximum value of UInt\n///   inspect(max.to_double(), content=\"4294967295\")\n/// }\n/// ```\npub fn UInt::to_double(self : UInt) -> Double = \"%u32.to_f64\"\n\n///|\n/// Performs unary negation on a 32-bit floating-point number. Returns the\n/// arithmetic inverse of the operand.\n///\n/// Parameters:\n///\n/// * `self` : The floating-point number to negate.\n///\n/// Returns a new floating-point number with the same magnitude but opposite sign\n/// as the input. Special cases:\n///\n/// * Negating NaN returns NaN\n/// * Negating +0.0 returns -0.0\n/// * Negating -0.0 returns +0.0\n/// * Negating +Infinity returns -Infinity\n/// * Negating -Infinity returns +Infinity\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::op_neg\" {\n///   let f = 3.14.to_float()\n///   inspect((-f).to_double(), content=\"-3.140000104904175\")\n///   let zero = 0.0.to_float()\n///   inspect((-zero).to_double(), content=\"0\")\n/// }\n/// ```\npub impl Neg for Float with op_neg(self) = \"%f32.neg\"\n\n///|\n/// Performs addition between two single-precision floating-point numbers.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point operand.\n/// * `other` : The second floating-point operand to be added to the first\n/// operand.\n///\n/// Returns a single-precision floating-point number representing the sum of the\n/// two operands.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::op_add\" {\n///   let a = 3.14.to_float()\n///   let b = 2.86.to_float()\n///   let sum = a + b\n///   inspect(sum.to_double(), content=\"6\")\n/// }\n/// ```\npub impl Add for Float with op_add(self, other) = \"%f32.add\"\n\n///|\n/// Performs subtraction between two single-precision floating-point numbers.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number (minuend).\n/// * `other` : The second floating-point number (subtrahend).\n///\n/// Returns a new floating-point number representing the difference between\n/// `self` and `other`.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::op_sub\" {\n///   let x = 3.14.to_float()\n///   let y = 1.0.to_float()\n///   let result = x - y\n///   inspect(result.to_double(), content=\"2.140000104904175\")\n/// }\n/// ```\npub impl Sub for Float with op_sub(self, other) = \"%f32.sub\"\n\n///|\n/// Performs multiplication between two single-precision floating-point numbers\n/// according to IEEE 754 rules.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number operand.\n/// * `other` : The second floating-point number operand to multiply with the\n/// first.\n///\n/// Returns a single-precision floating-point number that is the product of the\n/// two operands.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::op_mul\" {\n///   let x = Int::to_float(2)\n///   let y = Int::to_float(3)\n///   let z = x * y\n///   inspect(z.to_double(), content=\"6\")\n/// }\n/// ```\npub impl Mul for Float with op_mul(self, other) = \"%f32.mul\"\n\n///|\n/// Performs division between two 32-bit floating-point numbers according to IEEE\n/// 754 rules.\n///\n/// Parameters:\n///\n/// * `self` : The dividend floating-point number.\n/// * `other` : The divisor floating-point number.\n///\n/// Returns a new floating-point number representing the quotient of the\n/// division. Special cases follow IEEE 754 rules:\n///\n/// * Division by zero returns infinity (with the appropriate sign)\n/// * Division of zero by zero returns NaN\n/// * Division of infinity by infinity returns NaN\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::op_div\" {\n///   let a = 6.0.to_float()\n///   let b = 2.0.to_float()\n///   let result = (a / b).to_double()\n///   inspect(result, content=\"3\")\n///   inspect((0.0.to_float() / 0.0.to_float()).to_double(), content=\"NaN\")\n/// }\n/// ```\npub impl Div for Float with op_div(self, other) = \"%f32.div\"\n\n///|\n/// Calculates the square root of a floating-point number. For non-negative\n/// numbers, returns the principal square root. For negative numbers or NaN,\n/// returns NaN.\n///\n/// Parameters:\n///\n/// * `self` : The floating-point number whose square root is to be calculated.\n///\n/// Returns a 32-bit floating-point number representing the square root of the\n/// input value:\n///\n/// * For a positive number, returns its principal square root\n/// * For zero (positive or negative), returns zero with the same sign\n/// * For NaN or negative numbers, returns NaN\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::sqrt\" {\n///   let x = 16.0.to_float()\n///   let root = x.sqrt()\n///   inspect(root.to_double(), content=\"4\")\n///   let neg = (-4.0).to_float()\n///   let neg_root = neg.sqrt()\n///   inspect(neg_root.to_double(), content=\"NaN\")\n/// }\n/// ```\npub fn Float::sqrt(self : Float) -> Float = \"%f32.sqrt\"\n\n///|\n/// Tests two floating-point numbers for equality. Follows IEEE 754 equality\n/// comparison rules, where NaN values are not equal to any value, including\n/// themselves.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number to compare.\n/// * `other` : The second floating-point number to compare.\n///\n/// Returns `true` if both numbers are equal, `false` otherwise. Note that `-0.0`\n/// and `+0.0` are considered equal.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::op_equal\" {\n///   let x = 3.14\n///   let y = 3.14\n///   let z = 0.0 / 0.0 // NaN\n///   inspect(x == y, content=\"true\")\n///   inspect(z == z, content=\"false\") // NaN is not equal to itself\n/// }\n/// ```\npub impl Eq for Float with op_equal(self : Float, other : Float) -> Bool = \"%f32.eq\"\n\n///|\n/// Tests if two single-precision floating-point numbers are not equal. This\n/// operation follows IEEE 754 rules for floating-point comparison, including\n/// special handling of NaN values.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number to compare.\n/// * `other` : The second floating-point number to compare.\n///\n/// Returns `true` if the two floating-point numbers are not equal, `false` if\n/// they are equal. Note that if either operand is NaN, the result is `true`.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::op_neq\" {\n///   let x = 1.0.to_float()\n///   let y = 2.0.to_float()\n///   let nan = (0.0 / 0.0).to_float()\n///   inspect(x != y, content=\"true\")\n///   inspect(x != x, content=\"false\")\n///   inspect(nan != nan, content=\"true\") // NaN is not equal to itself\n/// }\n/// ```\npub fn Float::op_neq(self : Float, other : Float) -> Bool = \"%f32.ne\"\n\n///|\n/// Compares two 32-bit floating-point numbers and returns their relative order.\n///\n/// Parameters:\n///\n/// * `self` : The first floating-point number to compare.\n/// * `other` : The second floating-point number to compare.\n///\n/// Returns an integer indicating the relative order:\n///\n/// * A negative value if `self` is less than `other`\n/// * Zero if `self` equals `other`\n/// * A positive value if `self` is greater than `other`\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::compare\" {\n///   let a = 3.14\n///   let b = 2.718\n///   inspect(a.compare(b), content=\"1\") // 3.14 > 2.718\n///   inspect(b.compare(a), content=\"-1\") // 2.718 < 3.14\n///   inspect(a.compare(a), content=\"0\") // 3.14 = 3.14\n/// }\n/// ```\npub impl Compare for Float with compare(self, other) = \"%f32.compare\"\n\n///|\n/// Converts a 32-bit floating-point number to a double-precision (64-bit)\n/// floating-point number.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit floating-point number to be converted.\n///\n/// Returns a double-precision floating-point number that preserves the exact\n/// value of the input. Since double-precision has more bits than\n/// single-precision, this conversion is always exact and never loses precision.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::to_double\" {\n///   let f = 3.14.to_float()\n///   inspect(f.to_double(), content=\"3.140000104904175\")\n/// }\n/// ```\npub fn Float::to_double(self : Float) -> Double = \"%f32.to_f64\"\n\n///|\n/// Reinterprets the bits of a 32-bit floating-point number as a 32-bit signed\n/// integer without performing any numeric conversion. The bit pattern is\n/// preserved exactly, only the type interpretation changes.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit floating-point number whose bits are to be\n/// reinterpreted.\n///\n/// Returns a 32-bit signed integer that has the same bit pattern as the input\n/// floating-point number.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::reinterpret_as_int\" {\n///   let f = 1.0.to_float()\n///   // IEEE 754 representation of 1.0 is 0x3F800000\n///   inspect(f.reinterpret_as_int(), content=\"1065353216\")\n/// }\n/// ```\npub fn Float::reinterpret_as_int(self : Float) -> Int = \"%f32.to_i32_reinterpret\"\n\n///|\n/// Reinterprets the bits of a 32-bit floating-point number as an unsigned 32-bit\n/// integer without performing any numeric conversion. Preserves the exact bit\n/// pattern of the input value, only changing how these bits are interpreted.\n///\n/// Parameters:\n///\n/// * `float` : The 32-bit floating-point number whose bits are to be\n/// reinterpreted.\n///\n/// Returns an unsigned 32-bit integer (`UInt`) that has the same bit pattern as\n/// the input floating-point number.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Float::reinterpret_as_uint\" {\n///   let x : Float = 1.0\n///   inspect(x.reinterpret_as_uint(), content=\"1065353216\") // Decimal representation of 0x3F800000\n/// }\n/// ```\npub fn Float::reinterpret_as_uint(self : Float) -> UInt = \"%f32.to_i32_reinterpret\"\n\n///|\n/// Converts an integer to a 32-bit floating-point number. The conversion is\n/// exact for small integers, but may lose precision for large integers due to\n/// the limited precision of the floating-point format.\n///\n/// Parameters:\n///\n/// * `number` : The integer value to be converted to a floating-point number.\n///\n/// Returns a 32-bit floating-point number representing the same value as the\n/// input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::to_float\" {\n///   let n = 42\n///   let f = n.to_float()\n///   // Convert back to double for comparison since Float doesn't implement Show\n///   inspect(f.to_double(), content=\"42\")\n/// }\n/// ```\npub fn Int::to_float(self : Int) -> Float = \"%i32.to_f32\"\n\n///|\n/// Reinterprets the bits of a 32-bit integer as a single-precision\n/// floating-point number according to IEEE 754 standard. The bit pattern of the\n/// input is preserved, only the type interpretation changes.\n///\n/// Parameters:\n///\n/// * `self` : The 32-bit integer whose bits are to be reinterpreted as a\n/// single-precision floating-point number.\n///\n/// Returns a 32-bit floating-point number (`Float`) that has the same bit\n/// pattern as the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::reinterpret_as_float\" {\n///   // 0x3F800000 represents 1.0 in IEEE 754 single-precision format\n///   let n = 1065353216 // 0x3F800000\n///   inspect(n.reinterpret_as_float().to_double(), content=\"1\")\n/// }\n/// ```\npub fn Int::reinterpret_as_float(self : Int) -> Float = \"%i32.to_f32_reinterpret\"\n\n///|\n/// Reinterprets the bits of an unsigned 32-bit integer as a single-precision\n/// floating-point number (IEEE 754). The bit pattern is preserved exactly, only\n/// the type interpretation changes.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer whose bits are to be reinterpreted as\n/// a single-precision floating-point number.\n///\n/// Returns a single-precision floating-point number (`Float`) whose bit pattern\n/// is identical to the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::reinterpret_as_float\" {\n///   let n = 0x3F800000U // Bit pattern for 1.0f\n///   inspect(n.reinterpret_as_float().to_double(), content=\"1\")\n/// }\n/// ```\npub fn UInt::reinterpret_as_float(self : UInt) -> Float = \"%i32.to_f32_reinterpret\"\n\n///|\n/// Converts a byte value to a 32-bit floating-point number (IEEE 754\n/// single-precision format). The byte value is treated as an unsigned 8-bit\n/// integer during the conversion.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted to a float.\n///\n/// Returns a 32-bit floating-point number representing the byte value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::to_float\" {\n///   let b = b'\\xFF' // 255 in decimal\n///   let f = b.to_float()\n///   // Convert to double for comparison since Float doesn't implement Show\n///   inspect(f.to_double(), content=\"255\")\n/// }\n/// ```\npub fn Byte::to_float(self : Byte) -> Float = \"%byte.to_f32\"\n\n///| TODO: use intrinsics implement this\npub fn Byte::to_double(self : Byte) -> Double {\n  self.to_int().to_double()\n}\n\n///|\n/// Converts a double-precision floating-point number to a single-precision\n/// floating-point number. The conversion may result in a loss of precision due\n/// to the reduced number of bits available in the single-precision format.\n///\n/// Parameters:\n///\n/// * `value` : The double-precision floating-point number to be converted.\n///\n/// Returns a single-precision floating-point number that represents the closest\n/// possible value to the input double-precision number.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Double::to_float\" {\n///   let d = 3.14159265359\n///   inspect(d.to_float().to_double(), content=\"3.1415927410125732\") // Note the loss of precision\n/// }\n/// ```\npub fn Double::to_float(self : Double) -> Float = \"%f64.to_f32\"\n\n///|\n/// Converts an unsigned 32-bit integer to a single-precision floating-point\n/// number. Due to the limited precision of the 32-bit floating-point format,\n/// values above 16777216 (2^24) may lose precision during conversion.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 32-bit integer to be converted.\n///\n/// Returns a 32-bit floating-point number that represents the same numerical\n/// value as the input unsigned integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::to_float\" {\n///   let n = 42U\n///   inspect(n.to_float().to_double(), content=\"42\")\n///   let big = 16777216U // 2^24\n///   inspect(big.to_float().to_double(), content=\"16777216\") // Last precisely representable integer\n/// }\n/// ```\npub fn UInt::to_float(self : UInt) -> Float = \"%u32.to_f32\"\n\n///|\n/// Converts a 16-bit signed integer to a 32-bit signed integer by sign\n/// extension.\n///\n/// Parameters:\n///\n/// * `value` : The 16-bit signed integer to be converted.\n///\n/// Returns a 32-bit signed integer that has the same value as the input.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int16::to_int\" {\n///   let n = Int::to_int16(42)\n///   inspect(n.to_int(), content=\"42\")\n///   let neg = Int::to_int16(-42)\n///   inspect(neg.to_int(), content=\"-42\")\n/// }\n/// ```\npub fn Int16::to_int(self : Int16) -> Int = \"%i16_to_i32\"\n\n///|\n/// Converts a 16-bit signed integer to a byte by truncating its value to fit\n/// within the byte range (0 to 255). Only the least significant 8 bits of the\n/// integer are retained.\n///\n/// Parameters:\n///\n/// * `value` : The 16-bit signed integer to be converted to a byte.\n///\n/// Returns a byte containing the least significant 8 bits of the input value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int16::to_byte\" {\n///   let x = Int::to_int16(258) // In binary: 0000_0001_0000_0010\n///   inspect(x.to_byte(), content=\"b'\\\\x02'\") // Only keeps 0000_0010\n/// }\n/// ```\npub fn Int16::to_byte(self : Int16) -> Byte = \"%i16_to_byte\"\n\n///|\npub fn Int::to_int16(self : Int) -> Int16 = \"%i32_to_i16\"\n\n///|\n/// Converts a byte value to a 16-bit signed integer. The byte value is\n/// sign-extended to 16 bits during the conversion.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted to an `Int16`.\n///\n/// Returns a 16-bit signed integer representing the same value as the input\n/// byte.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::to_int16\" {\n///   let b = b'\\xFF' // -1 as a signed byte\n///   inspect(b.to_int16(), content=\"255\") // Sign is preserved\n///   let p = b'\\x7F' // 127 as a signed byte\n///   inspect(p.to_int16(), content=\"127\")\n/// }\n/// ```\npub fn Byte::to_int16(self : Byte) -> Int16 = \"%byte_to_i16\"\n\n///|\n/// Converts an unsigned 16-bit integer to a 32-bit signed integer. The value is\n/// zero-extended to fill the higher bits.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned 16-bit integer to be converted.\n///\n/// Returns a 32-bit signed integer. Since the input value is always non-negative\n/// and less than 65536, the conversion never results in overflow.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt16::to_int\" {\n///   let x = Int::to_uint16(42)\n///   inspect(x.to_int(), content=\"42\")\n///   let max = Int::to_uint16(65535) // maximum value of UInt16\n///   inspect(max.to_int(), content=\"65535\")\n/// }\n/// ```\npub fn UInt16::to_int(self : UInt16) -> Int = \"%u16_to_i32\"\n\n///|\n/// Converts a 16-bit unsigned integer to an 8-bit byte by truncating the higher\n/// bits.\n///\n/// Parameters:\n///\n/// * `value` : The 16-bit unsigned integer to be converted.\n///\n/// Returns a byte containing the least significant 8 bits of the input value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt16::to_byte\" {\n///   let x = Int::to_uint16(258) // Binary: 0000_0001_0000_0010\n///   inspect(x.to_byte(), content=\"b'\\\\x02'\") // Only keeps 0000_0010\n/// }\n/// ```\npub fn UInt16::to_byte(self : UInt16) -> Byte = \"%u16_to_byte\"\n\n///|\n/// Converts a 32-bit signed integer to a 16-bit unsigned integer by truncating\n/// its value to fit within the range of 0 to 65535.\n///\n/// Parameters:\n///\n/// * `integer` : The 32-bit signed integer to be converted. Values outside the\n/// range of UInt16 will be truncated to fit.\n///\n/// Returns a 16-bit unsigned integer containing the lower 16 bits of the input\n/// value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::to_uint16\" {\n///   let n = 42\n///   inspect(n.to_uint16(), content=\"42\")\n///   let neg = -1\n///   inspect(neg.to_uint16(), content=\"65535\") // -1 becomes max value of UInt16\n///   let large = 65536\n///   inspect(large.to_uint16(), content=\"0\") // Values wrap around\n/// }\n/// ```\npub fn Int::to_uint16(self : Int) -> UInt16 = \"%i32_to_u16\"\n\n///|\n/// Converts a byte value to a 16-bit unsigned integer by zero-extending it.\n///\n/// Parameters:\n///\n/// * `byte` : The byte value to be converted.\n///\n/// Returns a 16-bit unsigned integer (`UInt16`) representing the same value as\n/// the input byte.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::to_uint16\" {\n///   let b = b'\\xFF' // byte with value 255\n///   inspect(b.to_uint16(), content=\"255\")\n///   let zero = b'\\x00'\n///   inspect(zero.to_uint16(), content=\"0\")\n/// }\n/// ```\npub fn Byte::to_uint16(self : Byte) -> UInt16 = \"%byte_to_u16\"\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\npub impl Show for Unit with output(_self, logger) {\n  logger.write_string(\"()\")\n}\n\n///|\npub impl Show for Bool with output(self, logger) {\n  if self {\n    logger.write_string(\"true\")\n  } else {\n    logger.write_string(\"false\")\n  }\n}\n\n///|\npub impl Show for Int with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for Int64 with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for UInt with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for UInt64 with output(self, logger) {\n  self.output(logger)\n}\n\n///|\npub impl Show for Byte with output(self, logger) {\n  logger.write_string(self.to_string())\n}\n\n///|\npub impl Show for Int16 with output(self, logger) {\n  logger.write_string(self.to_string())\n}\n\n///|\npub impl Show for UInt16 with output(self, logger) {\n  self.to_int().output(logger)\n}\n\n///|\nfn to_hex_digit(i : Int) -> Char {\n  if i < 10 {\n    (i + '0').unsafe_to_char()\n  } else {\n    (i + 'a' - 10).unsafe_to_char()\n  }\n}\n\n///|\ntest \"to_hex_digit\" {\n  for i in 0..<10 {\n    guard to_hex_digit(i) == ('0'.to_int() + i).unsafe_to_char() else {\n      fail(\"to_hex_digit(\\{i}) does not match\")\n    }\n\n  }\n  for i in 10..<16 {\n    guard to_hex_digit(i) == ('a'.to_int() + (i - 10)).unsafe_to_char() else {\n      fail(\"to_hex_digit(\\{i}) does not match\")\n    }\n\n  }\n}\n\n///|\npub impl Show for Bytes with output(self, logger) {\n  logger.write_string(\"b\\\"\")\n  for b in self {\n    let byte = b.to_int()\n    logger\n    ..write_string(\"\\\\x\")\n    ..write_char(to_hex_digit(byte / 16))\n    ..write_char(to_hex_digit(byte % 16))\n  }\n  logger.write_string(\"\\\"\")\n}\n\n///|\npub impl Show for String with output(self, logger) {\n  logger.write_char('\"')\n  let mut segment_start = 0\n  fn flush_segment(i : Int) {\n    if i > segment_start {\n      logger.write_substring(self, segment_start, i - segment_start)\n    }\n    segment_start = i + 1\n  }\n\n  for i in 0..<self.length() {\n    match self.unsafe_charcode_at(i) {\n      '\"' | '\\\\' as c => {\n        flush_segment(i)\n        logger..write_char('\\\\')..write_char(c.unsafe_to_char())\n      }\n      '\\n' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\n\")\n      }\n      '\\r' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\r\")\n      }\n      '\\b' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\b\")\n      }\n      '\\t' => {\n        flush_segment(i)\n        logger.write_string(\"\\\\t\")\n      }\n      code =>\n        if code < ' ' {\n          flush_segment(i)\n          logger\n          ..write_string(\"\\\\u{\")\n          ..write_char(to_hex_digit(code / 16))\n          ..write_char(to_hex_digit(code % 16))\n          ..write_char('}')\n        }\n    }\n  }\n  flush_segment(self.length())\n  logger.write_char('\"')\n}\n\n///|\n/// This is different from `Show::output`,\n/// here it returns the original string without escaping. \n/// The rationale is in string interpolation,\n/// we want to show the original string, not the escaped one.\n/// # Examples\n/// \n/// ```\n/// let str = \"Hello \\n\"\n/// inspect(str.to_string(), content=\"Hello \\n\")\n/// inspect(str.escape(), content=\"\\\"Hello \\\\n\\\"\")\n/// ```\npub impl Show for String with to_string(self) {\n  self\n}\n\n///|\npub impl Show for Failure with output(self, logger) {\n  let Failure(msg) = self\n  \"Failure(\\{msg})\".output(logger)\n}\n\n///|\n/// Returns a valid MoonBit string literal representation of a string,\n/// add quotes and escape special characters.\npub fn String::escape(self : String) -> String {\n  let buf = StringBuilder::new()\n  Show::output(self, buf)\n  buf.to_string()\n}\n\n///|\npub impl[X : Show] Show for X? with output(self, logger) {\n  match self {\n    None => logger.write_string(\"None\")\n    Some(arg) =>\n      logger..write_string(\"Some(\")..write_object(arg)..write_string(\")\")\n  }\n}\n\n///|\npub impl[T : Show, E : Show] Show for Result[T, E] with output(self, logger) {\n  match self {\n    Ok(x) => logger..write_string(\"Ok(\")..write_object(x)..write_string(\")\")\n    Err(e) => logger..write_string(\"Err(\")..write_object(e)..write_string(\")\")\n  }\n}\n\n///|\npub impl[X : Show] Show for Ref[X] with output(self, logger) {\n  logger..write_string(\"{val: \")..write_object(self.val)..write_string(\"}\")\n}\n\n///|\npub impl[X : Show] Show for FixedArray[X] with output(self, logger) {\n  logger.write_iter(self.iter())\n}\n\n///|\npub impl[X : Show] Show for Array[X] with output(self, logger) {\n  logger.write_iter(self.iter())\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn[T : Show] debug_string(t : T) -> String {\n  let buf = StringBuilder::new(size_hint=50)\n  t.output(buf)\n  buf.to_string()\n}\n\n///|\n/// Asserts that two values are equal. If they are not equal, raises a failure\n/// with a message containing the source location and the values being compared.\n///\n/// Parameters:\n///\n/// * `a` : First value to compare.\n/// * `b` : Second value to compare.\n/// * `loc` : Source location information to include in failure messages. This is\n/// usually automatically provided by the compiler.\n///\n/// Throws a `Failure` error if the values are not equal, with a message showing\n/// the location of the failing assertion and the actual values that were\n/// compared.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"assert_eq\" {\n///   assert_eq(1, 1)\n///   assert_eq(\"hello\", \"hello\")\n/// }\n///\n/// test \"panic assert_eq/not_equal\" {\n///   ignore(assert_eq(1, 2)) // Will fail with message showing values and location\n/// }\n/// ```\n#coverage.skip\npub fn[T : Eq + Show] assert_eq(a : T, b : T, loc~ : SourceLoc = _) -> Unit! {\n  if a != b {\n    fail(\"`\\{a} != \\{b}`\", loc~)\n  }\n}\n\n///|\n/// Asserts that two values of the same type are not equal. If the values are\n/// equal, raises a failure with a detailed error message including the source\n/// location and string representation of both values.\n///\n/// Parameters:\n///\n/// * `first` : The first value to compare.\n/// * `second` : The second value to compare.\n/// * `location` : Source location information for error reporting. Defaults to\n/// the current location.\n///\n/// Throws a `Failure` error if the values are equal. The error message includes\n/// the source location and string representations of both values.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"assert_not_eq\" {\n///   assert_not_eq(1, 2) // Passes\n/// }\n///\n/// test \"panic assert_not_eq/equal_values\" {\n///   ignore(assert_not_eq(42, 42)) // Fails with detailed error message\n/// }\n/// ```\n#coverage.skip\npub fn[T : Eq + Show] assert_not_eq(\n  a : T,\n  b : T,\n  loc~ : SourceLoc = _\n) -> Unit! {\n  if not(a != b) {\n    let a = debug_string(a)\n    let b = debug_string(b)\n    fail(\"`\\{a} == \\{b}`\", loc~)\n  }\n}\n\n///|\n/// Asserts that the given boolean value is true. Throws an error with source\n/// location information if the assertion fails.\n///\n/// Parameters:\n///\n/// * `condition` : The boolean value to be checked.\n/// * `location` : The source location where the assertion is made. Defaults to\n/// the current location.\n///\n/// Throws a `Failure` error with a descriptive message including the source\n/// location if the condition is false.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"assert_true\" {\n///   assert_true(true)\n/// }\n///\n/// test \"panic assert_true/false_condition\" {\n///   ignore(assert_true(false)) // Throws Failure\n/// }\n/// ```\n#coverage.skip\npub fn assert_true(x : Bool, loc~ : SourceLoc = _) -> Unit! {\n  if not(x) {\n    fail(\"`\\{x}` is not true\", loc~)\n  }\n}\n\n///|\n/// Tests whether a boolean condition is false, throwing an error if the\n/// condition is true.\n///\n/// Parameters:\n///\n/// * `condition` : The boolean condition to test.\n/// * `location` : The source location where the assertion is made. Used in error\n/// messages.\n///\n/// Throws a `Failure` error if the condition is true. The error message includes\n/// the source location and the value that was expected to be false.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"assert_false\" {\n///   assert_false(false)\n///   assert_false(1 > 2)\n/// }\n///\n/// test \"panic assert_false/with_true\" {\n///   assert_false(true) // This will fail with an error message\n/// }\n/// ```\n#coverage.skip\npub fn assert_false(x : Bool, loc~ : SourceLoc = _) -> Unit! {\n  if x {\n    let x = debug_string(x)\n    fail(\"`\\{x}` is not false\", loc~)\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Represents a generic test failure type used primarily in test assertions and\n/// validations.\n///\n/// Since this is a type definition using `type!` syntax, it creates an error\n/// type `Failure` that wraps a `String` value containing the failure message.\n///\n/// Parameters:\n///\n/// * `message` : A string describing the nature of the failure.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Failure\" {\n///   let err : Failure = Failure(\"Test assertion failed\")\n///   match err {\n///     Failure(msg) => inspect(msg, content=\"Test assertion failed\")\n///   }\n/// }\n/// ```\npub(all) type! Failure String\n\n///|\n/// Raises a `Failure` error with a given message and source location.\n///\n/// Parameters:\n///\n/// * `message` : A string containing the error message to be included in the\n/// failure.\n/// * `location` : The source code location where the failure occurred.\n/// Automatically provided by the compiler when not specified.\n///\n/// Returns a value of type `T` wrapped in a `Failure` error type.\n///\n/// Throws an error of type `Failure` with a message that includes both the\n/// source location and the provided error message.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"panic fail\" {\n///   fail(\"Something went wrong\")\n/// }\n/// ```\npub fn[T] fail(msg : String, loc~ : SourceLoc = _) -> T!Failure {\n  raise Failure(\"FAILED: \\{loc} \\{msg}\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nconst GPRIME1 : UInt = 0x9E3779B1\n\n///|\nconst GPRIMES2 : UInt = 0x85EBCA77\n\n///|\nconst GPRIME3 : UInt = 0xC2B2AE3D\n\n///|\nconst GPRIME4 : UInt = 0x27D4EB2F\n\n///|\nconst GPRIME5 : UInt = 0x165667B1\n\n///|\n/// Represents a hasher that implements the xxHash32 algorithm. The hasher\n/// maintains a mutable accumulator that is updated with each value added to the\n/// hash computation.\n///\n/// This struct provides methods for combining different types of values into a\n/// single hash value, making it suitable for implementing hash functions for\n/// custom types.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher/basic\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_int(42)\n///   hasher.combine_string(\"hello\")\n///   inspect(hasher.finalize(), content=\"860601284\")\n/// }\n/// ```\nstruct Hasher {\n  mut acc : UInt\n}\n\n///|\n/// Creates a new hasher with an optional seed value.\n///\n/// Parameters:\n///\n/// * `seed` : An integer value used to initialize the hasher's internal state.\n/// Defaults to 0.\n///\n/// Returns a new `Hasher` instance initialized with the given seed value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::new\" {\n///   let h1 = Hasher::new() // Create a hasher with default seed\n///   let h2 = Hasher::new(seed=42) // Create a hasher with custom seed\n///   let x = 123\n///   h1.combine(x)\n///   h2.combine(x)\n///   inspect(h1.finalize() != h2.finalize(), content=\"true\") // Different seeds produce different hashes\n/// }\n/// ```\npub fn Hasher::new(seed~ : Int = 0) -> Hasher {\n  { acc: seed.reinterpret_as_uint() + GPRIME5 }\n}\n\n///|\n/// Combines a hashable value with the current state of the hasher. This is\n/// typically used to incrementally build a hash value from multiple components.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The value to be combined with the current hash state. Must\n/// implement the `Hash` trait.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine\" {\n///   let hasher = Hasher::new()\n///   hasher.combine(42)\n///   hasher.combine(\"hello\")\n///   inspect(hasher.finalize(), content=\"860601284\")\n/// }\n/// ```\npub fn[T : Hash] Hasher::combine(self : Hasher, value : T) -> Unit {\n  value.hash_combine(self)\n}\n\n///|\n/// Combines the unit value (i.e., `()`) into the hasher's internal state by\n/// hashing it as an integer value of 0.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to combine the unit value into.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_unit\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_unit()\n///   inspect(hasher.finalize(), content=\"148298089\")\n/// }\n/// ```\npub fn Hasher::combine_unit(self : Hasher) -> Unit {\n  self.combine_uint(0)\n}\n\n///|\n/// Combines a boolean value into the current hash state. The boolean value is\n/// converted to an integer (1 for true, 0 for false) before being combined with\n/// the hash.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The boolean value to be combined into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_bool\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_bool(true)\n///   inspect(hasher.finalize(), content=\"-205818221\")\n/// }\n/// ```\npub fn Hasher::combine_bool(self : Hasher, value : Bool) -> Unit {\n  self.combine_uint(if value { 1 } else { 0 })\n}\n\n///|\n/// Combines a 32-bit integer value into the hasher's internal state. The value\n/// is processed\n/// as a 4-byte sequence, and the internal accumulator is updated accordingly.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : A 32-bit integer value to be incorporated into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_int\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_int(42)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// }\n/// ```\npub fn Hasher::combine_int(self : Hasher, value : Int) -> Unit {\n  self.combine_uint(value.reinterpret_as_uint())\n}\n\n///|\n/// Combines a 64-bit integer value into the hash state by splitting it into two\n/// 32-bit parts and processing them separately. This method is used internally\n/// by the hash implementation to incorporate 64-bit integers into the hash\n/// computation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object whose internal state will be updated.\n/// * `value` : The 64-bit integer value to be incorporated into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_int64\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_int64(42L)\n///   inspect(hasher.finalize(), content=\"-1962516083\")\n/// }\n/// ```\npub fn Hasher::combine_int64(self : Hasher, value : Int64) -> Unit {\n  self.acc += 8\n  self.consume4(value.reinterpret_as_uint64().to_uint())\n  self.consume4((value.reinterpret_as_uint64() >> 32).to_uint())\n}\n\n///|\n/// Combines an unsigned 32-bit integer into the hasher's internal state by\n/// reinterpreting it as a signed integer and incorporating it into the hash\n/// computation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to update.\n/// * `value` : The unsigned 32-bit integer value to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_uint\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_uint(42U)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// }\n/// ```\npub fn Hasher::combine_uint(self : Hasher, value : UInt) -> Unit {\n  self.acc += 4\n  self.consume4(value)\n}\n\n///|\n/// Combines a 64-bit unsigned integer into the hasher's internal state. Useful\n/// for hashing `UInt64` values as part of a larger composite structure.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The 64-bit unsigned integer value to be incorporated into the\n/// hash.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_uint64\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_uint64(42UL)\n///   inspect(hasher.finalize(), content=\"-1962516083\")\n/// }\n/// ```\npub fn Hasher::combine_uint64(self : Hasher, value : UInt64) -> Unit {\n  self.combine_int64(value.reinterpret_as_int64())\n}\n\n///|\n/// Combines a double-precision floating-point number into the hasher's internal\n/// state by reinterpreting its bits as a 64-bit integer. Maintains consistent\n/// hashing behavior regardless of the floating-point value's representation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher to combine the value into.\n/// * `value` : The double-precision floating-point number to be combined into\n/// the hash.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_double\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_double(3.14)\n///   inspect(hasher.finalize(), content=\"-428265677\")\n/// }\n/// ```\npub fn Hasher::combine_double(self : Hasher, value : Double) -> Unit {\n  self.combine_int64(value.reinterpret_as_int64())\n}\n\n///|\n/// Combines a 32-bit floating-point value into the hasher by reinterpreting its\n/// bit pattern as a 32-bit integer. The operation maintains the same hash result\n/// regardless of the floating-point value's representation.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object that maintains the internal state of the\n/// hashing operation.\n/// * `value` : The 32-bit floating-point value to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_float\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_float(3.14)\n///   inspect(hasher.finalize(), content=\"635116317\") // Hash of the bits of 3.14\n/// }\n/// ```\npub fn Hasher::combine_float(self : Hasher, value : Float) -> Unit {\n  self.combine_uint(value.reinterpret_as_uint())\n}\n\n///|\n/// Combines a byte value into the hash state.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to update with the byte value.\n/// * `byte` : The byte value to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_byte\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_byte(b'\\xFF')\n///   inspect(hasher.finalize(), content=\"1955036104\")\n/// }\n/// ```\npub fn Hasher::combine_byte(self : Hasher, value : Byte) -> Unit {\n  self.consume1(value)\n}\n\n///|\n/// Combines a byte sequence into the hasher's internal state using xxHash32\n/// algorithm. Processes the input bytes in chunks of 4 bytes for efficiency,\n/// with remaining bytes processed individually.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object to update with the byte sequence.\n/// * `bytes` : The byte sequence to be combined into the hash.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_bytes\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_bytes(b\"\\xFF\\x00\\xFF\\x00\")\n///   inspect(hasher.finalize(), content=\"-686861102\")\n/// }\n/// ```\npub fn Hasher::combine_bytes(self : Hasher, value : Bytes) -> Unit {\n  let mut remain = value.length()\n  let mut cur = 0\n  while remain >= 4 {\n    self.consume4(endian32(value, cur))\n    cur += 4\n    remain -= 4\n  }\n  while remain >= 1 {\n    self.consume1(value[cur])\n    cur += 1\n    remain -= 1\n  }\n}\n\n///|\n/// Combines a string value into the current hash state by processing each\n/// character in the string sequentially.\n///\n/// Parameters:\n///\n/// * `self` : The hasher object whose state will be updated.\n/// * `value` : The string value to be combined into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_string\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_string(\"hello\")\n///   inspect(hasher.finalize(), content=\"-655549713\")\n/// }\n/// ```\npub fn Hasher::combine_string(self : Hasher, value : String) -> Unit {\n  for i in 0..<value.length() {\n    self.combine_uint(value.unsafe_charcode_at(i).reinterpret_as_uint())\n  }\n}\n\n///|\n/// Combines a character value into the hasher's internal state. The character is\n/// first converted to its Unicode code point (as an integer) before being\n/// combined.\n///\n/// Parameters:\n///\n/// * `self` : The hasher instance to update.\n/// * `value` : The character value to be combined into the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::combine_char\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_char('A')\n///   inspect(hasher.finalize(), content=\"-1625495534\")\n/// }\n/// ```\npub fn Hasher::combine_char(self : Hasher, value : Char) -> Unit {\n  self.combine_uint(value.to_uint())\n}\n\n///|\n/// Finalizes the hashing process and returns the computed hash value. Applies an\n/// avalanche function to improve the distribution of the hash value.\n///\n/// Parameters:\n///\n/// * `hasher` : The hasher object containing the accumulated hash state.\n///\n/// Returns a 32-bit integer representing the final hash value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Hasher::finalize\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_byte(b'\\xFF')\n///   inspect(hasher.finalize(), content=\"1955036104\")\n/// }\n/// ```\npub fn Hasher::finalize(self : Hasher) -> Int {\n  self.avalanche().reinterpret_as_int()\n}\n\n///|\nfn Hasher::avalanche(self : Hasher) -> UInt {\n  let mut acc = self.acc\n  acc = acc ^ (acc >> 15)\n  acc *= GPRIMES2\n  acc = acc ^ (acc >> 13)\n  acc *= GPRIME3\n  acc = acc ^ (acc >> 16)\n  acc\n}\n\n///|\nfn Hasher::consume4(self : Hasher, input : UInt) -> Unit {\n  self.acc = rotl(self.acc + input * GPRIME3, 17) * GPRIME4\n}\n\n///|\nfn Hasher::consume1(self : Hasher, input : Byte) -> Unit {\n  self.acc = rotl(self.acc + input.to_uint() * GPRIME5, 11) * GPRIME1\n}\n\n///|\nfn rotl(x : UInt, r : Int) -> UInt {\n  (x << r) | (x >> (32 - r))\n}\n\n///|\nfn endian32(input : Bytes, cur : Int) -> UInt {\n  input[cur + 0].to_uint() |\n  (\n    (input[cur + 1].to_uint() << 8) |\n    (input[cur + 2].to_uint() << 16) |\n    (input[cur + 3].to_uint() << 24)\n  )\n}\n\n///|\n/// Implements the `Hash` trait for `String` type, providing a method to combine\n/// a string's hash value with a hasher's state.\n///\n/// Parameters:\n///\n/// * `self` : The string value to be hashed.\n/// * `hasher` : The hasher object that will be updated with the string's hash\n/// value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"String::hash\" {\n///   let s1 = \"hello\"\n///   let s2 = \"hello\"\n///   let s3 = \"world\"\n///   inspect(Hash::hash(s1) == Hash::hash(s2), content=\"true\")\n///   inspect(Hash::hash(s1) == Hash::hash(s3), content=\"false\")\n/// }\n/// ```\npub impl Hash for String with hash_combine(self, hasher) {\n  hasher.combine_string(self)\n}\n\n///|\n/// Implements the `Hash` trait for integer values using a combination of shifts\n/// and multiplications to produce a well-distributed hash value. Based on the\n/// hash algorithm from hash-prospector\n/// (https://github.com/skeeto/hash-prospector).\n///\n/// Parameters:\n///\n/// * `integer` : The integer value to be hashed. The value will be reinterpreted\n/// as an unsigned integer before hashing to ensure consistent behavior across\n/// positive and negative values.\n///\n/// Returns a 32-bit hash value derived from the input integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::hash\" {\n///   let x = 42\n///   inspect(Hash::hash(x), content=\"-1704501356\")\n///   let y = -42\n///   inspect(Hash::hash(y), content=\"1617647962\")\n/// }\n/// ```\n/// TODO: This implementation is **different** from the default implementation of the hash trait. \n/// So it will be replaced with the default implementation in the future **(breaking change)**, \n/// and users should not rely on this particular hash value\n/// ```moonbit \n/// test {\n///   let x = 42\n///   assert_not_eq(Hash::hash(x),Hasher::new()..combine(x).finalize())\n/// }\n/// ```\npub impl Hash for Int with hash(self) {\n  let self = self.reinterpret_as_uint()\n  let mut x = self ^ (self >> 17)\n  x = x * 0xed5ad4bb\n  x = x ^ (x >> 11)\n  x = x * 0xac4c1b51\n  x = x ^ (x >> 15)\n  x = x * 0x31848bab\n  x = x ^ (x >> 14)\n  x.reinterpret_as_int()\n}\n\n///|\n/// Implements hash combination for integers by combining the integer value with\n/// a hasher. This implementation ensures that integers can be used as keys in\n/// hash-based collections like hash maps and hash sets.\n///\n/// Parameters:\n///\n/// * `self` : The integer value to be hashed.\n/// * `hasher` : A `Hasher` object that accumulates the hash value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Int::hash_combine\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_int(42)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// }\n/// ```\npub impl Hash for Int with hash_combine(self, hasher) {\n  hasher.combine_int(self)\n}\n\n///|\n/// Combines the hash value of an unsigned integer with a hasher object. This is\n/// useful when you need to hash a data structure that contains unsigned\n/// integers.\n///\n/// Parameters:\n///\n/// * `value` : The unsigned integer to be combined with the hasher.\n/// * `hasher` : The hasher object that will incorporate the hash value of the\n/// unsigned integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt::hash_combine\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_uint(42U)\n///   inspect(hasher.finalize(), content=\"1161967057\")\n/// }\n/// ```\npub impl Hash for UInt with hash_combine(self, hasher) {\n  hasher.combine_uint(self)\n}\n\n///|\n/// Implements the `Hash` trait for `UInt64` by combining the hash value of an\n/// unsigned 64-bit integer into a hasher.\n///\n/// Parameters:\n///\n/// * `self` : The unsigned 64-bit integer value to be hashed.\n/// * `hasher` : The hasher object used to compute the combined hash value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"UInt64::hash_combine\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_uint64(42UL)\n///   inspect(hasher.finalize(), content=\"-1962516083\")\n/// }\n/// ```\npub impl Hash for UInt64 with hash_combine(self, hasher) {\n  hasher.combine_uint64(self)\n}\n\n///|\n/// Implements the `Hash` trait for `Option` types, allowing them to be used as\n/// keys in hash-based collections.\n///\n/// Parameters:\n///\n/// * `self` : The `Option` value to be hashed.\n/// * `hasher` : The hasher object that accumulates the hash state.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Option::hash_combine\" {\n///   let hasher = Hasher::new()\n///   let some_value : Int? = Some(42)\n///   let none_value : Int? = None\n///   hasher.combine(some_value)\n///   inspect(hasher.finalize(), content=\"2103260413\")\n///   let hasher2 = Hasher::new()\n///   hasher2.combine(none_value)\n///   inspect(hasher2.finalize(), content=\"148298089\")\n/// }\n/// ```\npub impl[X : Hash] Hash for X? with hash_combine(self, hasher) {\n  match self {\n    None => hasher.combine_int(0)\n    Some(x) => hasher..combine_int(1)..combine(x)\n  }\n}\n\n///|\n/// Implements the `Hash` trait for `Result` type, allowing `Result` values to be\n/// used in hash-based collections.\n///\n/// Parameters:\n///\n/// * `self` : The `Result` value to be hashed.\n/// * `hasher` : The hasher object to which the hash value will be combined.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Result::hash_combine\" {\n///   let hasher = Hasher::new()\n///   let ok_result : Result[Int, String] = Ok(42)\n///   let err_result : Result[Int, String] = Err(\"error\")\n///   hasher.combine(ok_result)\n///   inspect(hasher.finalize(), content=\"-1948635851\")\n///   let hasher = Hasher::new()\n///   hasher.combine(err_result)\n///   inspect(hasher.finalize(), content=\"1953766574\")\n/// }\n/// ```\npub impl[T : Hash, E : Hash] Hash for Result[T, E] with hash_combine(\n  self,\n  hasher\n) {\n  match self {\n    Ok(x) => hasher..combine_int(0)..combine(x)\n    Err(x) => hasher..combine_int(1)..combine(x)\n  }\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn Int64::output(self : Int64, logger : &Logger, radix~ : Int = 10) -> Unit {\n  fn abs(n : Int64) -> Int64 {\n    if n < 0L {\n      0L - n\n    } else {\n      n\n    }\n  }\n\n  if self < 0L {\n    logger.write_char('-')\n  }\n  let radix : Int64 = radix.to_int64()\n  fn write_digits(num : Int64) {\n    let num2 = num / radix\n    if num2 != 0L {\n      write_digits(num2)\n    }\n    logger.write_char(\n      ALPHABET.charcode_at(abs(num % radix).to_int()).unsafe_to_char(),\n    )\n  }\n\n  write_digits(abs(self))\n}\n\n///|\nfn Int::output(self : Int, logger : &Logger, radix~ : Int = 10) -> Unit {\n  fn abs(n : Int) -> Int {\n    if n < 0 {\n      0 - n\n    } else {\n      n\n    }\n  }\n\n  if self < 0 {\n    logger.write_char('-')\n  }\n  fn write_digits(num : Int) {\n    let num2 = num / radix\n    if num2 != 0 {\n      write_digits(num2)\n    }\n    logger.write_char(ALPHABET.charcode_at(abs(num % radix)).unsafe_to_char())\n  }\n\n  write_digits(abs(self))\n}\n\n///|\nfn UInt::output(self : UInt, logger : &Logger, radix~ : Int = 10) -> Unit {\n  let radix : UInt = radix.reinterpret_as_uint()\n  fn write_digits(num : UInt) {\n    let num2 = num / radix\n    if num2 != 0U {\n      write_digits(num2)\n    }\n    logger.write_char(\n      ALPHABET.charcode_at((num % radix).reinterpret_as_int()).unsafe_to_char(),\n    )\n  }\n\n  write_digits(self)\n}\n\n///|\nfn UInt64::output(self : UInt64, logger : &Logger, radix~ : Int = 10) -> Unit {\n  let radix : UInt64 = radix.to_uint64()\n  fn write_digits(num : UInt64) {\n    let num2 = num / radix\n    if num2 != 0UL {\n      write_digits(num2)\n    }\n    logger.write_char(\n      ALPHABET.charcode_at((num % radix).to_int()).unsafe_to_char(),\n    )\n  }\n\n  write_digits(self)\n}\n\n///|\nfn Int64::output_size_hint(radix~ : Int = 10) -> Int {\n  match radix {\n    2..<7 => 70 // max length is 64, 70 is enough\n    8..<15 => 30 // max length is 23, 30 is enough\n    16..=36 => 20 // max length is 17, 20 is enough\n    _ => abort(\"radix must be between 2 and 36\")\n  }\n}\n\n///|\nfn Int::output_size_hint(radix~ : Int = 10) -> Int {\n  match radix {\n    2..<7 => 36 // max length is 32, 36 is enough\n    8..<15 => 18 // max length is 12, 18 is enough\n    16..=36 => 10 // max length is 8, 10 is enough\n    _ => abort(\"radix must be between 2 and 36\")\n  }\n}\n\n///|\nfn UInt::output_size_hint(radix~ : Int = 10) -> Int {\n  Int::output_size_hint(radix~)\n}\n\n///|\nfn UInt64::output_size_hint(radix~ : Int = 10) -> Int {\n  Int64::output_size_hint(radix~)\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n#coverage.skip\npub fn[T : Compare] op_lt(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_neg()\n}\n\n///|\n#coverage.skip\npub fn[T : Compare] op_gt(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_pos()\n}\n\n///|\n#coverage.skip\npub fn[T : Compare] op_le(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_non_pos()\n}\n\n///|\n#coverage.skip\npub fn[T : Compare] op_ge(self_ : T, other : T) -> Bool {\n  self_.compare(other).is_non_neg()\n}\n\n///|\n#coverage.skip\npub fn[T : Eq] op_notequal(x : T, y : T) -> Bool {\n  not(x == y)\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn[T] set_null(self : UninitializedArray[T], index : Int) = \"%fixedarray.set_null\"\n\n///|\n/// An `Array` is a collection of values that supports random access and can\n/// grow in size.\nstruct Array[T] {\n  mut buf : UninitializedArray[T]\n  mut len : Int\n}\n\n///|\nfn[T] Array::make_uninit(len : Int) -> Array[T] {\n  { buf: UninitializedArray::make(len), len }\n}\n\n///|\n/// Creates a new empty array with an optional initial capacity.\n///\n/// Parameters:\n///\n/// * `capacity` : The initial capacity of the array. If 0 (default), creates an\n/// array with minimum capacity. Must be non-negative.\n///\n/// Returns a new empty array of type `Array[T]` with the specified initial\n/// capacity.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::new\" {\n///   let arr : Array[Int] = Array::new(capacity=10)\n///   inspect(arr.length(), content=\"0\")\n///   inspect(arr.capacity(), content=\"10\")\n/// }\n///\n/// test \"Array::new/default\" {\n///   let arr : Array[Int] = Array::new()\n///   inspect(arr.length(), content=\"0\")\n/// }\n/// ```\npub fn[T] Array::new(capacity~ : Int = 0) -> Array[T] {\n  if capacity == 0 {\n    []\n  } else {\n    { buf: UninitializedArray::make(capacity), len: 0 }\n  }\n}\n\n///|\n/// Returns the number of elements in the array.\n///\n/// Parameters:\n///\n/// * `array` : The array whose length is to be determined.\n///\n/// Returns the number of elements in the array as an integer.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Array::length\" {\n///   let arr = [1, 2, 3]\n///   inspect(arr.length(), content=\"3\")\n///   let empty : Array[Int] = []\n///   inspect(empty.length(), content=\"0\")\n/// }\n/// ```\n#intrinsic(\"%array.length\")\npub fn[T] Array::length(self : Array[T]) -> Int {\n  self.len\n}\n\n///|\n/// Truncates the array to the specified length. This function is marked as\n/// `unsafe` because it directly manipulates the internal buffer of the array,\n/// which can lead to undefined behavior if not used carefully.\n///\n/// # Parameters\n///\n/// - `self` : The array to be truncated.\n/// - `new_len` : The new length to which the array should be truncated. Must be\n/// less than or equal to the current length of the array.\n///\n/// # Returns\n///\n/// - `Unit` : This function does not return a value.\n///\n/// # Errors\n///\n/// - This function does not explicitly raise errors, but improper use (e.g.,\n/// setting `new_len` greater than the current length) can lead to undefined\n/// behavior.\n///\n/// TODO: this can be optimized by using the intrinsic to null out the range\nfn[T] Array::unsafe_truncate_to_length(self : Array[T], new_len : Int) -> Unit {\n  let len = self.length()\n  guard new_len <= len\n  for i in new_len..<len {\n    self.buf.set_null(i)\n  }\n  self.len = new_len\n}\n\n///|\ntest \"unsafe_truncate_to_length\" {\n  let arr = [1, 2, 3, 4, 5]\n  arr.unsafe_truncate_to_length(3)\n  inspect(arr, content=\"[1, 2, 3]\")\n}\n\n///|\nfn[T] Array::buffer(self : Array[T]) -> UninitializedArray[T] {\n  self.buf\n}\n\n///|\nfn[T] Array::resize_buffer(self : Array[T], new_capacity : Int) -> Unit {\n  let new_buf = UninitializedArray::make(new_capacity)\n  let old_buf = self.buf\n  let old_cap = old_buf._.length()\n  let copy_len = if old_cap < new_capacity { old_cap } else { new_capacity }\n  UninitializedArray::unsafe_blit(new_buf, 0, old_buf, 0, copy_len)\n  self.buf = new_buf\n}\n\n///|\ntest \"array_unsafe_blit_fixed\" {\n  let src = FixedArray::make(5, 0)\n  let dst = UninitializedArray::make(5)\n  for i in 0..<5 {\n    src[i] = i + 1\n  }\n  UninitializedArray::unsafe_blit_fixed(dst, 0, src, 0, 5)\n  for i in 0..<5 {\n    assert_eq(dst[i], src[i])\n  }\n}\n\n///|\ntest \"UninitializedArray::unsafe_blit_fixed\" {\n  let src = FixedArray::make(5, 0)\n  let dst = UninitializedArray::make(5)\n  for i in 0..<5 {\n    src[i] = i + 1\n  }\n  UninitializedArray::unsafe_blit_fixed(dst, 0, src, 0, 5)\n  for i in 0..<5 {\n    assert_eq(dst[i], src[i])\n  }\n}\n\n///|\ntest \"UninitializedArray::unsafe_blit_fixed\" {\n  let src = FixedArray::make(5, 0)\n  let dst = UninitializedArray::make(5)\n  for i in 0..<5 {\n    src[i] = i + 1\n  }\n  UninitializedArray::unsafe_blit_fixed(dst, 0, src, 0, 5)\n  for i in 0..<5 {\n    assert_eq(dst[i], src[i])\n  }\n}\n\n///|\ntest \"Array::resize_buffer\" {\n  let arr = Array::new(capacity=2)\n  arr.push(1)\n  arr.push(2)\n  arr.resize_buffer(4)\n  assert_eq(arr.buffer()._.length() >= 4, true)\n  arr.push(3)\n  arr.push(4)\n  assert_eq(arr.length(), 4)\n  assert_eq(arr[0], 1)\n  assert_eq(arr[1], 2)\n  assert_eq(arr[2], 3)\n  assert_eq(arr[3], 4)\n}\n\n///|\n/// Reallocate the array with a new capacity.\nfn[T] Array::realloc(self : Array[T]) -> Unit {\n  let old_cap = self.length()\n  let new_cap = if old_cap == 0 { 8 } else { old_cap * 2 }\n  self.resize_buffer(new_cap)\n}\n\n///|\n/// Reserves capacity to ensure that it can hold at least the number of elements\n/// specified by the `capacity` argument.\n///\n/// # Example\n///\n/// ```\n/// let v = [1]\n/// v.reserve_capacity(10)\n/// assert_eq(v.capacity(), 10)\n/// ```\npub fn[T] Array::reserve_capacity(self : Array[T], capacity : Int) -> Unit {\n  if self.capacity() >= capacity {\n    return\n  }\n  self.resize_buffer(capacity)\n}\n\n///|\n/// Shrinks the capacity of the array as much as possible.\n///\n/// # Example\n///\n/// ```\n/// let v = Array::new(capacity=10)\n/// v.push(1)\n/// v.push(2)\n/// v.push(3)\n/// v.shrink_to_fit()\n/// assert_eq(v.capacity(), 3)\n/// ```\npub fn[T] Array::shrink_to_fit(self : Array[T]) -> Unit {\n  if self.capacity() <= self.length() {\n    return\n  }\n  self.resize_buffer(self.length())\n}\n\n///|\n/// Adds an element to the end of the array.\n///\n/// If the array is at capacity, it will be reallocated.\n///\n/// # Example\n/// ```\n/// let v = []\n/// v.push(3)\n/// ```\npub fn[T] Array::push(self : Array[T], value : T) -> Unit {\n  if self.length() == self.buffer()._.length() {\n    self.realloc()\n  }\n  let length = self.length()\n  self.unsafe_set(length, value)\n  self.len = length + 1\n}\n\n///|\n/// Removes the last element from a array and returns it, or `None` if it is empty.\n///\n/// # Example\n/// ```\n/// let v = [1, 2, 3]\n/// assert_eq(v.pop(), Some(3))\n/// assert_eq(v, [1, 2])\n/// ```\npub fn[T] Array::pop(self : Array[T]) -> T? {\n  let len = self.length()\n  if len == 0 {\n    None\n  } else {\n    let index = len - 1\n    let v = self.unsafe_get(index)\n    self.buf.set_null(index)\n    self.len = index\n    Some(v)\n  }\n}\n\n///|\n#deprecated(\"Use `unsafe_pop` instead\")\n#coverage.skip\npub fn[T] Array::pop_exn(self : Array[T]) -> T {\n  self.unsafe_pop()\n}\n\n///|\n/// Removes and returns the last element from the array.\n///\n/// Parameters:\n///\n/// * `array` : The array from which to remove and return the last element.\n///\n/// Returns the last element of the array before removal.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"unsafe_pop\" {\n///   let arr = [1, 2, 3]\n///   inspect(arr.unsafe_pop(), content=\"3\")\n///   inspect(arr, content=\"[1, 2]\")\n/// }\n///\n/// test \"panic unsafe_pop/empty\" {\n///   let arr : Array[Int] = []\n///   ignore(arr.unsafe_pop()) // Panics when array is empty\n/// }\n/// ```\n///\n#internal(unsafe, \"Panic if the array is empty.\")\npub fn[T] Array::unsafe_pop(self : Array[T]) -> T {\n  let len = self.length()\n  guard len != 0\n  let index = len - 1\n  let v = self.unsafe_get(index)\n  self.buf.set_null(index)\n  self.len = index\n  v\n}\n\n///|\n/// Removes and returns the element at position index within the array, \n/// shifting all elements after it to the left.\n/// \n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// assert_eq(v.remove(1), 4)\n/// assert_eq(v, [3, 5])\n/// ```\npub fn[T] Array::remove(self : Array[T], index : Int) -> T {\n  guard index >= 0 && index < self.length() else {\n    abort(\n      \"index out of bounds: the len is from 0 to \\{self.length()} but the index is \\{index}\",\n    )\n  }\n  let value = self.unsafe_get(index)\n  UninitializedArray::unsafe_blit(\n    self.buffer(),\n    index,\n    self.buffer(),\n    index + 1,\n    self.length() - index - 1,\n  )\n  self.unsafe_truncate_to_length(self.length() - 1)\n  value\n}\n\n///|\n/// Removes the specified range from the array and returns it.\n///\n/// This functions returns a array range from `begin` to `end` `[begin, end)`\n/// \n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```\n/// let v = [3, 4, 5]\n/// let vv = v.drain(1, 2) // vv = [4], v = [3, 5]\n/// assert_eq(vv, [4])\n/// assert_eq(v, [3, 5])\n/// ```\npub fn[T] Array::drain(self : Array[T], begin : Int, end : Int) -> Array[T] {\n  guard begin >= 0 && end <= self.length() && begin <= end\n  let num = end - begin\n  let v = Array::make_uninit(num)\n  UninitializedArray::unsafe_blit(v.buffer(), 0, self.buffer(), begin, num)\n  UninitializedArray::unsafe_blit(\n    self.buffer(),\n    begin,\n    self.buffer(),\n    end,\n    self.length() - end,\n  )\n  self.unsafe_truncate_to_length(self.length() - num)\n  v\n}\n\n///|\n/// Inserts an element at a given index within the array.\n/// This function will panic if the index is out of bounds.\n///\n/// # Example\n/// ```\n/// [3, 4, 5].insert(1, 6)\n/// ```\npub fn[T] Array::insert(self : Array[T], index : Int, value : T) -> Unit {\n  guard index >= 0 && index <= self.length() else {\n    abort(\n      \"index out of bounds: the len is from 0 to \\{self.length()} but the index is \\{index}\",\n    )\n  }\n  if self.length() == self.buffer()._.length() {\n    self.realloc()\n  }\n  UninitializedArray::unsafe_blit(\n    self.buffer(),\n    index + 1,\n    self.buffer(),\n    index,\n    self.length() - index,\n  )\n  let length = self.length()\n  self.unsafe_set(index, value)\n  self.len = length + 1\n}\n\n///|\n/// Resize the array in-place so that `len` is equal to `new_len`.\n///\n/// If `new_len` is greater than `len`, the array will be extended by the\n/// difference, and the values in the new slots are left uninitialized.\n///  If `new_len` is less than `len`, it will panic\n///\nfn[T] Array::unsafe_grow_to_length(self : Array[T], new_len : Int) -> Unit {\n  guard new_len >= self.length()\n  let new_buf = UninitializedArray::make(new_len)\n  UninitializedArray::unsafe_blit(new_buf, 0, self.buf, 0, self.len)\n  self.len = new_len\n  self.buf = new_buf\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\ntype UninitializedArray[T] FixedArray[UnsafeMaybeUninit[T]]\n\n///|\n/// Creates an uninitialized array of the specified size.\n///\n/// Parameters:\n///\n/// - `size` : The number of elements the array should hold.\n///\n/// Returns an uninitialized array of type `T` with the specified size.\npub fn[T] UninitializedArray::make(size : Int) -> UninitializedArray[T] = \"%fixedarray.make_uninit\"\n\n///|\n/// Retrieves the element at the specified index from an uninitialized array.\n///\n/// Parameters:\n///\n/// - `array` : The uninitialized array from which to retrieve the element.\n/// - `index` : The index of the element to retrieve.\n///\n/// Returns the element at the specified index.\npub fn[T] UninitializedArray::op_get(\n  self : UninitializedArray[T],\n  index : Int\n) -> T = \"%fixedarray.get\"\n\n///|\n/// Sets the value at the specified index in an uninitialized array.\n///\n/// Parameters:\n///\n/// - `array` : The uninitialized array where the value will be set.\n/// - `index` : The position in the array where the value will be set.\n/// - `value` : The value to be set at the specified index.\npub fn[T] UninitializedArray::op_set(\n  self : UninitializedArray[T],\n  index : Int,\n  value : T\n) = \"%fixedarray.set\"\n\n///|\n/// Creates a view into a portion of the uninitialized array.\n///\n/// Parameters:\n///\n/// * `array` : The uninitialized array to create a view from.\n/// * `start` : The starting index of the view (inclusive). Defaults to 0.\n/// * `end` : The ending index of the view (exclusive). If not provided, defaults\n/// to the length of the array.\n///\n/// Returns an `ArrayView` that provides a window into the specified portion of\n/// the array.\n///\n/// Throws an error if the indices are out of bounds or if `start` is greater\n/// than `end`.\npub fn[T] UninitializedArray::op_as_view(\n  self : UninitializedArray[T],\n  start~ : Int = 0,\n  end? : Int\n) -> ArrayView[T] {\n  let len = self.length()\n  let end = match end {\n    None => len\n    Some(end) => end\n  }\n  guard start >= 0 && start <= end && end <= len else {\n    abort(\"View start index out of bounds\")\n  }\n  { buf: self, start, len: end - start }\n}\n\n///|\n/// Returns the length of an uninitialized array.\n///\n/// Parameters:\n///\n/// - `array` : The uninitialized array whose length is to be determined.\n///\n/// Returns the length of the uninitialized array as an integer.\npub fn[A] UninitializedArray::length(self : UninitializedArray[A]) -> Int {\n  self._.length()\n}\n\n///|\nfn[T] UninitializedArray::unsafe_blit(\n  dst : UninitializedArray[T],\n  dst_offset : Int,\n  src : UninitializedArray[T],\n  src_offset : Int,\n  len : Int\n) -> Unit {\n  FixedArray::unsafe_blit(dst._, dst_offset, src._, src_offset, len)\n}\n\n///|\ntest \"op_as_view with valid_range\" {\n  let arr : UninitializedArray[Int] = UninitializedArray::make(5)\n  let view = arr[1:4]\n  inspect(view.start, content=\"1\")\n  inspect(view.len, content=\"3\")\n}\n\n///|\ntest \"panic op_as_view with invalid_start\" {\n  let arr : UninitializedArray[Int] = UninitializedArray::make(5)\n  ignore(arr[-1:])\n}\n\n///|\ntest \"panic op_as_view with invalid_end\" {\n  let arr : UninitializedArray[Int] = UninitializedArray::make(5)\n  ignore(arr[2:10])\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Trait for types whose elements can test for equality\npub(open) trait Eq {\n  op_equal(Self, Self) -> Bool\n}\n\n///|\n/// Trait for types whose elements are ordered\n///\n/// The return value of [compare] is:\n/// - zero, if the two arguments are equal\n/// - negative, if the first argument is smaller\n/// - positive, if the first argument is greater\npub(open) trait Compare: Eq {\n  compare(Self, Self) -> Int\n}\n\n///|\n/// Trait for types that can be hashed\npub(open) trait Hash {\n  hash_combine(Self, Hasher) -> Unit\n  hash(Self) -> Int = _\n}\n\n///|\nimpl Hash with hash(self) {\n  Hasher::new()..combine(self).finalize()\n}\n\n///|\n/// Trait for types with a default value\npub(open) trait Default {\n  default() -> Self\n}\n\n///|\n/// Trait for a logger, where debug logs can be written into\npub(open) trait Logger {\n  write_string(Self, String) -> Unit\n  write_substring(Self, String, Int, Int) -> Unit\n  write_char(Self, Char) -> Unit = _\n}\n\n///|\nimpl Logger with write_char(self, value) {\n  self.write_string([value])\n}\n\n///|\n/// Trait for types that can be converted to `String`\npub(open) trait Show {\n  // `output` is used for composition of aggregate structure.\n  // `output` writes a string representation of `self` to a logger.\n  // `output` should produce a valid MoonBit-syntax representation if possible.\n  // For example, `Show::output` for `String` should be quoted\n  output(Self, &Logger) -> Unit\n  // `to_string` should be used by end users of `Show`,\n  // for printing, interpolation, etc. only, and should not be used for composition.\n  // By default `to_string` is implemented using `output` and a buffer,\n  // but some types, such as `String`, may override `to_string`,\n  // for different (unescaped) behavior when interpolated/printed directly\n  to_string(Self) -> String = _\n}\n\n///|\n// Default implementation for `Show::to_string`, uses a `Buffer`\nimpl Show with to_string(self) {\n  let logger = StringBuilder::new()\n  self.output(logger)\n  logger.to_string()\n}\n\n///|\npub fn[Obj : Show] &Logger::write_object(self : &Logger, obj : Obj) -> Unit {\n  obj.output(self)\n}\n\n///|\npub fn[T : Show] &Logger::write_iter(\n  self : &Logger,\n  iter : Iter[T],\n  prefix~ : String = \"[\",\n  suffix~ : String = \"]\",\n  sep~ : String = \", \",\n  trailing~ : Bool = false\n) -> Unit {\n  self.write_string(prefix)\n  if trailing {\n    for x in iter {\n      self.write_object(x)\n      self.write_string(sep)\n    }\n  } else {\n    // trailing is false\n    let mut first = true\n    for x in iter {\n      if first {\n        first = false\n      } else {\n        self.write_string(sep)\n      }\n      self.write_object(x)\n    }\n  }\n  self.write_string(suffix)\n}\n// TODO: Logger::write_double(self:Logger, val:Double) -> Unit\n\n///|\npub fn[T : Show] repr(t : T) -> String {\n  let logger = StringBuilder::new()\n  t.output(logger)\n  logger.to_string()\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Performs multiplication between two byte values. The result is truncated to\n/// fit within the byte range.\n///\n/// Parameters:\n///\n/// * `self` : The first byte operand in the multiplication.\n/// * `that` : The second byte operand in the multiplication.\n///\n/// Returns the product of the two bytes, truncated to fit within the byte range\n/// (0-255).\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::op_mul\" {\n///   let a = b'\\x02'\n///   let b = b'\\x03'\n///   inspect(a * b, content=\"b'\\\\x06'\") // 2 * 3 = 6\n///   let c = b'\\xFF'\n///   inspect(c * c, content=\"b'\\\\x01'\") // 255 * 255 = 65025, truncated to 1\n/// }\n/// ```\npub impl Mul for Byte with op_mul(self : Byte, that : Byte) -> Byte {\n  (self.to_int() * that.to_int()).to_byte()\n}\n\n///|\n/// Performs division operation between two bytes by converting them to integers,\n/// performing the division, and converting the result back to a byte.\n///\n/// Parameters:\n///\n/// * `self` : The dividend byte value.\n/// * `that` : The divisor byte value.\n///\n/// Returns the quotient of the division as a byte.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::op_div\" {\n///   let a = b'\\xFF' // 255\n///   let b = b'\\x03' // 3\n///   inspect(a / b, content=\"b'\\\\x55'\") // 255 / 3 = 85 (0x55)\n/// }\n///\n/// test \"panic Byte::op_div/division_by_zero\" {\n///   let a = b'\\x01'\n///   let b = b'\\x00'\n///   ignore(a / b) // Division by zero\n/// }\n/// ```\npub impl Div for Byte with op_div(self : Byte, that : Byte) -> Byte {\n  (self.to_int() / that.to_int()).to_byte()\n}\n\n///|\npub impl Mod for Byte with op_mod(self : Byte, that : Byte) -> Byte {\n  (self.to_int() % that.to_int()).to_byte()\n}\n\n///|\n/// Compares two `Byte` values for equality.\n///\n/// Parameters:\n///\n/// - `self` : The first `Byte` value to compare.\n/// - `that` : The second `Byte` value to compare.\n///\n/// Returns `true` if the two `Byte` values are equal, otherwise `false`.\npub impl Eq for Byte with op_equal(self : Byte, that : Byte) -> Bool {\n  self.to_int() == that.to_int()\n}\n\n///|\n/// Adds two `Byte` values together and returns the result as a `Byte`.\n///\n/// Parameters:\n///\n/// - `byte1` : The first `Byte` value to be added.\n/// - `byte2` : The second `Byte` value to be added.\n///\n/// Returns the sum of `byte1` and `byte2` as a `Byte`.\npub impl Add for Byte with op_add(self : Byte, that : Byte) -> Byte {\n  (self.to_int() + that.to_int()).to_byte()\n}\n\n///|\n/// Subtracts the second byte from the first byte and returns the result as a\n/// byte.\n///\n/// Parameters:\n///\n/// - `self` : The byte from which the second byte will be subtracted.\n/// - `that` : The byte to subtract from the first byte.\n///\n/// Returns the result of the subtraction as a byte.\npub impl Sub for Byte with op_sub(self : Byte, that : Byte) -> Byte {\n  (self.to_int() - that.to_int()).to_byte()\n}\n\n///|\n/// Compares two `Byte` values and returns an integer indicating their relative\n/// order.\n///\n/// Parameters:\n///\n/// - `byte1` : The first `Byte` value to compare.\n/// - `byte2` : The second `Byte` value to compare.\n///\n/// Returns an integer where:\n/// - A value less than 0 indicates that `byte1` is less than `byte2`.\n/// - A value of 0 indicates that `byte1` is equal to `byte2`.\n/// - A value greater than 0 indicates that `byte1` is greater than `byte2`.\npub impl Compare for Byte with compare(self : Byte, that : Byte) -> Int {\n  self.to_int().compare(that.to_int())\n}\n\n///|\nfn alphabet(x : Int) -> String {\n  match x {\n    0 => \"0\"\n    1 => \"1\"\n    2 => \"2\"\n    3 => \"3\"\n    4 => \"4\"\n    5 => \"5\"\n    6 => \"6\"\n    7 => \"7\"\n    8 => \"8\"\n    9 => \"9\"\n    10 => \"A\"\n    11 => \"B\"\n    12 => \"C\"\n    13 => \"D\"\n    14 => \"E\"\n    15 => \"F\"\n    _ => abort(\"impossible\")\n  }\n}\n\n///|\n/// Converts a `Byte` to its string representation in hexadecimal format.\n///\n/// Parameters:\n///\n/// - `byte` : The `Byte` value to be converted.\n///\n/// Returns a `String` representing the `Byte` in the format `b'\\xHH'`, where\n/// `HH` is the hexadecimal representation of the byte.\npub fn Byte::to_string(self : Byte) -> String {\n  let i = self.to_int()\n  let hi = alphabet(i / 16)\n  let lo = alphabet(i % 16)\n  \"b'\\\\x\\{hi}\\{lo}'\"\n}\n\n///|\n/// Implements the `Hash` trait for `Byte` type by converting the byte to an\n/// integer and using it as the hash value.\n///\n/// Parameters:\n///\n/// * `self` : The byte value to be hashed.\n///\n/// Returns an integer representing the hash value of the byte.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::hash\" {\n///   let b = b'\\x42'\n///   inspect(Hash::hash(b), content=\"66\") // ASCII value of 'B'\n/// }\n/// ```\npub impl Hash for Byte with hash(self) {\n  self.to_int()\n}\n\n///|\n/// Implements the `Hash` trait for `Byte` type by providing a `hash_combine`\n/// method that combines a byte value with a hasher.\n///\n/// Parameters:\n///\n/// * `self` : The byte value to be hashed.\n/// * `hasher` : The hasher object that will be used to combine the byte value\n/// into its internal state.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"Byte::hash_combine\" {\n///   let hasher = Hasher::new()\n///   hasher.combine_byte(b'\\xFF')\n///   inspect(hasher.finalize(), content=\"1955036104\")\n/// }\n/// ```\npub impl Hash for Byte with hash_combine(self, hasher) {\n  hasher.combine_byte(self)\n}\n\n///|\n/// Returns the default value for a `Byte`, which is `b'\\x00'`.\n///\n/// Parameters:\n///\n/// - None\n///\n/// Returns the default `Byte` value, which is `b'\\x00'`.\npub impl Default for Byte with default() {\n  b'\\x00'\n}\n\n///|\n/// Performs a bitwise NOT operation on the given `Byte` value.\n///\n/// Parameters:\n///\n/// - `value` : The `Byte` value to apply the bitwise NOT operation on.\n///\n/// Returns the result of the bitwise NOT operation as a `Byte`.\npub fn Byte::lnot(self : Byte) -> Byte {\n  self.to_int().lnot().to_byte()\n}\n\n///|\n/// Performs a bitwise AND operation between two `Byte` values.\n///\n/// Parameters:\n///\n/// - `byte1` : The first `Byte` value to perform the bitwise AND operation with.\n/// - `byte2` : The second `Byte` value to perform the bitwise AND operation\n///   with.\n///\n/// Returns the result of the bitwise AND operation as a `Byte`.\npub impl BitAnd for Byte with land(self : Byte, that : Byte) -> Byte {\n  (self.to_int() & that.to_int()).to_byte()\n}\n\n///|\n/// Performs a bitwise OR operation between two `Byte` values.\n///\n/// Parameters:\n///\n/// - `self` : The first `Byte` value.\n/// - `that` : The second `Byte` value.\n///\n/// Returns a new `Byte` value resulting from the bitwise OR operation.\npub impl BitOr for Byte with lor(self : Byte, that : Byte) -> Byte {\n  (self.to_int() | that.to_int()).to_byte()\n}\n\n///|\n/// Performs a bitwise XOR operation between two `Byte` values.\n///\n/// Parameters:\n///\n/// - `self` : The first `Byte` value.\n/// - `that` : The second `Byte` value.\n///\n/// Returns the result of the bitwise XOR operation as a `Byte`.\npub impl BitXOr for Byte with lxor(self : Byte, that : Byte) -> Byte {\n  (self.to_int() ^ that.to_int()).to_byte()\n}\n\n///|\n/// Converts a `Byte` to a `UInt`.\n///\n/// Parameters:\n///\n/// - `byte` : The `Byte` value to be converted.\n///\n/// Returns the `UInt` representation of the `Byte`.\npub fn Byte::to_uint(self : Byte) -> UInt {\n  self.to_int().reinterpret_as_uint()\n}\n\n///|\n/// Shifts the bits of the `Byte` value to the left by the specified number of\n/// positions.\n///\n/// Parameters:\n///\n/// - `byte_value` : The `Byte` value whose bits are to be shifted.\n/// - `shift_count` : The number of bit positions to shift the `byte_value` to\n///   the left.\n///\n/// Returns the resulting `Byte` value after the shift operation.\npub impl Shl for Byte with op_shl(self : Byte, count : Int) -> Byte {\n  (self.to_int() << count).to_byte()\n}\n\n///|\n/// Shifts the bits of the `Byte` value to the right by the specified number of\n/// positions.\n///\n/// Parameters:\n///\n/// - `byte` : The `Byte` value whose bits are to be shifted.\n/// - `count` : The number of bit positions to shift the `byte` value to the\n///   right.\n///\n/// Returns the resulting `Byte` value after the bitwise right shift operation.\npub impl Shr for Byte with op_shr(self : Byte, count : Int) -> Byte {\n  (self.to_uint() >> count).reinterpret_as_int().to_byte()\n}\n\n///|\n/// positions.\n///\n/// Parameters:\n///\n/// - `byte_value` : The `Byte` value whose bits are to be shifted.\n/// - `shift_count` : The number of bit positions to shift the `byte_value` to\n///   the left.\n///\n/// Returns the resulting `Byte` value after the bitwise left shift operation.\n///\n#deprecated(\"Use infix operator `<<` instead\")\n#coverage.skip\npub fn Byte::lsl(self : Byte, count : Int) -> Byte {\n  (self.to_int() << count).to_byte()\n}\n\n///|\n/// bits.\n///\n/// Parameters:\n///\n/// - `value` : The `Byte` value to be shifted.\n/// - `count` : The number of bits to shift the `value` to the right.\n///\n/// Returns the result of the logical shift right operation as a `Byte`.\n///\n#deprecated(\"Use infix operator `>>` instead\")\n#coverage.skip\npub fn Byte::lsr(self : Byte, count : Int) -> Byte {\n  (self.to_uint() >> count).reinterpret_as_int().to_byte()\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Creates an `Option` containing a value if the given condition is true, otherwise returns `None`.\n///\n/// # Arguments\n///\n/// * `condition`: A boolean value indicating whether the option should contain a value.\n/// * `value`: A function that returns the value to be contained in the option.\n///\n/// # Returns\n///\n/// An `Option` containing the value if the condition is true, otherwise `None`.\n///\n/// # Example\n///\n/// ```\n/// let result = @option.when(true, fn(){ \"Hello, World!\" })\n/// assert_eq(result, Some(\"Hello, World!\"))\n/// ```\npub fn[T] when(condition : Bool, value : () -> T) -> T? {\n  if condition {\n    Some(value())\n  } else {\n    None\n  }\n}\n\n///|\ntest \"when\" {\n  let result = when(true, fn() { \"Hello, World!\" })\n  let result2 = when(false, fn() { \"Hello, World!\" })\n  assert_eq(result, Some(\"Hello, World!\"))\n  assert_eq(result2, None)\n}\n\n///|\n/// The `unless` function returns an `Option` value based on a condition.\n///\n/// `unless(condition, value)` is equivalent to `when(not(condition), value)`.\n///\n/// # Arguments\n///\n/// * `condition`: A boolean value indicating whether the condition is true or false.\n/// * `value`: A function that returns a value of type `T`.\n///\n/// # Returns\n///\n/// An `Option` value that is `Some(value())` if the condition is false, otherwise `None`.\n///\npub fn[T] unless(condition : Bool, value : () -> T) -> T? {\n  when(not(condition), value)\n}\n\n///|\ntest \"unless\" {\n  let result = unless(true, fn() { \"Hello, World!\" })\n  let result2 = unless(false, fn() { \"Hello, World!\" })\n  assert_eq(result, None)\n  assert_eq(result2, Some(\"Hello, World!\"))\n}\n\n///|\n/// Creates an empty `Option` of type `T`.\npub fn[T] empty() -> T? {\n  None\n}\n\n///|\ntest \"empty\" {\n  let x : Int? = None\n  let y : Int? = empty()\n  assert_eq(x, y)\n}\n\n///|\n/// Creates an `Option` that contains a value.\npub fn[T] some(value : T) -> T? {\n  Some(value)\n}\n\n///|\ntest \"some\" {\n  let x : Int? = Some(5)\n  let y : Int? = some(5)\n  assert_eq(x, y)\n}\n\n///|\n/// Maps the value of an `Option` using a provided function.\n///\n/// # Example\n///\n/// ```\n/// let a = Some(5)\n/// assert_eq(a.map(fn(x){ x * 2 }), Some(10))\n///\n/// let b = None\n/// assert_eq(b.map(fn(x){ x * 2 }), None)\n/// ```\npub fn[T, U] map(self : T?, f : (T) -> U) -> U? {\n  match self {\n    Some(t) => Some(f(t))\n    None => None\n  }\n}\n\n///|\ntest \"map\" {\n  let a = Option::Some(5)\n  let b : Int? = None\n  assert_eq(a.map(fn(x) { x * 2 }), Some(10))\n  assert_eq(b.map(fn(x) { x * 2 }), None)\n}\n\n///|\n/// Returns the provided default result (if none), or applies a function to the contained value (if any).\n/// Arguments passed to map_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use `map_or_else`, which is lazily evaluated.\n///\n/// # Example\n///\n/// ```\n/// let a = Some(5)\n/// assert_eq(a.map_or(3, fn(x){ x * 2 }), 10)\n/// ```\npub fn[T, U] map_or(self : T?, default : U, f : (T) -> U) -> U {\n  match self {\n    None => default\n    Some(x) => f(x)\n  }\n}\n\n///|\ntest \"map_or\" {\n  let a = Option::Some(\"foo\")\n  let b : String? = Option::None\n  assert_eq(a.map_or(42, fn(x) { x.length() }), 3)\n  assert_eq(b.map_or(42, fn(x) { x.length() }), 42)\n}\n\n///|\n/// Computes a default function result (if none), or applies a different function to the contained value (if any).\n///\n/// # Example\n///\n/// ```\n/// let a = Some(5)\n/// assert_eq(a.map_or_else(fn(){ 3 }, fn(x){ x * 2 }), 10)\n/// ```\npub fn[T, U] map_or_else(self : T?, default : () -> U, f : (T) -> U) -> U {\n  match self {\n    None => default()\n    Some(x) => f(x)\n  }\n}\n\n///|\ntest \"map_or_else\" {\n  let k = 21\n  let a = Option::Some(\"foo\")\n  let b : String? = Option::None\n  assert_eq(a.map_or_else(fn() { 2 * k }, fn(x) { x.length() }), 3)\n  assert_eq(b.map_or_else(fn() { 2 * k }, fn(x) { x.length() }), 42)\n}\n\n///|\n/// Binds an option to a function that returns another option.\n///\n/// # Example\n///\n/// ```\n/// let a = Option::Some(5)\n/// let r1 = a.bind(fn(x){ Some(x * 2) })\n/// assert_eq(r1, Some(10))\n/// let b : Option[Int] = None\n/// let r2 = b.bind(fn(x){ Some(x * 2) })\n/// assert_eq(r2, None)\n/// ```\npub fn[T, U] bind(self : T?, f : (T) -> U?) -> U? {\n  match self {\n    Some(t) => f(t)\n    None => None\n  }\n}\n\n///|\ntest \"bind\" {\n  let a = Option::Some(5)\n  let b : Int? = None\n  assert_eq(a.bind(fn(x) { Some(x * 2) }), Some(10))\n  assert_eq(b.bind(fn(x) { Some(x * 2) }), None)\n}\n\n///|\n/// Flattens an `Option` of `Option` into a single `Option`.\n///\n/// If the input `Option` is `Some(Some(value))`, the function returns `Some(value)`.\n///\n/// # Example\n///\n/// ```\n/// let a = Some(Some(42));\n/// assert_eq(@option.flatten(a), Some(42))\n/// let b : Int?? = Some(None)\n/// assert_eq(@option.flatten(b), None)\n/// ```\npub fn[T] flatten(self : T??) -> T? {\n  match self {\n    Some(inner) => inner\n    None => None\n  }\n}\n\n///|\ntest \"flatten\" {\n  let a : Int?? = Some(Some(42))\n  assert_eq(a.flatten(), Some(42))\n  let b : Int?? = Some(None)\n  assert_eq(b.flatten(), None)\n}\n\n///|\n/// Checks if the option is empty.\npub fn[T] is_empty(self : T?) -> Bool {\n  self is None\n}\n\n///|\ntest \"is_empty\" {\n  let x = Option::Some(3)\n  let y : Int? = None\n  assert_false(x.is_empty())\n  assert_true(y.is_empty())\n}\n\n///|\n/// Filters the option by applying the given predicate function `f`.\n///\n/// If the predicate function `f` returns `true` for the value contained in the option,\n/// the same option is returned. Otherwise, `None` is returned.\n///\n/// # Example\n/// ```\n/// let x = Some(3)\n/// assert_eq(x.filter(fn(x){ x > 5 }), None)\n/// assert_eq(x.filter(fn(x){ x < 5 }), Some(3))\n/// ```\npub fn[T] filter(self : T?, f : (T) -> Bool) -> T? {\n  match self {\n    Some(t) => if f(t) { self } else { None }\n    None => None\n  }\n}\n\n///|\ntest \"filter\" {\n  let x = Option::Some(3)\n  assert_eq(x.filter(fn(x) { x > 5 }), None)\n  assert_eq(x.filter(fn(x) { x < 5 }), Some(3))\n}\n\n///|\n/// Return the contained `Some` value or the provided default.\npub fn[T] or(self : T?, default : T) -> T {\n  match self {\n    None => default\n    Some(t) => t\n  }\n}\n\n///|\ntest \"or\" {\n  let x = Option::Some(3)\n  assert_eq(x.or(5), 3)\n  assert_eq((None : Int?).or(5), 5)\n}\n\n///|\n/// Return the contained `Some` value or the provided default.\n///\n/// Default is lazily evaluated\npub fn[T] or_else(self : T?, default : () -> T) -> T {\n  match self {\n    None => default()\n    Some(t) => t\n  }\n}\n\n///|\ntest \"or else\" {\n  let x = Option::Some(3)\n  assert_eq(x.or_else(fn() { 5 }), 3)\n  assert_eq((None : Int?).or_else(fn() { 5 }), 5)\n}\n\n///|\n/// Return the contained `Some` value or the result of the `T::default()`.\npub fn[T : Default] or_default(self : T?) -> T {\n  match self {\n    None => T::default()\n    Some(t) => t\n  }\n}\n\n///|\ntest \"or default\" {\n  let x = Option::Some(3)\n  assert_eq(x.or_default(), 3)\n  assert_eq((None : Int?).or_default(), 0)\n}\n\n///|\npub impl[X : Compare] Compare for X? with compare(self, other) {\n  match (self, other) {\n    (Some(x), Some(y)) => x.compare(y)\n    (Some(_), None) => 1\n    (None, Some(_)) => -1\n    (None, None) => 0\n  }\n}\n\n///|\ntest \"compare\" {\n  let some1 = Option::Some(1)\n  let some2 = Option::Some(2)\n  let none = Option::None\n  assert_eq(0, some1.compare(Option::Some(1)))\n  assert_eq(-1, some1.compare(some2))\n  assert_eq(1, some2.compare(some1))\n  assert_eq(0, none.compare(none))\n  assert_eq(-1, none.compare(some1))\n  assert_eq(1, some2.compare(none))\n}\n\n///|\n/// `None`\npub impl[X] Default for X? with default() {\n  None\n}\n\n///|\npub fn[T] iter(self : T?) -> Iter[T] {\n  match self {\n    Some(v) => Iter::singleton(v)\n    None => Iter::empty()\n  }\n}\n\n///|\ntest \"iter\" {\n  let x = Option::Some(42)\n  let exb = StringBuilder::new(size_hint=0)\n  x\n  .iter()\n  .each(fn(x) {\n    exb.write_string(x.to_string())\n    exb.write_char('\\n')\n  })\n  inspect(\n    exb,\n    content=\n      #|42\n      #|\n    ,\n  )\n  exb.reset()\n  let y : Int? = None\n  y\n  .iter()\n  .each(fn(x) {\n    exb.write_string(x.to_string())\n    exb.write_char('\\n')\n  })\n  inspect(exb, content=\"\")\n}\n\n///|\npub fn[T, Err : Error] or_error(self : T?, err : Err) -> T!Err {\n  match self {\n    Some(v) => v\n    None => raise err\n  }\n}\n\n///|\ntest \"or error\" {\n  assert_eq(\n    try (None : String?).or_error(Failure(\"This is serious\")) catch {\n      Failure(err) => err\n    },\n    \"This is serious\",\n  )\n  assert_eq(\n    try Some(\"This is ok\").or_error(Failure(\"This is serious\")) catch {\n      Failure(err) => err\n    },\n    \"This is ok\",\n  )\n}\n\n///|\npub impl[X : @quickcheck.Arbitrary] @quickcheck.Arbitrary for X? with arbitrary(\n  i,\n  rs\n) {\n  if rs.next_double() < 0.3 {\n    None\n  } else {\n    Some(@quickcheck.Arbitrary::arbitrary(i, rs))\n  }\n}\n\n///|\ntest \"arbitrary\" {\n  let samples : Array[Int?] = @quickcheck.samples(10)\n  inspect(\n    samples,\n    content=\"[None, None, Some(-1), Some(0), None, Some(0), Some(-5), Some(2), None, Some(4)]\",\n  )\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn power_2_above(x : Int, n : Int) -> Int {\n  for i = x {\n    if i >= n {\n      break i\n    }\n    let next = i << 1\n    if next < 0 {\n      // overflow happened\n      break i\n    }\n    continue next\n  }\n}\n\n///|\ntest \"power_2_above\" {\n  inspect(power_2_above(1, 15), content=\"16\")\n  inspect(power_2_above(1, 16), content=\"16\")\n  inspect(power_2_above(1, 17), content=\"32\")\n  inspect(power_2_above(1, 32), content=\"32\")\n  inspect(power_2_above(128, 33), content=\"128\")\n  inspect(power_2_above(1, 2147483647), content=\"1073741824\")\n}\n\n///|\n/// Creates a new empty hash map with the specified initial capacity. The actual\n/// capacity will be rounded up to the next power of 2 that is greater than or\n/// equal to the requested capacity, with a minimum of 8.\n///\n/// Parameters:\n///\n/// * `capacity` : The desired minimum capacity of the hash map. Must be a\n/// non-negative integer. Defaults to 8 if not specified.\n///\n/// Returns a new empty hash map of type `T[K, V]`, where `K` is the key type and\n/// `V` is the value type.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"new\" {\n///   let map : @hashmap.T[String, Int] = @hashmap.new(capacity=16)\n///   inspect(map.capacity(), content=\"16\")\n///   inspect(map.is_empty(), content=\"true\")\n/// }\n/// ```\npub fn[K, V] new(capacity~ : Int = 8) -> T[K, V] {\n  let capacity = power_2_above(8, capacity)\n  {\n    size: 0,\n    capacity,\n    entries: FixedArray::make(capacity, None),\n    capacity_mask: capacity - 1,\n  }\n}\n\n///|\n/// Creates a new hash map from an array of key-value pairs. Pairs with duplicate\n/// keys will keep the latest value, overwriting the previous ones.\n///\n/// Parameters:\n///\n/// * `arr` : An array of key-value tuples. Each tuple contains a hashable and\n/// comparable key of type `K`, and an associated value of type `V`.\n///\n/// Returns a new hash map containing all the key-value pairs from the input\n/// array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"from_array\" {\n///   let arr = [(1, \"one\"), (2, \"two\"), (1, \"ONE\")]\n///   let map = @hashmap.from_array(arr)\n///   inspect(map.get(1), content=\"Some(\\\"ONE\\\")\")\n///   inspect(map.get(2), content=\"Some(\\\"two\\\")\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] from_array(arr : Array[(K, V)]) -> T[K, V] {\n  let m = new(capacity=arr.length())\n  arr.each(fn(e) { m.set(e.0, e.1) })\n  m\n}\n\n///|\n/// Sets a key-value pair into the hash map. If the key already exists, updates\n/// its value. If the hash map is near full capacity (>= 50%), automatically\n/// grows the internal storage to accommodate more entries.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to modify.\n/// * `key` : The key to insert or update. Must implement `Hash` and `Eq` traits.\n/// * `value` : The value to associate with the key.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"set\" {\n///   let map : @hashmap.T[String, Int] = @hashmap.new()\n///   map.set(\"key\", 42)\n///   inspect(map.get(\"key\"), content=\"Some(42)\")\n///   map.set(\"key\", 24) // update existing key\n///   inspect(map.get(\"key\"), content=\"Some(24)\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] set(self : T[K, V], key : K, value : V) -> Unit {\n  self.set_with_hash(key, value, key.hash())\n}\n\n///|\nfn[K : Eq, V] set_with_hash(\n  self : T[K, V],\n  key : K,\n  value : V,\n  hash : Int\n) -> Unit {\n  if self.size >= self.capacity / 2 {\n    self.grow()\n  }\n  for idx = hash & self.capacity_mask, entry = { psl: 0, hash, key, value } {\n    match self.entries[idx] {\n      None => {\n        self.entries[idx] = Some(entry)\n        self.size += 1\n        break\n      }\n      Some(curr_entry) => {\n        if curr_entry.hash == entry.hash && curr_entry.key == entry.key {\n          curr_entry.value = entry.value\n          break\n        }\n        let curr_entry = if entry.psl > curr_entry.psl {\n          self.entries[idx] = Some(entry)\n          curr_entry\n        } else {\n          entry\n        }\n        curr_entry.psl += 1\n        continue (idx + 1) & self.capacity_mask, curr_entry\n      }\n    }\n  }\n}\n\n///|\n/// Sets the value associated with a key in the hash map. If the key already\n/// exists, updates its value; otherwise, adds a new key-value pair. This\n/// function is automatically called when using the index assignment syntax\n/// `map[key] = value`.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to modify.\n/// * `key` : The key to associate with the value. Must implement `Hash` and `Eq`\n/// traits.\n/// * `value` : The value to associate with the key.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"op_set\" {\n///   let map : @hashmap.T[String, Int] = @hashmap.new()\n///   map[\"key\"] = 42\n///   inspect(map.get(\"key\"), content=\"Some(42)\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] op_set(self : T[K, V], key : K, value : V) -> Unit {\n  self.set(key, value)\n}\n\n///|\n/// Retrieves the value associated with a given key in the hash map.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to search in.\n/// * `key` : The key to look up in the map.\n///\n/// Returns `Some(value)` if the key exists in the map, `None` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"get\" {\n///   let map = @hashmap.of([(\"key\", 42)])\n///   inspect(map.get(\"key\"), content=\"Some(42)\")\n///   inspect(map.get(\"nonexistent\"), content=\"None\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] get(self : T[K, V], key : K) -> V? {\n  // self.get_with_hash(key, key.hash())\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break None }\n    if entry.hash == hash && entry.key == key {\n      break Some(entry.value)\n    }\n    if i > entry.psl {\n      break None\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\nfn[K : Hash + Eq, V] get_with_hash(self : T[K, V], key : K, hash : Int) -> V? {\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break None }\n    if entry.hash == hash && entry.key == key {\n      break Some(entry.value)\n    }\n    if i > entry.psl {\n      break None\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n/// Retrieves a value from the hash map using the index operator syntax. This\n/// method is automatically called when using the square bracket notation\n/// `map[key]`.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to retrieve the value from.\n/// * `key` : The key to look up in the map. Must implement both `Hash` and `Eq`\n/// traits.\n///\n/// Returns `Some(value)` if the key exists in the map, `None` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"op_get\" {\n///   let map = @hashmap.of([(\"key\", 42)])\n///   inspect(map[\"key\"], content=\"Some(42)\")\n///   inspect(map[\"nonexistent\"], content=\"None\")\n/// }\n/// ```\n#deprecated(\"Use `get` instead. `op_get` will return `V` instead of `Option[V]` in the future.\")\npub fn[K : Hash + Eq, V] op_get(self : T[K, V], key : K) -> V? {\n  self.get(key)\n}\n\n///|\n/// Gets the value associated with the given key. If the key doesn't exist in the\n/// map, initializes it with the result of calling the provided initialization\n/// function.\n///\n/// Parameters:\n///\n/// * `self` : The hash map.\n/// * `key` : The key to look up in the map.\n/// * `init` : A function that takes no arguments and returns a value to be\n/// associated with the key if it doesn't exist.\n///\n/// Returns the value associated with the key, either existing or newly\n/// initialized.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"get_or_init\" {\n///   let map : @hashmap.T[String, Int] = @hashmap.new()\n///   let value = map.get_or_init(\"key\", fn() { 42 })\n///   inspect(value, content=\"42\")\n///   inspect(map.get(\"key\"), content=\"Some(42)\")\n/// }\n/// ```\n/// TODO: improve performance to avoid calling `get_with_hash` twice\npub fn[K : Hash + Eq, V] get_or_init(\n  self : T[K, V],\n  key : K,\n  init : () -> V\n) -> V {\n  let hash = key.hash()\n  match self.get_with_hash(key, hash) {\n    Some(v) => v\n    None => {\n      let v = init()\n      self.set_with_hash(key, v, hash)\n      v\n    }\n  }\n}\n\n///|\n/// Gets the value associated with a given key from the hash map. If the key\n/// doesn't exist, returns the provided default value instead.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to retrieve the value from.\n/// * `key` : The key to look up in the map.\n/// * `default` : The value to return if the key is not found in the map.\n///\n/// Returns the value associated with the key if it exists, otherwise returns the\n/// default value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"get_or_default\" {\n///   let map = @hashmap.of([(\"a\", 1), (\"b\", 2)])\n///   inspect(map.get_or_default(\"a\", 0), content=\"1\")\n///   inspect(map.get_or_default(\"c\", 0), content=\"0\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] get_or_default(\n  self : T[K, V],\n  key : K,\n  default : V\n) -> V {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { break default }\n    if entry.hash == hash && entry.key == key {\n      break entry.value\n    }\n    if i > entry.psl {\n      break default\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n/// Checks if a key exists in the hash map.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to search in.\n/// * `key` : The key to look for in the hash map.\n///\n/// Returns `true` if the key exists in the hash map, `false` otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"contains\" {\n///   let map = @hashmap.of([(\"a\", 1), (\"b\", 2)])\n///   inspect(map.contains(\"a\"), content=\"true\")\n///   inspect(map.contains(\"c\"), content=\"false\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] contains(self : T[K, V], key : K) -> Bool {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { return false }\n    if entry.hash == hash && entry.key == key {\n      return true\n    }\n    if i > entry.psl {\n      return false\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\npub fn[K : Hash + Eq, V : Eq] contains_kv(\n  self : T[K, V],\n  key : K,\n  value : V\n) -> Bool {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    guard self.entries[idx] is Some(entry) else { return false }\n    if entry.hash == hash && entry.key == key && entry.value == value {\n      return true\n    }\n    if i > entry.psl {\n      return false\n    }\n    continue i + 1, (idx + 1) & self.capacity_mask\n  }\n}\n\n///|\n/// Removes the entry for the specified key from the hash map. If the key exists\n/// in the map, removes its entry and adjusts the probe sequence length (PSL) of\n/// subsequent entries to maintain the Robin Hood hashing invariant. If the key\n/// does not exist, the map remains unchanged.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to remove the entry from.\n/// * `key` : The key to remove from the map.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"remove\" {\n///   let map = @hashmap.of([(\"a\", 1), (\"b\", 2)])\n///   map.remove(\"a\")\n///   inspect(map.get(\"a\"), content=\"None\")\n///   inspect(map.size(), content=\"1\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] remove(self : T[K, V], key : K) -> Unit {\n  let hash = key.hash()\n  for i = 0, idx = hash & self.capacity_mask {\n    match self.entries[idx] {\n      Some(entry) => {\n        if entry.hash == hash && entry.key == key {\n          self.entries[idx] = None\n          self.shift_back(idx)\n          self.size -= 1\n          break\n        }\n        if i > entry.psl {\n          break\n        }\n        continue i + 1, (idx + 1) & self.capacity_mask\n      }\n      None => break\n    }\n  }\n}\n\n///|\nfn[K : Hash, V] shift_back(self : T[K, V], start_index : Int) -> Unit {\n  for prev = start_index, curr = (start_index + 1) & self.capacity_mask {\n    match self.entries[curr] {\n      Some({ psl, hash, key, value }) => {\n        if psl == 0 {\n          break\n        }\n        self.entries[prev] = Some({ psl: psl - 1, hash, key, value })\n        self.entries[curr] = None\n        continue curr, (curr + 1) & self.capacity_mask\n      }\n      None => break\n    }\n  }\n}\n\n///|\nfn[K : Eq, V] grow(self : T[K, V]) -> Unit {\n  let old_entries = self.entries\n  let new_capacity = self.capacity << 1\n  self.entries = FixedArray::make(new_capacity, None)\n  self.capacity = new_capacity\n  self.capacity_mask = new_capacity - 1\n  self.size = 0\n  for i in 0..<old_entries.length() {\n    if old_entries[i] is Some({ key, value, hash, .. }) {\n      self.set_with_hash(key, value, hash)\n    }\n  }\n}\n\n///|\n/// Creates a new hash map from a fixed array of key-value pairs.\n///\n/// Parameters:\n///\n/// * `pairs` : A fixed array of tuples, where each tuple contains a key of type\n/// `K` and a value of type `V`. The key type must implement both `Eq` and `Hash`\n/// traits.\n///\n/// Returns a new hash map containing all the key-value pairs from the input\n/// array.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"of\" {\n///   let map = @hashmap.of([(1, \"one\"), (2, \"two\")])\n///   inspect(map.get(1), content=\"Some(\\\"one\\\")\")\n///   inspect(map.get(2), content=\"Some(\\\"two\\\")\")\n/// }\n/// ```\npub fn[K : Eq + Hash, V] of(arr : FixedArray[(K, V)]) -> T[K, V] {\n  let m = new(capacity=arr.length())\n  arr.each(fn(e) { m.set(e.0, e.1) })\n  m\n}\n\n///|\ntest \"of\" {\n  let m = of([(1, 2), (3, 4)])\n  inspect(m.get(1), content=\"Some(2)\")\n  inspect(m.get(3), content=\"Some(4)\")\n}\n\n///|\n/// Implements random generation of hashmaps for property-based testing through\n/// the `Arbitrary` trait.\n///\n/// Parameters:\n///\n/// * `size` : The size hint for generating random key-value pairs. Larger values\n/// typically result in larger hashmaps.\n/// * `random_state` : The random state used for generating key-value pairs.\n///\n/// Returns a randomly generated hashmap containing arbitrary key-value pairs.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"arbitrary\" {\n///   let samples : Array[@hashmap.T[Int, String]] = @quickcheck.samples(5)\n///   inspect(samples.length(), content=\"5\")\n/// }\n/// ```\npub impl[K : @quickcheck.Arbitrary + Hash + Eq, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[\n  K,\n  V,\n] with arbitrary(size, rs) {\n  let m = new()\n  (@quickcheck.Arbitrary::arbitrary(size, rs) : Iter[(K, V)]).each(fn {\n    (k, v) => m.set(k, v)\n  })\n  m\n}\n\n///|\npriv type MyString String derive(Eq)\n\n///|\n#coverage.skip\nimpl Hash for MyString with hash(self) {\n  self._.length()\n}\n\n///|\n#coverage.skip\nimpl Hash for MyString with hash_combine(self, hasher) {\n  hasher.combine_string(self._)\n}\n\n///|\n#coverage.skip\nimpl Show for MyString with output(self, logger) {\n  logger.write_string(self._)\n}\n\n///|\ntest \"arbitrary\" {\n  let samples : Array[T[String, Int]] = @quickcheck.samples(20)\n  inspect(\n    samples[5:10],\n    content=\n      #|[HashMap::of([]), HashMap::of([]), HashMap::of([(\"\", 0)]), HashMap::of([(\"\", 0)]), HashMap::of([(\"\", 0)])]\n    ,\n  )\n  inspect(\n    samples[11:15],\n    content=\n      #|[HashMap::of([(\"Q\", 1), (\"\", 0), (\"\\u{1e}\", 0)]), HashMap::of([(\"\", 0)]), HashMap::of([(\"F:\", 0), (\"A&\", 2), (\"v\\b\", 0), (\"\", 0), (\"#\", 0)]), HashMap::of([(\"p(\", -2), (\"^\\u{1e}\", 3), (\"2x\", 1), (\"\", 3)])]\n    ,\n  )\n}\n\n///|\ntest \"set\" {\n  let m : T[MyString, Int] = new()\n  m.set(\"a\", 1)\n  m.set(\"b\", 1)\n  m.set(\"bc\", 2)\n  m.set(\"abc\", 3)\n  m.set(\"cd\", 2)\n  m.set(\"c\", 1)\n  m.set(\"d\", 1)\n  assert_eq(m.size(), 7)\n  inspect(\n    m.debug_entries(),\n    content=\"_,(0,a,1),(1,b,1),(2,c,1),(3,d,1),(3,bc,2),(4,cd,2),(4,abc,3),_,_,_,_,_,_,_,_\",\n  )\n}\n\n///|\ntest \"remove\" {\n  let m : T[MyString, Int] = new()\n  m.set(\"a\", 1)\n  m.set(\"ab\", 2)\n  m.set(\"bc\", 2)\n  m.set(\"cd\", 2)\n  m.set(\"abc\", 3)\n  m.set(\"abcdef\", 6)\n  m.remove(\"ab\")\n  assert_eq(m.size(), 5)\n  inspect(\n    m.debug_entries(),\n    content=\"_,(0,a,1),(0,bc,2),(1,cd,2),(1,abc,3),_,(0,abcdef,6),_,_,_,_,_,_,_,_,_\",\n  )\n}\n\n///|\ntest \"remove_unexist_key\" {\n  let m : T[MyString, Int] = new()\n  m.set(\"a\", 1)\n  m.set(\"ab\", 2)\n  m.set(\"abc\", 3)\n  m.remove(\"d\")\n  assert_eq(m.size(), 3)\n  inspect(m.debug_entries(), content=\"_,(0,a,1),(0,ab,2),(0,abc,3),_,_,_,_\")\n}\n\n///|\ntest \"clear\" {\n  let m : T[MyString, Int] = of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n  m.clear()\n  assert_eq(m.size(), 0)\n  assert_eq(m.capacity(), 8)\n  for i in 0..<m.capacity() {\n    @test.same_object(m.entries[i], None)\n  }\n}\n\n///|\ntest \"grow\" {\n  let m : T[MyString, Int] = new()\n  m.set(\"C\", 1)\n  m.set(\"Go\", 2)\n  m.set(\"C++\", 3)\n  m.set(\"Java\", 4)\n  m.set(\"Scala\", 5)\n  m.set(\"Julia\", 5)\n  assert_eq(m.size(), 6)\n  inspect(m.capacity(), content=\"16\")\n  m.set(\"Cobol\", 5)\n  assert_eq(m.size(), 7)\n  inspect(m.capacity(), content=\"16\")\n  m.set(\"Python\", 6)\n  m.set(\"Haskell\", 7)\n  m.set(\"Rescript\", 8)\n  assert_eq(m.size(), 10)\n  inspect(m.capacity(), content=\"32\")\n  inspect(\n    m.debug_entries(),\n    content=\"_,(0,C,1),(0,Go,2),(0,C++,3),(0,Java,4),(0,Scala,5),(1,Julia,5),(2,Cobol,5),(2,Python,6),(2,Haskell,7),(2,Rescript,8),_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_\",\n  )\n}\n\n///|\ntest \"get_or_init\" {\n  let m : T[MyString, Int] = new()\n  inspect(m.get_or_init(\"a\", fn() { 1 }), content=\"1\")\n  inspect(m.get(\"a\"), content=\"Some(1)\")\n  inspect(m.get_or_init(\"a\", fn() { 2 }), content=\"1\")\n  inspect(m.get(\"a\"), content=\"Some(1)\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\nfn[K : Show, V : Show] debug_entries(self : T[K, V]) -> String {\n  for s = \"\", i = 0; i < self.entries.length(); {\n    let s = if i > 0 { s + \",\" } else { s }\n    match self.entries[i] {\n      None => continue s + \"_\", i + 1\n      Some({ psl, key, value, .. }) =>\n        continue s + \"(\\{psl},\\{key},\\{value})\", i + 1\n    }\n  } else {\n    s\n  }\n}\n\n///|\n/// Removes all key-value pairs from the map while retaining the allocated\n/// capacity. After calling this method, the size of the map will be zero but the\n/// capacity remains unchanged.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to be cleared.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"clear\" {\n///   let map = @hashmap.of([(\"a\", 1), (\"b\", 2)])\n///   map.clear()\n///   inspect(map.size(), content=\"0\")\n///   inspect(map.get(\"a\"), content=\"None\")\n/// }\n/// ```\npub fn[K, V] clear(self : T[K, V]) -> Unit {\n  self.entries.fill(None)\n  self.size = 0\n}\n\n///|\n/// Returns an iterator over the key-value pairs in the map.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to iterate over.\n///\n/// Returns an iterator that yields tuples of `(key, value)` for each entry in\n/// the map, in unspecified order.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"iter\" {\n///   let map = @hashmap.of([(1, \"one\"), (2, \"two\")])\n///   let pairs = map.iter().to_array()\n///   inspect(pairs.length(), content=\"2\")\n///   inspect(pairs.contains((1, \"one\")), content=\"true\")\n///   inspect(pairs.contains((2, \"two\")), content=\"true\")\n/// }\n/// ```\npub fn[K, V] iter(self : T[K, V]) -> Iter[(K, V)] {\n  Iter::new(fn(yield_) {\n    for entry in self.entries {\n      if entry is Some({ key, value, .. }) {\n        guard yield_((key, value)) is IterContinue else { break IterEnd }\n\n      }\n    } else {\n      IterContinue\n    }\n  })\n}\n\n///|\n/// Creates an iterator over the key-value pairs in the map, where the key and\n/// value are passed as separate arguments to the yielding function.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to iterate over.\n///\n/// Returns an iterator `Iter2[K, V]` that yields each key-value pair in the map\n/// as separate arguments. This differs from `iter()` which yields tuples of\n/// key-value pairs.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"iter2\" {\n///   let map = @hashmap.of([(1, \"one\"), (2, \"two\")])\n///   let mut sum = 0\n///   map.iter2().each(fn(k, _) { sum = sum + k })\n///   inspect(sum, content=\"3\")\n/// }\n/// ```\npub fn[K, V] iter2(self : T[K, V]) -> Iter2[K, V] {\n  Iter2::new(fn(yield_) {\n    for entry in self.entries {\n      if entry is Some({ key, value, .. }) {\n        guard yield_(key, value) is IterContinue else { break IterEnd }\n\n      }\n    } else {\n      IterContinue\n    }\n  })\n}\n\n///|\n/// Creates a new hash map from an iterator of key-value pairs.\n///\n/// Parameters:\n///\n/// * `iter` : An iterator that yields key-value pairs. The key type must\n/// implement both `Hash` and `Eq` traits.\n///\n/// Returns a new hash map containing all key-value pairs from the iterator. If\n/// the iterator yields multiple pairs with the same key, the later value will\n/// overwrite the earlier one.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"from_iter\" {\n///   let arr = [(1, \"one\"), (2, \"two\")]\n///   let iter = Iter::new(fn(yield_) {\n///     for pair in arr {\n///       if yield_(pair) == IterEnd {\n///         break IterEnd\n///       }\n///     } else {\n///       IterContinue\n///     }\n///   })\n///   let map = @hashmap.from_iter(iter)\n///   inspect(map.get(1), content=\"Some(\\\"one\\\")\")\n///   inspect(map.get(2), content=\"Some(\\\"two\\\")\")\n/// }\n/// ```\npub fn[K : Hash + Eq, V] from_iter(iter : Iter[(K, V)]) -> T[K, V] {\n  let m = new()\n  iter.each(fn(e) { m[e.0] = e.1 })\n  m\n}\n\n///|\n/// Converts the hash map into an array of key-value pairs. The order of elements\n/// in the resulting array follows the internal storage order of the hash map.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to be converted.\n///\n/// Returns an array containing tuples of key-value pairs from the hash map.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"to_array\" {\n///   let map = @hashmap.of([(1, \"one\"), (2, \"two\")])\n///   let arr = map.to_array()\n///   inspect(arr, content=\n///   #|[(2, \"two\"), (1, \"one\")]\n/// )\n/// }\n/// ```\npub fn[K, V] to_array(self : T[K, V]) -> Array[(K, V)] {\n  let mut i = 0\n  let res = while i < self.capacity {\n    if self.entries[i] is Some({ key, value, .. }) {\n      i += 1\n      break Array::make(self.size, (key, value))\n    }\n    i += 1\n  } else {\n    []\n  }\n  if not(res.is_empty()) {\n    let mut res_idx = 1\n    while res_idx < res.length() && i < self.capacity {\n      if self.entries[i] is Some({ key, value, .. }) {\n        res[res_idx] = (key, value)\n        res_idx += 1\n      }\n      i += 1\n    }\n  }\n  res\n}\n\n///|\n/// Returns the number of key-value pairs currently stored in the hash map.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to get the size from.\n///\n/// Returns the number of key-value pairs in the hash map.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"size\" {\n///   let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n///   inspect(map.size(), content=\"3\")\n/// }\n/// ```\npub fn[K, V] size(self : T[K, V]) -> Int {\n  self.size\n}\n\n///|\n/// Returns the current capacity of the hash map. The capacity is the number of\n/// key-value pairs the hash map can hold before it needs to reallocate its\n/// internal storage.\n///\n/// Parameters:\n///\n/// * `map` : The hash map whose capacity is to be queried.\n///\n/// Returns the number of key-value pairs that can be stored in the hash map\n/// before triggering a reallocation.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"capacity\" {\n///   let map : @hashmap.T[Int, String] = @hashmap.new(capacity=16)\n///   inspect(map.capacity(), content=\"16\")\n/// }\n/// ```\npub fn[K, V] capacity(self : T[K, V]) -> Int {\n  self.capacity\n}\n\n///|\n/// Returns whether the hash map contains no key-value pairs.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to check.\n///\n/// Returns `true` if the hash map contains no key-value pairs, `false`\n/// otherwise.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"is_empty\" {\n///   let map : @hashmap.T[String, Int] = @hashmap.new()\n///   inspect(map.is_empty(), content=\"true\")\n///   map.set(\"key\", 42)\n///   inspect(map.is_empty(), content=\"false\")\n/// }\n/// ```\npub fn[K, V] is_empty(self : T[K, V]) -> Bool {\n  self.size == 0\n}\n\n///|\n/// Iterates over all key-value pairs in the hash map and applies the given\n/// function to each pair.\n///\n/// Parameters:\n///\n/// * `map` : The hash map to iterate over.\n/// * `action` : A function that takes a key and a value as arguments and\n/// performs some action. The function should not return any value.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"each\" {\n///   let map = @hashmap.of([(1, \"one\"), (2, \"two\")])\n///   let mut result = \"\"\n///   map.each(fn(k, v) { result = result + \"\\{k}:\\{v},\" })\n///   inspect(result, content=\"2:two,1:one,\")\n/// }\n/// ```\npub fn[K, V] each(self : T[K, V], f : (K, V) -> Unit) -> Unit {\n  for i in 0..<self.capacity {\n    if self.entries[i] is Some({ key, value, .. }) {\n      f(key, value)\n    }\n  }\n}\n\n///|\n/// Iterates over all key-value pairs in the map with their index, applying the\n/// given function to each element. The index starts from 0 and only counts\n/// non-empty entries.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to iterate over.\n/// * `callback` : A function that takes three arguments:\n///  * An integer representing the index of the current key-value pair\n///  * The key of the current entry\n///  * The value of the current entry\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"eachi\" {\n///   let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n///   let mut result = 0\n///   map.eachi(fn(i, k, _) { if k == \"b\" { result = i } })\n///   // \"b\" is at index 1\n///   inspect(result, content=\"2\")\n/// }\n/// ```\npub fn[K, V] eachi(self : T[K, V], f : (Int, K, V) -> Unit) -> Unit {\n  for i = 0, idx = 0; i < self.capacity; {\n    match self.entries[i] {\n      Some({ key, value, .. }) => {\n        f(idx, key, value)\n        continue i + 1, idx + 1\n      }\n      None => continue i + 1, idx\n    }\n  }\n}\n\n///|\n/// Provides string representation for hash maps.\n///\n/// Parameters:\n///\n/// * `self` : The hash map to be converted to string.\n/// * `logger` : The buffer to write the string representation to.\n///\n/// Example:\n///\n/// ```moonbit\n/// test \"show\" {\n///   let map = @hashmap.of([(1, \"one\"), (2, \"two\")])\n///   inspect(map, content=\n///   #|HashMap::of([(2, \"two\"), (1, \"one\")])\n/// )\n/// }\n/// ```\npub impl[K : Show, V : Show] Show for T[K, V] with output(self, logger) {\n  logger.write_string(\"HashMap::of([\")\n  self.eachi(fn(i, k, v) {\n    if i > 0 {\n      logger.write_string(\", \")\n    }\n    logger\n    ..write_string(\"(\")\n    ..write_object(k)\n    ..write_string(\", \")\n    ..write_object(v)\n    ..write_string(\")\")\n  })\n  logger.write_string(\"])\")\n}\n","// Copyright 2025 International Digital Economy Academy\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n///|\n/// Aborts the program with an error message. Always causes a panic, regardless\n/// of the message provided.\n///\n/// Parameters:\n///\n/// * `message` : A string containing the error message to be displayed when\n/// aborting.\n///\n/// Returns a value of type `T`. However, this function never actually returns a\n/// value as it always causes a panic.\npub fn[T] abort(msg : String) -> T {\n  let _ = msg\n  panic_impl()\n}\n\n///|\nfn[T] panic_impl() -> T = \"%panic\"\n"],"mappings":"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"}